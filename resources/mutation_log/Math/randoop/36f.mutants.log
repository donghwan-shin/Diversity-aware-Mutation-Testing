1:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:44:2 |==> 0
2:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:44:2 |==> -2
3:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:47:1 |==> 0
4:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:47:1 |==> -1
5:LVR:0:POS:org.apache.commons.math.fraction.BigFraction:50:0 |==> 1
6:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction:50:0 |==> -1
7:LVR:NEG:0:org.apache.commons.math.fraction.BigFraction:53:-1 |==> 0
8:LVR:NEG:POS:org.apache.commons.math.fraction.BigFraction:53:-1 |==> 1
9:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:56:4 |==> 0
10:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:56:4 |==> -4
11:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:56:5 |==> 0
12:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:56:5 |==> -5
13:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:59:1 |==> 0
14:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:59:1 |==> -1
15:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:59:5 |==> 0
16:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:59:5 |==> -5
17:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:62:1 |==> 0
18:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:62:1 |==> -1
19:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:62:2 |==> 0
20:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:62:2 |==> -2
21:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:65:1 |==> 0
22:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:65:1 |==> -1
23:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:65:4 |==> 0
24:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:65:4 |==> -4
25:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:68:1 |==> 0
26:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:68:1 |==> -1
27:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:68:3 |==> 0
28:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:68:3 |==> -3
29:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:71:3 |==> 0
30:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:71:3 |==> -3
31:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:71:5 |==> 0
32:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:71:5 |==> -5
33:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:74:3 |==> 0
34:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:74:3 |==> -3
35:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:74:4 |==> 0
36:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:74:4 |==> -4
37:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:77:2 |==> 0
38:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:77:2 |==> -2
39:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:77:5 |==> 0
40:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:77:5 |==> -5
41:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:80:2 |==> 0
42:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:80:2 |==> -2
43:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:80:4 |==> 0
44:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:80:4 |==> -4
45:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:83:2 |==> 0
46:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:83:2 |==> -2
47:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:83:3 |==> 0
48:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:83:3 |==> -3
49:LVR:POS:0:org.apache.commons.math.fraction.BigFraction:89:100 |==> 0
50:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction:89:100 |==> -100
51:STD:<CALL>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):120:MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR) |==> <NO-OP>
52:STD:<CALL>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):121:MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR) |==> <NO-OP>
53:COR:BigInteger.ZERO.equals(den):TRUE:org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):122:BigInteger.ZERO.equals(den) |==> false
54:COR:BigInteger.ZERO.equals(den):FALSE:org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):122:BigInteger.ZERO.equals(den) |==> true
55:COR:BigInteger.ZERO.equals(num):TRUE:org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):125:BigInteger.ZERO.equals(num) |==> false
56:COR:BigInteger.ZERO.equals(num):FALSE:org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):125:BigInteger.ZERO.equals(num) |==> true
57:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):132:0 |==> 1
58:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):132:0 |==> -1
59:ROR:<(int,int):!=(int,int):org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):132:BigInteger.ONE.compareTo(gcd) < 0 |==> BigInteger.ONE.compareTo(gcd) != 0
60:ROR:<(int,int):<=(int,int):org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):132:BigInteger.ONE.compareTo(gcd) < 0 |==> BigInteger.ONE.compareTo(gcd) <= 0
61:ROR:<(int,int):==(int,int):org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):132:BigInteger.ONE.compareTo(gcd) < 0 |==> BigInteger.ONE.compareTo(gcd) == 0
62:ROR:<(int,int):>(int,int):org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):132:BigInteger.ONE.compareTo(gcd) < 0 |==> BigInteger.ONE.compareTo(gcd) > 0
63:ROR:<(int,int):>=(int,int):org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):132:BigInteger.ONE.compareTo(gcd) < 0 |==> BigInteger.ONE.compareTo(gcd) >= 0
64:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):132:BigInteger.ONE.compareTo(gcd) < 0 |==> false
65:ROR:<(int,int):TRUE(int,int):org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):132:BigInteger.ONE.compareTo(gcd) < 0 |==> true
66:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):133:num = num.divide(gcd) |==> <NO-OP>
67:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):134:den = den.divide(gcd) |==> <NO-OP>
68:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):138:0 |==> 1
69:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):138:0 |==> -1
70:ROR:>(int,int):!=(int,int):org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):138:BigInteger.ZERO.compareTo(den) > 0 |==> BigInteger.ZERO.compareTo(den) != 0
71:ROR:>(int,int):<(int,int):org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):138:BigInteger.ZERO.compareTo(den) > 0 |==> BigInteger.ZERO.compareTo(den) < 0
72:ROR:>(int,int):<=(int,int):org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):138:BigInteger.ZERO.compareTo(den) > 0 |==> BigInteger.ZERO.compareTo(den) <= 0
73:ROR:>(int,int):==(int,int):org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):138:BigInteger.ZERO.compareTo(den) > 0 |==> BigInteger.ZERO.compareTo(den) == 0
74:ROR:>(int,int):>=(int,int):org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):138:BigInteger.ZERO.compareTo(den) > 0 |==> BigInteger.ZERO.compareTo(den) >= 0
75:ROR:>(int,int):FALSE(int,int):org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):138:BigInteger.ZERO.compareTo(den) > 0 |==> false
76:ROR:>(int,int):TRUE(int,int):org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):138:BigInteger.ZERO.compareTo(den) > 0 |==> true
77:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):139:num = num.negate() |==> <NO-OP>
78:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):140:den = den.negate() |==> <NO-OP>
79:COR:Double.isNaN(value):TRUE:org.apache.commons.math.fraction.BigFraction@<init>(double):172:Double.isNaN(value) |==> false
80:COR:Double.isNaN(value):FALSE:org.apache.commons.math.fraction.BigFraction@<init>(double):172:Double.isNaN(value) |==> true
81:COR:Double.isInfinite(value):TRUE:org.apache.commons.math.fraction.BigFraction@<init>(double):175:Double.isInfinite(value) |==> false
82:COR:Double.isInfinite(value):FALSE:org.apache.commons.math.fraction.BigFraction@<init>(double):175:Double.isInfinite(value) |==> true
83:LVR:NEG:0:org.apache.commons.math.fraction.BigFraction@<init>(double):181:-9223372036854775808L |==> 0L
84:LVR:NEG:POS:org.apache.commons.math.fraction.BigFraction@<init>(double):181:-9223372036854775808L |==> -9223372036854775808L
85:LOR:&(long,long):^(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):181:bits & -9223372036854775808L |==> bits ^ -9223372036854775808L
86:LOR:&(long,long):|(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):181:bits & -9223372036854775808L |==> bits | -9223372036854775808L
87:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@<init>(double):182:9218868437227405312L |==> 0L
88:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double):182:9218868437227405312L |==> -9218868437227405312L
89:LOR:&(long,long):^(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):182:bits & 9218868437227405312L |==> bits ^ 9218868437227405312L
90:LOR:&(long,long):|(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):182:bits & 9218868437227405312L |==> bits | 9218868437227405312L
91:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@<init>(double):183:4503599627370495L |==> 0L
92:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double):183:4503599627370495L |==> -4503599627370495L
93:LOR:&(long,long):^(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):183:bits & 4503599627370495L |==> bits ^ 4503599627370495L
94:LOR:&(long,long):|(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):183:bits & 4503599627370495L |==> bits | 4503599627370495L
95:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@<init>(double):184:0 |==> 1
96:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double):184:0 |==> -1
97:ROR:!=(long,long):<(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):184:exponent != 0 |==> exponent < 0
98:ROR:!=(long,long):<=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):184:exponent != 0 |==> exponent <= 0
99:ROR:!=(long,long):==(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):184:exponent != 0 |==> exponent == 0
100:ROR:!=(long,long):>(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):184:exponent != 0 |==> exponent > 0
101:ROR:!=(long,long):>=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):184:exponent != 0 |==> exponent >= 0
102:ROR:!=(long,long):FALSE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):184:exponent != 0 |==> false
103:ROR:!=(long,long):TRUE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):184:exponent != 0 |==> true
104:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@<init>(double):186:4503599627370496L |==> 0L
105:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double):186:4503599627370496L |==> -4503599627370496L
106:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(double):186:m |= 4503599627370496L |==> <NO-OP>
107:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@<init>(double):188:0 |==> 1
108:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double):188:0 |==> -1
109:ROR:!=(long,long):<(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):188:sign != 0 |==> sign < 0
110:ROR:!=(long,long):<=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):188:sign != 0 |==> sign <= 0
111:ROR:!=(long,long):==(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):188:sign != 0 |==> sign == 0
112:ROR:!=(long,long):>(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):188:sign != 0 |==> sign > 0
113:ROR:!=(long,long):>=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):188:sign != 0 |==> sign >= 0
114:ROR:!=(long,long):FALSE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):188:sign != 0 |==> false
115:ROR:!=(long,long):TRUE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):188:sign != 0 |==> true
116:ORU:-(long):+(long):org.apache.commons.math.fraction.BigFraction@<init>(double):189:-m |==> +m
117:ORU:-(long):~(long):org.apache.commons.math.fraction.BigFraction@<init>(double):189:-m |==> ~m
118:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(double):189:m = -m |==> <NO-OP>
119:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@<init>(double):191:52 |==> 0
120:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double):191:52 |==> -52
121:SOR:>>(long,int):<<(long,int):org.apache.commons.math.fraction.BigFraction@<init>(double):191:exponent >> 52 |==> exponent << 52
122:SOR:>>(long,int):>>>(long,int):org.apache.commons.math.fraction.BigFraction@<init>(double):191:exponent >> 52 |==> exponent >>> 52
123:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@<init>(double):191:1075 |==> 0
124:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double):191:1075 |==> -1075
125:AOR:-(int,int):%(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double):191:((int)(exponent >> 52)) - 1075 |==> ((int)(exponent >> 52)) % 1075
126:AOR:-(int,int):*(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double):191:((int)(exponent >> 52)) - 1075 |==> ((int)(exponent >> 52)) * 1075
127:AOR:-(int,int):+(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double):191:((int)(exponent >> 52)) - 1075 |==> ((int)(exponent >> 52)) + 1075
128:AOR:-(int,int):/(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double):191:((int)(exponent >> 52)) - 1075 |==> ((int)(exponent >> 52)) / 1075
129:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@<init>(double):192:9007199254740990L |==> 0L
130:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double):192:9007199254740990L |==> -9007199254740990L
131:LOR:&(long,long):^(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:m & 9007199254740990L |==> m ^ 9007199254740990L
132:LOR:&(long,long):|(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:m & 9007199254740990L |==> m | 9007199254740990L
133:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@<init>(double):192:0 |==> 1
134:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double):192:0 |==> -1
135:ROR:!=(long,long):<(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:(m & 9007199254740990L) != 0 |==> (m & 9007199254740990L) < 0
136:ROR:!=(long,long):<=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:(m & 9007199254740990L) != 0 |==> (m & 9007199254740990L) <= 0
137:ROR:!=(long,long):==(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:(m & 9007199254740990L) != 0 |==> (m & 9007199254740990L) == 0
138:ROR:!=(long,long):>(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:(m & 9007199254740990L) != 0 |==> (m & 9007199254740990L) > 0
139:ROR:!=(long,long):>=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:(m & 9007199254740990L) != 0 |==> (m & 9007199254740990L) >= 0
140:ROR:!=(long,long):FALSE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:(m & 9007199254740990L) != 0 |==> false
141:ROR:!=(long,long):TRUE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:(m & 9007199254740990L) != 0 |==> true
142:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@<init>(double):192:1 |==> 0
143:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double):192:1 |==> -1
144:LOR:&(long,long):^(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:m & 1 |==> m ^ 1
145:LOR:&(long,long):|(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:m & 1 |==> m | 1
146:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@<init>(double):192:0 |==> 1
147:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double):192:0 |==> -1
148:ROR:==(long,long):!=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:(m & 1) == 0 |==> (m & 1) != 0
149:ROR:==(long,long):<(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:(m & 1) == 0 |==> (m & 1) < 0
150:ROR:==(long,long):<=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:(m & 1) == 0 |==> (m & 1) <= 0
151:ROR:==(long,long):>(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:(m & 1) == 0 |==> (m & 1) > 0
152:ROR:==(long,long):>=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:(m & 1) == 0 |==> (m & 1) >= 0
153:ROR:==(long,long):FALSE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:(m & 1) == 0 |==> false
154:ROR:==(long,long):TRUE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double):192:(m & 1) == 0 |==> true
155:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double):192:((m & 9007199254740990L) != 0) && ((m & 1) == 0) |==> ((m & 9007199254740990L) != 0) != ((m & 1) == 0)
156:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double):192:((m & 9007199254740990L) != 0) && ((m & 1) == 0) |==> ((m & 9007199254740990L) != 0) == ((m & 1) == 0)
157:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double):192:((m & 9007199254740990L) != 0) && ((m & 1) == 0) |==> false
158:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double):192:((m & 9007199254740990L) != 0) && ((m & 1) == 0) |==> ((m & 9007199254740990L) != 0)
159:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double):192:((m & 9007199254740990L) != 0) && ((m & 1) == 0) |==> ((m & 1) == 0)
160:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double):192:((m & 9007199254740990L) != 0) && ((m & 1) == 0) |==> true
161:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double):192:((m & 9007199254740990L) != 0) && ((m & 1) == 0) |==> ((m & 9007199254740990L) != 0) || ((m & 1) == 0)
162:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@<init>(double):193:1 |==> 0
163:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double):193:1 |==> -1
164:SOR:>>(long,int):<<(long,int):org.apache.commons.math.fraction.BigFraction@<init>(double):193:m >> 1 |==> m << 1
165:SOR:>>(long,int):>>>(long,int):org.apache.commons.math.fraction.BigFraction@<init>(double):193:m >> 1 |==> m >>> 1
166:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(double):193:m = m >> 1 |==> <NO-OP>
167:STD:<INC>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(double):194:++k |==> <NO-OP>
168:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@<init>(double):197:0 |==> 1
169:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double):197:0 |==> -1
170:ROR:<(int,int):!=(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double):197:k < 0 |==> k != 0
171:ROR:<(int,int):<=(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double):197:k < 0 |==> k <= 0
172:ROR:<(int,int):==(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double):197:k < 0 |==> k == 0
173:ROR:<(int,int):>(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double):197:k < 0 |==> k > 0
174:ROR:<(int,int):>=(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double):197:k < 0 |==> k >= 0
175:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double):197:k < 0 |==> false
176:ROR:<(int,int):TRUE(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double):197:k < 0 |==> true
177:ORU:-(int):+(int):org.apache.commons.math.fraction.BigFraction@<init>(double):199:-k |==> +k
178:ORU:-(int):~(int):org.apache.commons.math.fraction.BigFraction@<init>(double):199:-k |==> ~k
179:ROR:>(long,long):!=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):274:a0 > overflow |==> a0 != overflow
180:ROR:>(long,long):<(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):274:a0 > overflow |==> a0 < overflow
181:ROR:>(long,long):<=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):274:a0 > overflow |==> a0 <= overflow
182:ROR:>(long,long):==(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):274:a0 > overflow |==> a0 == overflow
183:ROR:>(long,long):>=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):274:a0 > overflow |==> a0 >= overflow
184:ROR:>(long,long):FALSE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):274:a0 > overflow |==> false
185:ROR:>(long,long):TRUE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):274:a0 > overflow |==> true
186:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):275:1L |==> 0L
187:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):275:1L |==> -1L
188:AOR:-(double,double):%(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):280:a0 - value |==> a0 % value
189:AOR:-(double,double):*(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):280:a0 - value |==> a0 * value
190:AOR:-(double,double):+(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):280:a0 - value |==> a0 + value
191:AOR:-(double,double):/(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):280:a0 - value |==> a0 / value
192:ROR:<(double,double):!=(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):280:FastMath.abs(a0 - value) < epsilon |==> FastMath.abs(a0 - value) != epsilon
193:ROR:<(double,double):<=(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):280:FastMath.abs(a0 - value) < epsilon |==> FastMath.abs(a0 - value) <= epsilon
194:ROR:<(double,double):==(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):280:FastMath.abs(a0 - value) < epsilon |==> FastMath.abs(a0 - value) == epsilon
195:ROR:<(double,double):>(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):280:FastMath.abs(a0 - value) < epsilon |==> FastMath.abs(a0 - value) > epsilon
196:ROR:<(double,double):>=(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):280:FastMath.abs(a0 - value) < epsilon |==> FastMath.abs(a0 - value) >= epsilon
197:ROR:<(double,double):FALSE(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):280:FastMath.abs(a0 - value) < epsilon |==> false
198:ROR:<(double,double):TRUE(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):280:FastMath.abs(a0 - value) < epsilon |==> true
199:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):286:1 |==> 0
200:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):286:1 |==> -1
201:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):287:0 |==> 1
202:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):287:0 |==> -1
203:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):289:1 |==> 0
204:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):289:1 |==> -1
205:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):291:0 |==> 1
206:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):291:0 |==> -1
207:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):292:1 |==> 0
208:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):292:1 |==> -1
209:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):294:0 |==> 1
210:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):294:0 |==> -1
211:LVR:FALSE:TRUE:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):295:false |==> true
212:STD:<INC>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):297:++n |==> <NO-OP>
213:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):298:1.0 |==> 0.0
214:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):298:1.0 |==> -1.0
215:AOR:-(double,double):%(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):298:r0 - a0 |==> r0 % a0
216:AOR:-(double,double):*(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):298:r0 - a0 |==> r0 * a0
217:AOR:-(double,double):+(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):298:r0 - a0 |==> r0 + a0
218:AOR:-(double,double):/(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):298:r0 - a0 |==> r0 / a0
219:AOR:/(double,double):%(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):298:1.0 / (r0 - a0) |==> 1.0 % (r0 - a0)
220:AOR:/(double,double):*(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):298:1.0 / (r0 - a0) |==> 1.0 * (r0 - a0)
221:AOR:/(double,double):+(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):298:1.0 / (r0 - a0) |==> 1.0 + (r0 - a0)
222:AOR:/(double,double):-(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):298:1.0 / (r0 - a0) |==> 1.0 - (r0 - a0)
223:AOR:*(long,long):%(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):300:a1 * p1 |==> a1 % p1
224:AOR:*(long,long):+(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):300:a1 * p1 |==> a1 + p1
225:AOR:*(long,long):-(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):300:a1 * p1 |==> a1 - p1
226:AOR:*(long,long):/(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):300:a1 * p1 |==> a1 / p1
227:AOR:+(long,long):%(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):300:(a1 * p1) + p0 |==> (a1 * p1) % p0
228:AOR:+(long,long):*(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):300:(a1 * p1) + p0 |==> (a1 * p1) * p0
229:AOR:+(long,long):-(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):300:(a1 * p1) + p0 |==> (a1 * p1) - p0
230:AOR:+(long,long):/(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):300:(a1 * p1) + p0 |==> (a1 * p1) / p0
231:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):300:p2 = (a1 * p1) + p0 |==> <NO-OP>
232:AOR:*(long,long):%(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):301:a1 * q1 |==> a1 % q1
233:AOR:*(long,long):+(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):301:a1 * q1 |==> a1 + q1
234:AOR:*(long,long):-(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):301:a1 * q1 |==> a1 - q1
235:AOR:*(long,long):/(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):301:a1 * q1 |==> a1 / q1
236:AOR:+(long,long):%(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):301:(a1 * q1) + q0 |==> (a1 * q1) % q0
237:AOR:+(long,long):*(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):301:(a1 * q1) + q0 |==> (a1 * q1) * q0
238:AOR:+(long,long):-(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):301:(a1 * q1) + q0 |==> (a1 * q1) - q0
239:AOR:+(long,long):/(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):301:(a1 * q1) + q0 |==> (a1 * q1) / q0
240:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):301:q2 = (a1 * q1) + q0 |==> <NO-OP>
241:ROR:>(long,long):!=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:p2 > overflow |==> p2 != overflow
242:ROR:>(long,long):<(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:p2 > overflow |==> p2 < overflow
243:ROR:>(long,long):<=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:p2 > overflow |==> p2 <= overflow
244:ROR:>(long,long):==(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:p2 > overflow |==> p2 == overflow
245:ROR:>(long,long):>=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:p2 > overflow |==> p2 >= overflow
246:ROR:>(long,long):FALSE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:p2 > overflow |==> false
247:ROR:>(long,long):TRUE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:p2 > overflow |==> true
248:ROR:>(long,long):!=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:q2 > overflow |==> q2 != overflow
249:ROR:>(long,long):<(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:q2 > overflow |==> q2 < overflow
250:ROR:>(long,long):<=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:q2 > overflow |==> q2 <= overflow
251:ROR:>(long,long):==(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:q2 > overflow |==> q2 == overflow
252:ROR:>(long,long):>=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:q2 > overflow |==> q2 >= overflow
253:ROR:>(long,long):FALSE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:q2 > overflow |==> false
254:ROR:>(long,long):TRUE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:q2 > overflow |==> true
255:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:(p2 > overflow) || (q2 > overflow) |==> (p2 > overflow) != (q2 > overflow)
256:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:(p2 > overflow) || (q2 > overflow) |==> (p2 > overflow) && (q2 > overflow)
257:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:(p2 > overflow) || (q2 > overflow) |==> (p2 > overflow) == (q2 > overflow)
258:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:(p2 > overflow) || (q2 > overflow) |==> false
259:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:(p2 > overflow) || (q2 > overflow) |==> (p2 > overflow)
260:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:(p2 > overflow) || (q2 > overflow) |==> (q2 > overflow)
261:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):302:(p2 > overflow) || (q2 > overflow) |==> true
262:AOR:/(double,double):%(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):306:(double)p2 / (double)q2 |==> (double)p2 % (double)q2
263:AOR:/(double,double):*(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):306:(double)p2 / (double)q2 |==> (double)p2 * (double)q2
264:AOR:/(double,double):+(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):306:(double)p2 / (double)q2 |==> (double)p2 + (double)q2
265:AOR:/(double,double):-(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):306:(double)p2 / (double)q2 |==> (double)p2 - (double)q2
266:ROR:<(int,int):!=(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:n < maxIterations |==> n != maxIterations
267:ROR:<(int,int):<=(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:n < maxIterations |==> n <= maxIterations
268:ROR:<(int,int):==(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:n < maxIterations |==> n == maxIterations
269:ROR:<(int,int):>(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:n < maxIterations |==> n > maxIterations
270:ROR:<(int,int):>=(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:n < maxIterations |==> n >= maxIterations
271:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:n < maxIterations |==> false
272:ROR:<(int,int):TRUE(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:n < maxIterations |==> true
273:AOR:-(double,double):%(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):308:convergent - value |==> convergent % value
274:AOR:-(double,double):*(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):308:convergent - value |==> convergent * value
275:AOR:-(double,double):+(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):308:convergent - value |==> convergent + value
276:AOR:-(double,double):/(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):308:convergent - value |==> convergent / value
277:ROR:>(double,double):!=(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):308:FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) != epsilon
278:ROR:>(double,double):<(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):308:FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) < epsilon
279:ROR:>(double,double):<=(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):308:FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) <= epsilon
280:ROR:>(double,double):==(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):308:FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) == epsilon
281:ROR:>(double,double):>=(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):308:FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) >= epsilon
282:ROR:>(double,double):FALSE(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):308:FastMath.abs(convergent - value) > epsilon |==> false
283:ROR:>(double,double):TRUE(double,double):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):308:FastMath.abs(convergent - value) > epsilon |==> true
284:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) |==> (n < maxIterations) != (FastMath.abs(convergent - value) > epsilon)
285:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) |==> (n < maxIterations) == (FastMath.abs(convergent - value) > epsilon)
286:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) |==> false
287:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) |==> (n < maxIterations)
288:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):308:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) |==> (FastMath.abs(convergent - value) > epsilon)
289:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) |==> true
290:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) |==> (n < maxIterations) || (FastMath.abs(convergent - value) > epsilon)
291:ROR:<(long,long):!=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):309:q2 < maxDenominator |==> q2 != maxDenominator
292:ROR:<(long,long):<=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):309:q2 < maxDenominator |==> q2 <= maxDenominator
293:ROR:<(long,long):==(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):309:q2 < maxDenominator |==> q2 == maxDenominator
294:ROR:<(long,long):>(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):309:q2 < maxDenominator |==> q2 > maxDenominator
295:ROR:<(long,long):>=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):309:q2 < maxDenominator |==> q2 >= maxDenominator
296:ROR:<(long,long):FALSE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):309:q2 < maxDenominator |==> false
297:ROR:<(long,long):TRUE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):309:q2 < maxDenominator |==> true
298:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator) |==> ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon)) != (q2 < maxDenominator)
299:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator) |==> ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon)) == (q2 < maxDenominator)
300:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):308:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator) |==> false
301:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator) |==> (n < maxIterations) && (FastMath.abs(convergent - value) > epsilon)
302:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):309:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator) |==> (q2 < maxDenominator)
303:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):308:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator) |==> true
304:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):307:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator) |==> (n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) || (q2 < maxDenominator)
305:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):310:p0 = p1 |==> <NO-OP>
306:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):311:p1 = p2 |==> <NO-OP>
307:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):312:q0 = q1 |==> <NO-OP>
308:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):313:q1 = q2 |==> <NO-OP>
309:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):314:a0 = a1 |==> <NO-OP>
310:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):315:r0 = r1 |==> <NO-OP>
311:LVR:TRUE:FALSE:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):317:true |==> false
312:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):317:stop = true |==> <NO-OP>
313:ROR:>=(int,int):!=(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):321:n >= maxIterations |==> n != maxIterations
314:ROR:>=(int,int):<(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):321:n >= maxIterations |==> n < maxIterations
315:ROR:>=(int,int):<=(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):321:n >= maxIterations |==> n <= maxIterations
316:ROR:>=(int,int):==(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):321:n >= maxIterations |==> n == maxIterations
317:ROR:>=(int,int):>(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):321:n >= maxIterations |==> n > maxIterations
318:ROR:>=(int,int):FALSE(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):321:n >= maxIterations |==> false
319:ROR:>=(int,int):TRUE(int,int):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):321:n >= maxIterations |==> true
320:ROR:<(long,long):!=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):325:q2 < maxDenominator |==> q2 != maxDenominator
321:ROR:<(long,long):<=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):325:q2 < maxDenominator |==> q2 <= maxDenominator
322:ROR:<(long,long):==(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):325:q2 < maxDenominator |==> q2 == maxDenominator
323:ROR:<(long,long):>(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):325:q2 < maxDenominator |==> q2 > maxDenominator
324:ROR:<(long,long):>=(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):325:q2 < maxDenominator |==> q2 >= maxDenominator
325:ROR:<(long,long):FALSE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):325:q2 < maxDenominator |==> false
326:ROR:<(long,long):TRUE(long,long):org.apache.commons.math.fraction.BigFraction@<init>(double,double,int,int):325:q2 < maxDenominator |==> true
327:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@<init>(double,int):353:0 |==> 1
328:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double,int):353:0 |==> -1
329:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@<init>(double,int):353:100 |==> 0
330:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@<init>(double,int):353:100 |==> -100
331:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@getReducedFraction(int,int):432:0 |==> 1
332:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@getReducedFraction(int,int):432:0 |==> -1
333:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.BigFraction@getReducedFraction(int,int):432:numerator == 0 |==> numerator != 0
334:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.BigFraction@getReducedFraction(int,int):432:numerator == 0 |==> numerator < 0
335:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.BigFraction@getReducedFraction(int,int):432:numerator == 0 |==> numerator <= 0
336:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.BigFraction@getReducedFraction(int,int):432:numerator == 0 |==> numerator > 0
337:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.BigFraction@getReducedFraction(int,int):432:numerator == 0 |==> numerator >= 0
338:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.BigFraction@getReducedFraction(int,int):432:numerator == 0 |==> false
339:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.BigFraction@getReducedFraction(int,int):432:numerator == 0 |==> true
340:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@abs():447:0 |==> 1
341:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@abs():447:0 |==> -1
342:ROR:<=(int,int):!=(int,int):org.apache.commons.math.fraction.BigFraction@abs():447:BigInteger.ZERO.compareTo(numerator) <= 0 |==> BigInteger.ZERO.compareTo(numerator) != 0
343:ROR:<=(int,int):<(int,int):org.apache.commons.math.fraction.BigFraction@abs():447:BigInteger.ZERO.compareTo(numerator) <= 0 |==> BigInteger.ZERO.compareTo(numerator) < 0
344:ROR:<=(int,int):==(int,int):org.apache.commons.math.fraction.BigFraction@abs():447:BigInteger.ZERO.compareTo(numerator) <= 0 |==> BigInteger.ZERO.compareTo(numerator) == 0
345:ROR:<=(int,int):>(int,int):org.apache.commons.math.fraction.BigFraction@abs():447:BigInteger.ZERO.compareTo(numerator) <= 0 |==> BigInteger.ZERO.compareTo(numerator) > 0
346:ROR:<=(int,int):>=(int,int):org.apache.commons.math.fraction.BigFraction@abs():447:BigInteger.ZERO.compareTo(numerator) <= 0 |==> BigInteger.ZERO.compareTo(numerator) >= 0
347:ROR:<=(int,int):FALSE(int,int):org.apache.commons.math.fraction.BigFraction@abs():447:BigInteger.ZERO.compareTo(numerator) <= 0 |==> false
348:ROR:<=(int,int):TRUE(int,int):org.apache.commons.math.fraction.BigFraction@abs():447:BigInteger.ZERO.compareTo(numerator) <= 0 |==> true
349:STD:<CALL>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@add(java.math.BigInteger):463:MathUtils.checkNotNull(bg) |==> <NO-OP>
350:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@add(org.apache.commons.math.fraction.BigFraction):507:fraction == null |==> fraction != null
351:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@add(org.apache.commons.math.fraction.BigFraction):507:fraction == null |==> false
352:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@add(org.apache.commons.math.fraction.BigFraction):507:fraction == null |==> true
353:COR:ZERO.equals(fraction):TRUE:org.apache.commons.math.fraction.BigFraction@add(org.apache.commons.math.fraction.BigFraction):510:ZERO.equals(fraction) |==> false
354:COR:ZERO.equals(fraction):FALSE:org.apache.commons.math.fraction.BigFraction@add(org.apache.commons.math.fraction.BigFraction):510:ZERO.equals(fraction) |==> true
355:COR:denominator.equals(fraction.denominator):TRUE:org.apache.commons.math.fraction.BigFraction@add(org.apache.commons.math.fraction.BigFraction):517:denominator.equals(fraction.denominator) |==> false
356:COR:denominator.equals(fraction.denominator):FALSE:org.apache.commons.math.fraction.BigFraction@add(org.apache.commons.math.fraction.BigFraction):517:denominator.equals(fraction.denominator) |==> true
357:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@add(org.apache.commons.math.fraction.BigFraction):518:num = numerator.add(fraction.numerator) |==> <NO-OP>
358:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@add(org.apache.commons.math.fraction.BigFraction):519:den = denominator |==> <NO-OP>
359:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@add(org.apache.commons.math.fraction.BigFraction):521:num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator)) |==> <NO-OP>
360:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@add(org.apache.commons.math.fraction.BigFraction):522:den = denominator.multiply(fraction.denominator) |==> <NO-OP>
361:COR:BigInteger.ZERO.equals(bg):TRUE:org.apache.commons.math.fraction.BigFraction@divide(java.math.BigInteger):614:BigInteger.ZERO.equals(bg) |==> false
362:COR:BigInteger.ZERO.equals(bg):FALSE:org.apache.commons.math.fraction.BigFraction@divide(java.math.BigInteger):614:BigInteger.ZERO.equals(bg) |==> true
363:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@divide(org.apache.commons.math.fraction.BigFraction):664:fraction == null |==> fraction != null
364:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@divide(org.apache.commons.math.fraction.BigFraction):664:fraction == null |==> false
365:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@divide(org.apache.commons.math.fraction.BigFraction):664:fraction == null |==> true
366:COR:BigInteger.ZERO.equals(fraction.numerator):TRUE:org.apache.commons.math.fraction.BigFraction@divide(org.apache.commons.math.fraction.BigFraction):667:BigInteger.ZERO.equals(fraction.numerator) |==> false
367:COR:BigInteger.ZERO.equals(fraction.numerator):FALSE:org.apache.commons.math.fraction.BigFraction@divide(org.apache.commons.math.fraction.BigFraction):667:BigInteger.ZERO.equals(fraction.numerator) |==> true
368:AOR:/(double,double):%(double,double):org.apache.commons.math.fraction.BigFraction@doubleValue():685:numerator.doubleValue() / denominator.doubleValue() |==> numerator.doubleValue() % denominator.doubleValue()
369:AOR:/(double,double):*(double,double):org.apache.commons.math.fraction.BigFraction@doubleValue():685:numerator.doubleValue() / denominator.doubleValue() |==> numerator.doubleValue() * denominator.doubleValue()
370:AOR:/(double,double):+(double,double):org.apache.commons.math.fraction.BigFraction@doubleValue():685:numerator.doubleValue() / denominator.doubleValue() |==> numerator.doubleValue() + denominator.doubleValue()
371:AOR:/(double,double):-(double,double):org.apache.commons.math.fraction.BigFraction@doubleValue():685:numerator.doubleValue() / denominator.doubleValue() |==> numerator.doubleValue() - denominator.doubleValue()
372:COR:Double.isNaN(result):TRUE:org.apache.commons.math.fraction.BigFraction@doubleValue():686:Double.isNaN(result) |==> false
373:COR:Double.isNaN(result):FALSE:org.apache.commons.math.fraction.BigFraction@doubleValue():686:Double.isNaN(result) |==> true
374:AOR:-(int,int):%(int,int):org.apache.commons.math.fraction.BigFraction@doubleValue():689:Math.max(numerator.bitLength(), denominator.bitLength()) - Double.MAX_EXPONENT |==> Math.max(numerator.bitLength(), denominator.bitLength()) % Double.MAX_EXPONENT
375:AOR:-(int,int):*(int,int):org.apache.commons.math.fraction.BigFraction@doubleValue():689:Math.max(numerator.bitLength(), denominator.bitLength()) - Double.MAX_EXPONENT |==> Math.max(numerator.bitLength(), denominator.bitLength()) * Double.MAX_EXPONENT
376:AOR:-(int,int):+(int,int):org.apache.commons.math.fraction.BigFraction@doubleValue():689:Math.max(numerator.bitLength(), denominator.bitLength()) - Double.MAX_EXPONENT |==> Math.max(numerator.bitLength(), denominator.bitLength()) + Double.MAX_EXPONENT
377:AOR:-(int,int):/(int,int):org.apache.commons.math.fraction.BigFraction@doubleValue():689:Math.max(numerator.bitLength(), denominator.bitLength()) - Double.MAX_EXPONENT |==> Math.max(numerator.bitLength(), denominator.bitLength()) / Double.MAX_EXPONENT
378:AOR:/(double,double):%(double,double):org.apache.commons.math.fraction.BigFraction@doubleValue():691:numerator.shiftRight(shift).doubleValue() / denominator.shiftRight(shift).doubleValue() |==> numerator.shiftRight(shift).doubleValue() % denominator.shiftRight(shift).doubleValue()
379:AOR:/(double,double):*(double,double):org.apache.commons.math.fraction.BigFraction@doubleValue():691:numerator.shiftRight(shift).doubleValue() / denominator.shiftRight(shift).doubleValue() |==> numerator.shiftRight(shift).doubleValue() * denominator.shiftRight(shift).doubleValue()
380:AOR:/(double,double):+(double,double):org.apache.commons.math.fraction.BigFraction@doubleValue():691:numerator.shiftRight(shift).doubleValue() / denominator.shiftRight(shift).doubleValue() |==> numerator.shiftRight(shift).doubleValue() + denominator.shiftRight(shift).doubleValue()
381:AOR:/(double,double):-(double,double):org.apache.commons.math.fraction.BigFraction@doubleValue():691:numerator.shiftRight(shift).doubleValue() / denominator.shiftRight(shift).doubleValue() |==> numerator.shiftRight(shift).doubleValue() - denominator.shiftRight(shift).doubleValue()
382:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@doubleValue():691:result = numerator.shiftRight(shift).doubleValue() / denominator.shiftRight(shift).doubleValue() |==> <NO-OP>
383:LVR:FALSE:TRUE:org.apache.commons.math.fraction.BigFraction@equals(java.lang.Object):714:false |==> true
384:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@equals(java.lang.Object):716:this == other |==> this != other
385:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@equals(java.lang.Object):716:this == other |==> false
386:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@equals(java.lang.Object):716:this == other |==> true
387:LVR:TRUE:FALSE:org.apache.commons.math.fraction.BigFraction@equals(java.lang.Object):717:true |==> false
388:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@equals(java.lang.Object):717:ret = true |==> <NO-OP>
389:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math.fraction.BigFraction@equals(java.lang.Object):721:thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> thisOne.numerator.equals(rhs.numerator) != thisOne.denominator.equals(rhs.denominator)
390:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math.fraction.BigFraction@equals(java.lang.Object):721:thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> thisOne.numerator.equals(rhs.numerator) == thisOne.denominator.equals(rhs.denominator)
391:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math.fraction.BigFraction@equals(java.lang.Object):721:thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> false
392:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math.fraction.BigFraction@equals(java.lang.Object):721:thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> thisOne.numerator.equals(rhs.numerator)
393:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math.fraction.BigFraction@equals(java.lang.Object):721:thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> thisOne.denominator.equals(rhs.denominator)
394:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math.fraction.BigFraction@equals(java.lang.Object):721:thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> true
395:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math.fraction.BigFraction@equals(java.lang.Object):721:thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> thisOne.numerator.equals(rhs.numerator) || thisOne.denominator.equals(rhs.denominator)
396:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@equals(java.lang.Object):721:ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> <NO-OP>
397:AOR:/(float,float):%(float,float):org.apache.commons.math.fraction.BigFraction@floatValue():738:numerator.floatValue() / denominator.floatValue() |==> numerator.floatValue() % denominator.floatValue()
398:AOR:/(float,float):*(float,float):org.apache.commons.math.fraction.BigFraction@floatValue():738:numerator.floatValue() / denominator.floatValue() |==> numerator.floatValue() * denominator.floatValue()
399:AOR:/(float,float):+(float,float):org.apache.commons.math.fraction.BigFraction@floatValue():738:numerator.floatValue() / denominator.floatValue() |==> numerator.floatValue() + denominator.floatValue()
400:AOR:/(float,float):-(float,float):org.apache.commons.math.fraction.BigFraction@floatValue():738:numerator.floatValue() / denominator.floatValue() |==> numerator.floatValue() - denominator.floatValue()
401:COR:Double.isNaN(result):TRUE:org.apache.commons.math.fraction.BigFraction@floatValue():739:Double.isNaN(result) |==> false
402:COR:Double.isNaN(result):FALSE:org.apache.commons.math.fraction.BigFraction@floatValue():739:Double.isNaN(result) |==> true
403:AOR:-(int,int):%(int,int):org.apache.commons.math.fraction.BigFraction@floatValue():742:Math.max(numerator.bitLength(), denominator.bitLength()) - Float.MAX_EXPONENT |==> Math.max(numerator.bitLength(), denominator.bitLength()) % Float.MAX_EXPONENT
404:AOR:-(int,int):*(int,int):org.apache.commons.math.fraction.BigFraction@floatValue():742:Math.max(numerator.bitLength(), denominator.bitLength()) - Float.MAX_EXPONENT |==> Math.max(numerator.bitLength(), denominator.bitLength()) * Float.MAX_EXPONENT
405:AOR:-(int,int):+(int,int):org.apache.commons.math.fraction.BigFraction@floatValue():742:Math.max(numerator.bitLength(), denominator.bitLength()) - Float.MAX_EXPONENT |==> Math.max(numerator.bitLength(), denominator.bitLength()) + Float.MAX_EXPONENT
406:AOR:-(int,int):/(int,int):org.apache.commons.math.fraction.BigFraction@floatValue():742:Math.max(numerator.bitLength(), denominator.bitLength()) - Float.MAX_EXPONENT |==> Math.max(numerator.bitLength(), denominator.bitLength()) / Float.MAX_EXPONENT
407:AOR:/(float,float):%(float,float):org.apache.commons.math.fraction.BigFraction@floatValue():744:numerator.shiftRight(shift).floatValue() / denominator.shiftRight(shift).floatValue() |==> numerator.shiftRight(shift).floatValue() % denominator.shiftRight(shift).floatValue()
408:AOR:/(float,float):*(float,float):org.apache.commons.math.fraction.BigFraction@floatValue():744:numerator.shiftRight(shift).floatValue() / denominator.shiftRight(shift).floatValue() |==> numerator.shiftRight(shift).floatValue() * denominator.shiftRight(shift).floatValue()
409:AOR:/(float,float):+(float,float):org.apache.commons.math.fraction.BigFraction@floatValue():744:numerator.shiftRight(shift).floatValue() / denominator.shiftRight(shift).floatValue() |==> numerator.shiftRight(shift).floatValue() + denominator.shiftRight(shift).floatValue()
410:AOR:/(float,float):-(float,float):org.apache.commons.math.fraction.BigFraction@floatValue():744:numerator.shiftRight(shift).floatValue() / denominator.shiftRight(shift).floatValue() |==> numerator.shiftRight(shift).floatValue() - denominator.shiftRight(shift).floatValue()
411:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@floatValue():744:result = numerator.shiftRight(shift).floatValue() / denominator.shiftRight(shift).floatValue() |==> <NO-OP>
412:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@hashCode():826:37 |==> 0
413:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@hashCode():826:37 |==> -37
414:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@hashCode():826:37 |==> 0
415:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@hashCode():826:37 |==> -37
416:LVR:POS:0:org.apache.commons.math.fraction.BigFraction@hashCode():826:17 |==> 0
417:LVR:POS:NEG:org.apache.commons.math.fraction.BigFraction@hashCode():826:17 |==> -17
418:AOR:*(int,int):%(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * 17 |==> 37 % 17
419:AOR:*(int,int):+(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * 17 |==> 37 + 17
420:AOR:*(int,int):-(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * 17 |==> 37 - 17
421:AOR:*(int,int):/(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * 17 |==> 37 / 17
422:AOR:+(int,int):%(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * 17 + numerator.hashCode() |==> 37 * 17 % numerator.hashCode()
423:AOR:+(int,int):*(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * 17 + numerator.hashCode() |==> 37 * 17 * numerator.hashCode()
424:AOR:+(int,int):-(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * 17 + numerator.hashCode() |==> 37 * 17 - numerator.hashCode()
425:AOR:+(int,int):/(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * 17 + numerator.hashCode() |==> 37 * 17 / numerator.hashCode()
426:AOR:*(int,int):%(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * (37 * 17 + numerator.hashCode()) |==> 37 % (37 * 17 + numerator.hashCode())
427:AOR:*(int,int):+(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * (37 * 17 + numerator.hashCode()) |==> 37 + (37 * 17 + numerator.hashCode())
428:AOR:*(int,int):-(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * (37 * 17 + numerator.hashCode()) |==> 37 - (37 * 17 + numerator.hashCode())
429:AOR:*(int,int):/(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * (37 * 17 + numerator.hashCode()) |==> 37 / (37 * 17 + numerator.hashCode())
430:AOR:+(int,int):%(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode() |==> 37 * (37 * 17 + numerator.hashCode()) % denominator.hashCode()
431:AOR:+(int,int):*(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode() |==> 37 * (37 * 17 + numerator.hashCode()) * denominator.hashCode()
432:AOR:+(int,int):-(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode() |==> 37 * (37 * 17 + numerator.hashCode()) - denominator.hashCode()
433:AOR:+(int,int):/(int,int):org.apache.commons.math.fraction.BigFraction@hashCode():826:37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode() |==> 37 * (37 * 17 + numerator.hashCode()) / denominator.hashCode()
434:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@multiply(java.math.BigInteger):868:bg == null |==> bg != null
435:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@multiply(java.math.BigInteger):868:bg == null |==> false
436:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@multiply(java.math.BigInteger):868:bg == null |==> true
437:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@multiply(org.apache.commons.math.fraction.BigFraction):913:fraction == null |==> fraction != null
438:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@multiply(org.apache.commons.math.fraction.BigFraction):913:fraction == null |==> false
439:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@multiply(org.apache.commons.math.fraction.BigFraction):913:fraction == null |==> true
440:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math.fraction.BigFraction@multiply(org.apache.commons.math.fraction.BigFraction):916:numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO) |==> numerator.equals(BigInteger.ZERO) != fraction.numerator.equals(BigInteger.ZERO)
441:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.math.fraction.BigFraction@multiply(org.apache.commons.math.fraction.BigFraction):916:numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO) |==> numerator.equals(BigInteger.ZERO) && fraction.numerator.equals(BigInteger.ZERO)
442:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.math.fraction.BigFraction@multiply(org.apache.commons.math.fraction.BigFraction):916:numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO) |==> numerator.equals(BigInteger.ZERO) == fraction.numerator.equals(BigInteger.ZERO)
443:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math.fraction.BigFraction@multiply(org.apache.commons.math.fraction.BigFraction):916:numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO) |==> false
444:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math.fraction.BigFraction@multiply(org.apache.commons.math.fraction.BigFraction):916:numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO) |==> numerator.equals(BigInteger.ZERO)
445:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math.fraction.BigFraction@multiply(org.apache.commons.math.fraction.BigFraction):917:numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO) |==> fraction.numerator.equals(BigInteger.ZERO)
446:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math.fraction.BigFraction@multiply(org.apache.commons.math.fraction.BigFraction):916:numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO) |==> true
447:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@pow(int):960:0 |==> 1
448:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@pow(int):960:0 |==> -1
449:ROR:<(int,int):!=(int,int):org.apache.commons.math.fraction.BigFraction@pow(int):960:exponent < 0 |==> exponent != 0
450:ROR:<(int,int):<=(int,int):org.apache.commons.math.fraction.BigFraction@pow(int):960:exponent < 0 |==> exponent <= 0
451:ROR:<(int,int):==(int,int):org.apache.commons.math.fraction.BigFraction@pow(int):960:exponent < 0 |==> exponent == 0
452:ROR:<(int,int):>(int,int):org.apache.commons.math.fraction.BigFraction@pow(int):960:exponent < 0 |==> exponent > 0
453:ROR:<(int,int):>=(int,int):org.apache.commons.math.fraction.BigFraction@pow(int):960:exponent < 0 |==> exponent >= 0
454:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.fraction.BigFraction@pow(int):960:exponent < 0 |==> false
455:ROR:<(int,int):TRUE(int,int):org.apache.commons.math.fraction.BigFraction@pow(int):960:exponent < 0 |==> true
456:ORU:-(int):+(int):org.apache.commons.math.fraction.BigFraction@pow(int):961:-exponent |==> +exponent
457:ORU:-(int):~(int):org.apache.commons.math.fraction.BigFraction@pow(int):961:-exponent |==> ~exponent
458:ORU:-(int):+(int):org.apache.commons.math.fraction.BigFraction@pow(int):961:-exponent |==> +exponent
459:ORU:-(int):~(int):org.apache.commons.math.fraction.BigFraction@pow(int):961:-exponent |==> ~exponent
460:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@pow(long):977:0 |==> 1
461:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@pow(long):977:0 |==> -1
462:ROR:<(long,long):!=(long,long):org.apache.commons.math.fraction.BigFraction@pow(long):977:exponent < 0 |==> exponent != 0
463:ROR:<(long,long):<=(long,long):org.apache.commons.math.fraction.BigFraction@pow(long):977:exponent < 0 |==> exponent <= 0
464:ROR:<(long,long):==(long,long):org.apache.commons.math.fraction.BigFraction@pow(long):977:exponent < 0 |==> exponent == 0
465:ROR:<(long,long):>(long,long):org.apache.commons.math.fraction.BigFraction@pow(long):977:exponent < 0 |==> exponent > 0
466:ROR:<(long,long):>=(long,long):org.apache.commons.math.fraction.BigFraction@pow(long):977:exponent < 0 |==> exponent >= 0
467:ROR:<(long,long):FALSE(long,long):org.apache.commons.math.fraction.BigFraction@pow(long):977:exponent < 0 |==> false
468:ROR:<(long,long):TRUE(long,long):org.apache.commons.math.fraction.BigFraction@pow(long):977:exponent < 0 |==> true
469:ORU:-(long):+(long):org.apache.commons.math.fraction.BigFraction@pow(long):978:-exponent |==> +exponent
470:ORU:-(long):~(long):org.apache.commons.math.fraction.BigFraction@pow(long):978:-exponent |==> ~exponent
471:ORU:-(long):+(long):org.apache.commons.math.fraction.BigFraction@pow(long):979:-exponent |==> +exponent
472:ORU:-(long):~(long):org.apache.commons.math.fraction.BigFraction@pow(long):979:-exponent |==> ~exponent
473:LVR:0:POS:org.apache.commons.math.fraction.BigFraction@pow(java.math.BigInteger):996:0 |==> 1
474:LVR:0:NEG:org.apache.commons.math.fraction.BigFraction@pow(java.math.BigInteger):996:0 |==> -1
475:ROR:<(int,int):!=(int,int):org.apache.commons.math.fraction.BigFraction@pow(java.math.BigInteger):996:exponent.compareTo(BigInteger.ZERO) < 0 |==> exponent.compareTo(BigInteger.ZERO) != 0
476:ROR:<(int,int):<=(int,int):org.apache.commons.math.fraction.BigFraction@pow(java.math.BigInteger):996:exponent.compareTo(BigInteger.ZERO) < 0 |==> exponent.compareTo(BigInteger.ZERO) <= 0
477:ROR:<(int,int):==(int,int):org.apache.commons.math.fraction.BigFraction@pow(java.math.BigInteger):996:exponent.compareTo(BigInteger.ZERO) < 0 |==> exponent.compareTo(BigInteger.ZERO) == 0
478:ROR:<(int,int):>(int,int):org.apache.commons.math.fraction.BigFraction@pow(java.math.BigInteger):996:exponent.compareTo(BigInteger.ZERO) < 0 |==> exponent.compareTo(BigInteger.ZERO) > 0
479:ROR:<(int,int):>=(int,int):org.apache.commons.math.fraction.BigFraction@pow(java.math.BigInteger):996:exponent.compareTo(BigInteger.ZERO) < 0 |==> exponent.compareTo(BigInteger.ZERO) >= 0
480:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.fraction.BigFraction@pow(java.math.BigInteger):996:exponent.compareTo(BigInteger.ZERO) < 0 |==> false
481:ROR:<(int,int):TRUE(int,int):org.apache.commons.math.fraction.BigFraction@pow(java.math.BigInteger):996:exponent.compareTo(BigInteger.ZERO) < 0 |==> true
482:AOR:/(double,double):%(double,double):org.apache.commons.math.fraction.BigFraction@pow(double):1016:FastMath.pow(numerator.doubleValue(), exponent) / FastMath.pow(denominator.doubleValue(), exponent) |==> FastMath.pow(numerator.doubleValue(), exponent) % FastMath.pow(denominator.doubleValue(), exponent)
483:AOR:/(double,double):*(double,double):org.apache.commons.math.fraction.BigFraction@pow(double):1016:FastMath.pow(numerator.doubleValue(), exponent) / FastMath.pow(denominator.doubleValue(), exponent) |==> FastMath.pow(numerator.doubleValue(), exponent) * FastMath.pow(denominator.doubleValue(), exponent)
484:AOR:/(double,double):+(double,double):org.apache.commons.math.fraction.BigFraction@pow(double):1016:FastMath.pow(numerator.doubleValue(), exponent) / FastMath.pow(denominator.doubleValue(), exponent) |==> FastMath.pow(numerator.doubleValue(), exponent) + FastMath.pow(denominator.doubleValue(), exponent)
485:AOR:/(double,double):-(double,double):org.apache.commons.math.fraction.BigFraction@pow(double):1016:FastMath.pow(numerator.doubleValue(), exponent) / FastMath.pow(denominator.doubleValue(), exponent) |==> FastMath.pow(numerator.doubleValue(), exponent) - FastMath.pow(denominator.doubleValue(), exponent)
486:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@subtract(java.math.BigInteger):1055:bg == null |==> bg != null
487:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@subtract(java.math.BigInteger):1055:bg == null |==> false
488:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@subtract(java.math.BigInteger):1055:bg == null |==> true
489:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@subtract(org.apache.commons.math.fraction.BigFraction):1098:fraction == null |==> fraction != null
490:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@subtract(org.apache.commons.math.fraction.BigFraction):1098:fraction == null |==> false
491:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.BigFraction@subtract(org.apache.commons.math.fraction.BigFraction):1098:fraction == null |==> true
492:COR:ZERO.equals(fraction):TRUE:org.apache.commons.math.fraction.BigFraction@subtract(org.apache.commons.math.fraction.BigFraction):1101:ZERO.equals(fraction) |==> false
493:COR:ZERO.equals(fraction):FALSE:org.apache.commons.math.fraction.BigFraction@subtract(org.apache.commons.math.fraction.BigFraction):1101:ZERO.equals(fraction) |==> true
494:COR:denominator.equals(fraction.denominator):TRUE:org.apache.commons.math.fraction.BigFraction@subtract(org.apache.commons.math.fraction.BigFraction):1107:denominator.equals(fraction.denominator) |==> false
495:COR:denominator.equals(fraction.denominator):FALSE:org.apache.commons.math.fraction.BigFraction@subtract(org.apache.commons.math.fraction.BigFraction):1107:denominator.equals(fraction.denominator) |==> true
496:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@subtract(org.apache.commons.math.fraction.BigFraction):1108:num = numerator.subtract(fraction.numerator) |==> <NO-OP>
497:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@subtract(org.apache.commons.math.fraction.BigFraction):1109:den = denominator |==> <NO-OP>
498:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@subtract(org.apache.commons.math.fraction.BigFraction):1111:num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator)) |==> <NO-OP>
499:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@subtract(org.apache.commons.math.fraction.BigFraction):1112:den = denominator.multiply(fraction.denominator) |==> <NO-OP>
500:COR:BigInteger.ONE.equals(denominator):TRUE:org.apache.commons.math.fraction.BigFraction@toString():1130:BigInteger.ONE.equals(denominator) |==> false
501:COR:BigInteger.ONE.equals(denominator):FALSE:org.apache.commons.math.fraction.BigFraction@toString():1130:BigInteger.ONE.equals(denominator) |==> true
502:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@toString():1131:str = numerator.toString() |==> <NO-OP>
503:COR:BigInteger.ZERO.equals(numerator):TRUE:org.apache.commons.math.fraction.BigFraction@toString():1132:BigInteger.ZERO.equals(numerator) |==> false
504:COR:BigInteger.ZERO.equals(numerator):FALSE:org.apache.commons.math.fraction.BigFraction@toString():1132:BigInteger.ZERO.equals(numerator) |==> true
505:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@toString():1133:str = "0" |==> <NO-OP>
506:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.BigFraction@toString():1135:str = numerator + " / " + denominator |==> <NO-OP>
