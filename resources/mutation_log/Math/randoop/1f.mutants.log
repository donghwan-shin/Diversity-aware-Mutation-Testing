1:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:45:2 |==> 0
2:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:45:2 |==> -2
3:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:48:1 |==> 0
4:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:48:1 |==> -1
5:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction:51:0 |==> 1
6:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction:51:0 |==> -1
7:LVR:NEG:0:org.apache.commons.math3.fraction.BigFraction:54:-1 |==> 0
8:LVR:NEG:POS:org.apache.commons.math3.fraction.BigFraction:54:-1 |==> 1
9:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:57:4 |==> 0
10:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:57:4 |==> -4
11:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:57:5 |==> 0
12:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:57:5 |==> -5
13:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:60:1 |==> 0
14:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:60:1 |==> -1
15:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:60:5 |==> 0
16:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:60:5 |==> -5
17:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:63:1 |==> 0
18:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:63:1 |==> -1
19:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:63:2 |==> 0
20:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:63:2 |==> -2
21:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:66:1 |==> 0
22:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:66:1 |==> -1
23:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:66:4 |==> 0
24:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:66:4 |==> -4
25:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:69:1 |==> 0
26:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:69:1 |==> -1
27:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:69:3 |==> 0
28:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:69:3 |==> -3
29:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:72:3 |==> 0
30:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:72:3 |==> -3
31:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:72:5 |==> 0
32:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:72:5 |==> -5
33:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:75:3 |==> 0
34:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:75:3 |==> -3
35:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:75:4 |==> 0
36:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:75:4 |==> -4
37:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:78:2 |==> 0
38:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:78:2 |==> -2
39:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:78:5 |==> 0
40:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:78:5 |==> -5
41:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:81:2 |==> 0
42:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:81:2 |==> -2
43:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:81:4 |==> 0
44:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:81:4 |==> -4
45:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:84:2 |==> 0
46:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:84:2 |==> -2
47:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:84:3 |==> 0
48:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:84:3 |==> -3
49:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction:90:100 |==> 0
50:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction:90:100 |==> -100
51:STD:<CALL>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):121:MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR) |==> <NO-OP>
52:STD:<CALL>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):122:MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR) |==> <NO-OP>
53:COR:BigInteger.ZERO.equals(den):TRUE:org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):123:BigInteger.ZERO.equals(den) |==> false
54:COR:BigInteger.ZERO.equals(den):FALSE:org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):123:BigInteger.ZERO.equals(den) |==> true
55:COR:BigInteger.ZERO.equals(num):TRUE:org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):126:BigInteger.ZERO.equals(num) |==> false
56:COR:BigInteger.ZERO.equals(num):FALSE:org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):126:BigInteger.ZERO.equals(num) |==> true
57:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):133:0 |==> 1
58:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):133:0 |==> -1
59:ROR:<(int,int):!=(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):133:BigInteger.ONE.compareTo(gcd) < 0 |==> BigInteger.ONE.compareTo(gcd) != 0
60:ROR:<(int,int):<=(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):133:BigInteger.ONE.compareTo(gcd) < 0 |==> BigInteger.ONE.compareTo(gcd) <= 0
61:ROR:<(int,int):==(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):133:BigInteger.ONE.compareTo(gcd) < 0 |==> BigInteger.ONE.compareTo(gcd) == 0
62:ROR:<(int,int):>(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):133:BigInteger.ONE.compareTo(gcd) < 0 |==> BigInteger.ONE.compareTo(gcd) > 0
63:ROR:<(int,int):>=(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):133:BigInteger.ONE.compareTo(gcd) < 0 |==> BigInteger.ONE.compareTo(gcd) >= 0
64:ROR:<(int,int):FALSE(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):133:BigInteger.ONE.compareTo(gcd) < 0 |==> false
65:ROR:<(int,int):TRUE(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):133:BigInteger.ONE.compareTo(gcd) < 0 |==> true
66:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):134:num = num.divide(gcd) |==> <NO-OP>
67:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):135:den = den.divide(gcd) |==> <NO-OP>
68:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):139:0 |==> 1
69:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):139:0 |==> -1
70:ROR:>(int,int):!=(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):139:BigInteger.ZERO.compareTo(den) > 0 |==> BigInteger.ZERO.compareTo(den) != 0
71:ROR:>(int,int):<(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):139:BigInteger.ZERO.compareTo(den) > 0 |==> BigInteger.ZERO.compareTo(den) < 0
72:ROR:>(int,int):<=(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):139:BigInteger.ZERO.compareTo(den) > 0 |==> BigInteger.ZERO.compareTo(den) <= 0
73:ROR:>(int,int):==(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):139:BigInteger.ZERO.compareTo(den) > 0 |==> BigInteger.ZERO.compareTo(den) == 0
74:ROR:>(int,int):>=(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):139:BigInteger.ZERO.compareTo(den) > 0 |==> BigInteger.ZERO.compareTo(den) >= 0
75:ROR:>(int,int):FALSE(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):139:BigInteger.ZERO.compareTo(den) > 0 |==> false
76:ROR:>(int,int):TRUE(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):139:BigInteger.ZERO.compareTo(den) > 0 |==> true
77:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):140:num = num.negate() |==> <NO-OP>
78:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(java.math.BigInteger,java.math.BigInteger):141:den = den.negate() |==> <NO-OP>
79:COR:Double.isNaN(value):TRUE:org.apache.commons.math3.fraction.BigFraction@<init>(double):173:Double.isNaN(value) |==> false
80:COR:Double.isNaN(value):FALSE:org.apache.commons.math3.fraction.BigFraction@<init>(double):173:Double.isNaN(value) |==> true
81:COR:Double.isInfinite(value):TRUE:org.apache.commons.math3.fraction.BigFraction@<init>(double):176:Double.isInfinite(value) |==> false
82:COR:Double.isInfinite(value):FALSE:org.apache.commons.math3.fraction.BigFraction@<init>(double):176:Double.isInfinite(value) |==> true
83:LVR:NEG:0:org.apache.commons.math3.fraction.BigFraction@<init>(double):182:-9223372036854775808L |==> 0L
84:LVR:NEG:POS:org.apache.commons.math3.fraction.BigFraction@<init>(double):182:-9223372036854775808L |==> -9223372036854775808L
85:LOR:&(long,long):^(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):182:bits & -9223372036854775808L |==> bits ^ -9223372036854775808L
86:LOR:&(long,long):|(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):182:bits & -9223372036854775808L |==> bits | -9223372036854775808L
87:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@<init>(double):183:9218868437227405312L |==> 0L
88:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double):183:9218868437227405312L |==> -9218868437227405312L
89:LOR:&(long,long):^(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):183:bits & 9218868437227405312L |==> bits ^ 9218868437227405312L
90:LOR:&(long,long):|(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):183:bits & 9218868437227405312L |==> bits | 9218868437227405312L
91:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@<init>(double):184:4503599627370495L |==> 0L
92:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double):184:4503599627370495L |==> -4503599627370495L
93:LOR:&(long,long):^(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):184:bits & 4503599627370495L |==> bits ^ 4503599627370495L
94:LOR:&(long,long):|(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):184:bits & 4503599627370495L |==> bits | 4503599627370495L
95:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@<init>(double):185:0 |==> 1
96:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double):185:0 |==> -1
97:ROR:!=(long,long):<(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):185:exponent != 0 |==> exponent < 0
98:ROR:!=(long,long):<=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):185:exponent != 0 |==> exponent <= 0
99:ROR:!=(long,long):==(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):185:exponent != 0 |==> exponent == 0
100:ROR:!=(long,long):>(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):185:exponent != 0 |==> exponent > 0
101:ROR:!=(long,long):>=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):185:exponent != 0 |==> exponent >= 0
102:ROR:!=(long,long):FALSE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):185:exponent != 0 |==> false
103:ROR:!=(long,long):TRUE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):185:exponent != 0 |==> true
104:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@<init>(double):187:4503599627370496L |==> 0L
105:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double):187:4503599627370496L |==> -4503599627370496L
106:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(double):187:m |= 4503599627370496L |==> <NO-OP>
107:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@<init>(double):189:0 |==> 1
108:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double):189:0 |==> -1
109:ROR:!=(long,long):<(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):189:sign != 0 |==> sign < 0
110:ROR:!=(long,long):<=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):189:sign != 0 |==> sign <= 0
111:ROR:!=(long,long):==(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):189:sign != 0 |==> sign == 0
112:ROR:!=(long,long):>(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):189:sign != 0 |==> sign > 0
113:ROR:!=(long,long):>=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):189:sign != 0 |==> sign >= 0
114:ROR:!=(long,long):FALSE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):189:sign != 0 |==> false
115:ROR:!=(long,long):TRUE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):189:sign != 0 |==> true
116:ORU:-(long):+(long):org.apache.commons.math3.fraction.BigFraction@<init>(double):190:-m |==> +m
117:ORU:-(long):~(long):org.apache.commons.math3.fraction.BigFraction@<init>(double):190:-m |==> ~m
118:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(double):190:m = -m |==> <NO-OP>
119:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@<init>(double):192:52 |==> 0
120:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double):192:52 |==> -52
121:SOR:>>(long,int):<<(long,int):org.apache.commons.math3.fraction.BigFraction@<init>(double):192:exponent >> 52 |==> exponent << 52
122:SOR:>>(long,int):>>>(long,int):org.apache.commons.math3.fraction.BigFraction@<init>(double):192:exponent >> 52 |==> exponent >>> 52
123:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@<init>(double):192:1075 |==> 0
124:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double):192:1075 |==> -1075
125:AOR:-(int,int):%(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double):192:((int)(exponent >> 52)) - 1075 |==> ((int)(exponent >> 52)) % 1075
126:AOR:-(int,int):*(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double):192:((int)(exponent >> 52)) - 1075 |==> ((int)(exponent >> 52)) * 1075
127:AOR:-(int,int):+(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double):192:((int)(exponent >> 52)) - 1075 |==> ((int)(exponent >> 52)) + 1075
128:AOR:-(int,int):/(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double):192:((int)(exponent >> 52)) - 1075 |==> ((int)(exponent >> 52)) / 1075
129:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@<init>(double):193:9007199254740990L |==> 0L
130:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double):193:9007199254740990L |==> -9007199254740990L
131:LOR:&(long,long):^(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:m & 9007199254740990L |==> m ^ 9007199254740990L
132:LOR:&(long,long):|(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:m & 9007199254740990L |==> m | 9007199254740990L
133:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@<init>(double):193:0 |==> 1
134:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double):193:0 |==> -1
135:ROR:!=(long,long):<(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:(m & 9007199254740990L) != 0 |==> (m & 9007199254740990L) < 0
136:ROR:!=(long,long):<=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:(m & 9007199254740990L) != 0 |==> (m & 9007199254740990L) <= 0
137:ROR:!=(long,long):==(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:(m & 9007199254740990L) != 0 |==> (m & 9007199254740990L) == 0
138:ROR:!=(long,long):>(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:(m & 9007199254740990L) != 0 |==> (m & 9007199254740990L) > 0
139:ROR:!=(long,long):>=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:(m & 9007199254740990L) != 0 |==> (m & 9007199254740990L) >= 0
140:ROR:!=(long,long):FALSE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:(m & 9007199254740990L) != 0 |==> false
141:ROR:!=(long,long):TRUE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:(m & 9007199254740990L) != 0 |==> true
142:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@<init>(double):193:1 |==> 0
143:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double):193:1 |==> -1
144:LOR:&(long,long):^(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:m & 1 |==> m ^ 1
145:LOR:&(long,long):|(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:m & 1 |==> m | 1
146:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@<init>(double):193:0 |==> 1
147:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double):193:0 |==> -1
148:ROR:==(long,long):!=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:(m & 1) == 0 |==> (m & 1) != 0
149:ROR:==(long,long):<(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:(m & 1) == 0 |==> (m & 1) < 0
150:ROR:==(long,long):<=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:(m & 1) == 0 |==> (m & 1) <= 0
151:ROR:==(long,long):>(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:(m & 1) == 0 |==> (m & 1) > 0
152:ROR:==(long,long):>=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:(m & 1) == 0 |==> (m & 1) >= 0
153:ROR:==(long,long):FALSE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:(m & 1) == 0 |==> false
154:ROR:==(long,long):TRUE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:(m & 1) == 0 |==> true
155:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:((m & 9007199254740990L) != 0) && ((m & 1) == 0) |==> ((m & 9007199254740990L) != 0) != ((m & 1) == 0)
156:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:((m & 9007199254740990L) != 0) && ((m & 1) == 0) |==> ((m & 9007199254740990L) != 0) == ((m & 1) == 0)
157:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:((m & 9007199254740990L) != 0) && ((m & 1) == 0) |==> false
158:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:((m & 9007199254740990L) != 0) && ((m & 1) == 0) |==> ((m & 9007199254740990L) != 0)
159:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:((m & 9007199254740990L) != 0) && ((m & 1) == 0) |==> ((m & 1) == 0)
160:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:((m & 9007199254740990L) != 0) && ((m & 1) == 0) |==> true
161:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double):193:((m & 9007199254740990L) != 0) && ((m & 1) == 0) |==> ((m & 9007199254740990L) != 0) || ((m & 1) == 0)
162:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@<init>(double):194:1 |==> 0
163:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double):194:1 |==> -1
164:SOR:>>(long,int):<<(long,int):org.apache.commons.math3.fraction.BigFraction@<init>(double):194:m >> 1 |==> m << 1
165:SOR:>>(long,int):>>>(long,int):org.apache.commons.math3.fraction.BigFraction@<init>(double):194:m >> 1 |==> m >>> 1
166:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(double):194:m = m >> 1 |==> <NO-OP>
167:STD:<INC>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(double):195:++k |==> <NO-OP>
168:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@<init>(double):198:0 |==> 1
169:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double):198:0 |==> -1
170:ROR:<(int,int):!=(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double):198:k < 0 |==> k != 0
171:ROR:<(int,int):<=(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double):198:k < 0 |==> k <= 0
172:ROR:<(int,int):==(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double):198:k < 0 |==> k == 0
173:ROR:<(int,int):>(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double):198:k < 0 |==> k > 0
174:ROR:<(int,int):>=(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double):198:k < 0 |==> k >= 0
175:ROR:<(int,int):FALSE(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double):198:k < 0 |==> false
176:ROR:<(int,int):TRUE(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double):198:k < 0 |==> true
177:ORU:-(int):+(int):org.apache.commons.math3.fraction.BigFraction@<init>(double):200:-k |==> +k
178:ORU:-(int):~(int):org.apache.commons.math3.fraction.BigFraction@<init>(double):200:-k |==> ~k
179:ROR:>(long,long):!=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):275:a0 > overflow |==> a0 != overflow
180:ROR:>(long,long):<(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):275:a0 > overflow |==> a0 < overflow
181:ROR:>(long,long):<=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):275:a0 > overflow |==> a0 <= overflow
182:ROR:>(long,long):==(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):275:a0 > overflow |==> a0 == overflow
183:ROR:>(long,long):>=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):275:a0 > overflow |==> a0 >= overflow
184:ROR:>(long,long):FALSE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):275:a0 > overflow |==> false
185:ROR:>(long,long):TRUE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):275:a0 > overflow |==> true
186:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):276:1L |==> 0L
187:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):276:1L |==> -1L
188:AOR:-(double,double):%(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):281:a0 - value |==> a0 % value
189:AOR:-(double,double):*(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):281:a0 - value |==> a0 * value
190:AOR:-(double,double):+(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):281:a0 - value |==> a0 + value
191:AOR:-(double,double):/(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):281:a0 - value |==> a0 / value
192:ROR:<(double,double):!=(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):281:FastMath.abs(a0 - value) < epsilon |==> FastMath.abs(a0 - value) != epsilon
193:ROR:<(double,double):<=(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):281:FastMath.abs(a0 - value) < epsilon |==> FastMath.abs(a0 - value) <= epsilon
194:ROR:<(double,double):==(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):281:FastMath.abs(a0 - value) < epsilon |==> FastMath.abs(a0 - value) == epsilon
195:ROR:<(double,double):>(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):281:FastMath.abs(a0 - value) < epsilon |==> FastMath.abs(a0 - value) > epsilon
196:ROR:<(double,double):>=(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):281:FastMath.abs(a0 - value) < epsilon |==> FastMath.abs(a0 - value) >= epsilon
197:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):281:FastMath.abs(a0 - value) < epsilon |==> false
198:ROR:<(double,double):TRUE(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):281:FastMath.abs(a0 - value) < epsilon |==> true
199:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):287:1 |==> 0
200:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):287:1 |==> -1
201:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):288:0 |==> 1
202:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):288:0 |==> -1
203:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):290:1 |==> 0
204:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):290:1 |==> -1
205:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):292:0 |==> 1
206:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):292:0 |==> -1
207:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):293:1 |==> 0
208:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):293:1 |==> -1
209:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):295:0 |==> 1
210:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):295:0 |==> -1
211:LVR:FALSE:TRUE:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):296:false |==> true
212:STD:<INC>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):298:++n |==> <NO-OP>
213:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):299:1.0 |==> 0.0
214:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):299:1.0 |==> -1.0
215:AOR:-(double,double):%(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):299:r0 - a0 |==> r0 % a0
216:AOR:-(double,double):*(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):299:r0 - a0 |==> r0 * a0
217:AOR:-(double,double):+(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):299:r0 - a0 |==> r0 + a0
218:AOR:-(double,double):/(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):299:r0 - a0 |==> r0 / a0
219:AOR:/(double,double):%(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):299:1.0 / (r0 - a0) |==> 1.0 % (r0 - a0)
220:AOR:/(double,double):*(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):299:1.0 / (r0 - a0) |==> 1.0 * (r0 - a0)
221:AOR:/(double,double):+(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):299:1.0 / (r0 - a0) |==> 1.0 + (r0 - a0)
222:AOR:/(double,double):-(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):299:1.0 / (r0 - a0) |==> 1.0 - (r0 - a0)
223:AOR:*(long,long):%(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):301:a1 * p1 |==> a1 % p1
224:AOR:*(long,long):+(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):301:a1 * p1 |==> a1 + p1
225:AOR:*(long,long):-(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):301:a1 * p1 |==> a1 - p1
226:AOR:*(long,long):/(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):301:a1 * p1 |==> a1 / p1
227:AOR:+(long,long):%(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):301:(a1 * p1) + p0 |==> (a1 * p1) % p0
228:AOR:+(long,long):*(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):301:(a1 * p1) + p0 |==> (a1 * p1) * p0
229:AOR:+(long,long):-(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):301:(a1 * p1) + p0 |==> (a1 * p1) - p0
230:AOR:+(long,long):/(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):301:(a1 * p1) + p0 |==> (a1 * p1) / p0
231:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):301:p2 = (a1 * p1) + p0 |==> <NO-OP>
232:AOR:*(long,long):%(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):302:a1 * q1 |==> a1 % q1
233:AOR:*(long,long):+(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):302:a1 * q1 |==> a1 + q1
234:AOR:*(long,long):-(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):302:a1 * q1 |==> a1 - q1
235:AOR:*(long,long):/(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):302:a1 * q1 |==> a1 / q1
236:AOR:+(long,long):%(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):302:(a1 * q1) + q0 |==> (a1 * q1) % q0
237:AOR:+(long,long):*(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):302:(a1 * q1) + q0 |==> (a1 * q1) * q0
238:AOR:+(long,long):-(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):302:(a1 * q1) + q0 |==> (a1 * q1) - q0
239:AOR:+(long,long):/(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):302:(a1 * q1) + q0 |==> (a1 * q1) / q0
240:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):302:q2 = (a1 * q1) + q0 |==> <NO-OP>
241:ROR:>(long,long):!=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:p2 > overflow |==> p2 != overflow
242:ROR:>(long,long):<(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:p2 > overflow |==> p2 < overflow
243:ROR:>(long,long):<=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:p2 > overflow |==> p2 <= overflow
244:ROR:>(long,long):==(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:p2 > overflow |==> p2 == overflow
245:ROR:>(long,long):>=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:p2 > overflow |==> p2 >= overflow
246:ROR:>(long,long):FALSE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:p2 > overflow |==> false
247:ROR:>(long,long):TRUE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:p2 > overflow |==> true
248:ROR:>(long,long):!=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:q2 > overflow |==> q2 != overflow
249:ROR:>(long,long):<(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:q2 > overflow |==> q2 < overflow
250:ROR:>(long,long):<=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:q2 > overflow |==> q2 <= overflow
251:ROR:>(long,long):==(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:q2 > overflow |==> q2 == overflow
252:ROR:>(long,long):>=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:q2 > overflow |==> q2 >= overflow
253:ROR:>(long,long):FALSE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:q2 > overflow |==> false
254:ROR:>(long,long):TRUE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:q2 > overflow |==> true
255:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:(p2 > overflow) || (q2 > overflow) |==> (p2 > overflow) != (q2 > overflow)
256:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:(p2 > overflow) || (q2 > overflow) |==> (p2 > overflow) && (q2 > overflow)
257:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:(p2 > overflow) || (q2 > overflow) |==> (p2 > overflow) == (q2 > overflow)
258:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:(p2 > overflow) || (q2 > overflow) |==> false
259:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:(p2 > overflow) || (q2 > overflow) |==> (p2 > overflow)
260:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:(p2 > overflow) || (q2 > overflow) |==> (q2 > overflow)
261:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):303:(p2 > overflow) || (q2 > overflow) |==> true
262:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:0.0 |==> 1.0
263:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:0.0 |==> -1.0
264:ROR:==(double,double):!=(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:epsilon == 0.0 |==> epsilon != 0.0
265:ROR:==(double,double):<(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:epsilon == 0.0 |==> epsilon < 0.0
266:ROR:==(double,double):<=(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:epsilon == 0.0 |==> epsilon <= 0.0
267:ROR:==(double,double):>(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:epsilon == 0.0 |==> epsilon > 0.0
268:ROR:==(double,double):>=(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:epsilon == 0.0 |==> epsilon >= 0.0
269:ROR:==(double,double):FALSE(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:epsilon == 0.0 |==> false
270:ROR:==(double,double):TRUE(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:epsilon == 0.0 |==> true
271:ROR:<(long,long):!=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:FastMath.abs(q1) < maxDenominator |==> FastMath.abs(q1) != maxDenominator
272:ROR:<(long,long):<=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:FastMath.abs(q1) < maxDenominator |==> FastMath.abs(q1) <= maxDenominator
273:ROR:<(long,long):==(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:FastMath.abs(q1) < maxDenominator |==> FastMath.abs(q1) == maxDenominator
274:ROR:<(long,long):>(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:FastMath.abs(q1) < maxDenominator |==> FastMath.abs(q1) > maxDenominator
275:ROR:<(long,long):>=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:FastMath.abs(q1) < maxDenominator |==> FastMath.abs(q1) >= maxDenominator
276:ROR:<(long,long):FALSE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:FastMath.abs(q1) < maxDenominator |==> false
277:ROR:<(long,long):TRUE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:FastMath.abs(q1) < maxDenominator |==> true
278:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:epsilon == 0.0 && FastMath.abs(q1) < maxDenominator |==> epsilon == 0.0 != FastMath.abs(q1) < maxDenominator
279:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:epsilon == 0.0 && FastMath.abs(q1) < maxDenominator |==> epsilon == 0.0 == FastMath.abs(q1) < maxDenominator
280:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:epsilon == 0.0 && FastMath.abs(q1) < maxDenominator |==> false
281:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:epsilon == 0.0 && FastMath.abs(q1) < maxDenominator |==> epsilon == 0.0
282:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:epsilon == 0.0 && FastMath.abs(q1) < maxDenominator |==> FastMath.abs(q1) < maxDenominator
283:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:epsilon == 0.0 && FastMath.abs(q1) < maxDenominator |==> true
284:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):306:epsilon == 0.0 && FastMath.abs(q1) < maxDenominator |==> epsilon == 0.0 || FastMath.abs(q1) < maxDenominator
285:AOR:/(double,double):%(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):312:(double)p2 / (double)q2 |==> (double)p2 % (double)q2
286:AOR:/(double,double):*(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):312:(double)p2 / (double)q2 |==> (double)p2 * (double)q2
287:AOR:/(double,double):+(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):312:(double)p2 / (double)q2 |==> (double)p2 + (double)q2
288:AOR:/(double,double):-(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):312:(double)p2 / (double)q2 |==> (double)p2 - (double)q2
289:ROR:<(int,int):!=(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:n < maxIterations |==> n != maxIterations
290:ROR:<(int,int):<=(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:n < maxIterations |==> n <= maxIterations
291:ROR:<(int,int):==(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:n < maxIterations |==> n == maxIterations
292:ROR:<(int,int):>(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:n < maxIterations |==> n > maxIterations
293:ROR:<(int,int):>=(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:n < maxIterations |==> n >= maxIterations
294:ROR:<(int,int):FALSE(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:n < maxIterations |==> false
295:ROR:<(int,int):TRUE(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:n < maxIterations |==> true
296:AOR:-(double,double):%(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):314:convergent - value |==> convergent % value
297:AOR:-(double,double):*(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):314:convergent - value |==> convergent * value
298:AOR:-(double,double):+(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):314:convergent - value |==> convergent + value
299:AOR:-(double,double):/(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):314:convergent - value |==> convergent / value
300:ROR:>(double,double):!=(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):314:FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) != epsilon
301:ROR:>(double,double):<(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):314:FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) < epsilon
302:ROR:>(double,double):<=(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):314:FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) <= epsilon
303:ROR:>(double,double):==(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):314:FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) == epsilon
304:ROR:>(double,double):>=(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):314:FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) >= epsilon
305:ROR:>(double,double):FALSE(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):314:FastMath.abs(convergent - value) > epsilon |==> false
306:ROR:>(double,double):TRUE(double,double):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):314:FastMath.abs(convergent - value) > epsilon |==> true
307:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) |==> (n < maxIterations) != (FastMath.abs(convergent - value) > epsilon)
308:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) |==> (n < maxIterations) == (FastMath.abs(convergent - value) > epsilon)
309:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) |==> false
310:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) |==> (n < maxIterations)
311:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):314:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) |==> (FastMath.abs(convergent - value) > epsilon)
312:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) |==> true
313:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) |==> (n < maxIterations) || (FastMath.abs(convergent - value) > epsilon)
314:ROR:<(long,long):!=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):315:q2 < maxDenominator |==> q2 != maxDenominator
315:ROR:<(long,long):<=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):315:q2 < maxDenominator |==> q2 <= maxDenominator
316:ROR:<(long,long):==(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):315:q2 < maxDenominator |==> q2 == maxDenominator
317:ROR:<(long,long):>(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):315:q2 < maxDenominator |==> q2 > maxDenominator
318:ROR:<(long,long):>=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):315:q2 < maxDenominator |==> q2 >= maxDenominator
319:ROR:<(long,long):FALSE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):315:q2 < maxDenominator |==> false
320:ROR:<(long,long):TRUE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):315:q2 < maxDenominator |==> true
321:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator) |==> ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon)) != (q2 < maxDenominator)
322:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator) |==> ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon)) == (q2 < maxDenominator)
323:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):314:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator) |==> false
324:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator) |==> (n < maxIterations) && (FastMath.abs(convergent - value) > epsilon)
325:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):315:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator) |==> (q2 < maxDenominator)
326:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):314:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator) |==> true
327:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):313:(n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator) |==> (n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) || (q2 < maxDenominator)
328:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):316:p0 = p1 |==> <NO-OP>
329:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):317:p1 = p2 |==> <NO-OP>
330:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):318:q0 = q1 |==> <NO-OP>
331:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):319:q1 = q2 |==> <NO-OP>
332:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):320:a0 = a1 |==> <NO-OP>
333:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):321:r0 = r1 |==> <NO-OP>
334:LVR:TRUE:FALSE:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):323:true |==> false
335:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):323:stop = true |==> <NO-OP>
336:ROR:>=(int,int):!=(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):327:n >= maxIterations |==> n != maxIterations
337:ROR:>=(int,int):<(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):327:n >= maxIterations |==> n < maxIterations
338:ROR:>=(int,int):<=(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):327:n >= maxIterations |==> n <= maxIterations
339:ROR:>=(int,int):==(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):327:n >= maxIterations |==> n == maxIterations
340:ROR:>=(int,int):>(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):327:n >= maxIterations |==> n > maxIterations
341:ROR:>=(int,int):FALSE(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):327:n >= maxIterations |==> false
342:ROR:>=(int,int):TRUE(int,int):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):327:n >= maxIterations |==> true
343:ROR:<(long,long):!=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):331:q2 < maxDenominator |==> q2 != maxDenominator
344:ROR:<(long,long):<=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):331:q2 < maxDenominator |==> q2 <= maxDenominator
345:ROR:<(long,long):==(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):331:q2 < maxDenominator |==> q2 == maxDenominator
346:ROR:<(long,long):>(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):331:q2 < maxDenominator |==> q2 > maxDenominator
347:ROR:<(long,long):>=(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):331:q2 < maxDenominator |==> q2 >= maxDenominator
348:ROR:<(long,long):FALSE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):331:q2 < maxDenominator |==> false
349:ROR:<(long,long):TRUE(long,long):org.apache.commons.math3.fraction.BigFraction@<init>(double,double,int,int):331:q2 < maxDenominator |==> true
350:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@<init>(double,int):359:0 |==> 1
351:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double,int):359:0 |==> -1
352:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@<init>(double,int):359:100 |==> 0
353:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@<init>(double,int):359:100 |==> -100
354:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@getReducedFraction(int,int):438:0 |==> 1
355:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@getReducedFraction(int,int):438:0 |==> -1
356:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.BigFraction@getReducedFraction(int,int):438:numerator == 0 |==> numerator != 0
357:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.BigFraction@getReducedFraction(int,int):438:numerator == 0 |==> numerator < 0
358:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.BigFraction@getReducedFraction(int,int):438:numerator == 0 |==> numerator <= 0
359:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.BigFraction@getReducedFraction(int,int):438:numerator == 0 |==> numerator > 0
360:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.BigFraction@getReducedFraction(int,int):438:numerator == 0 |==> numerator >= 0
361:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.BigFraction@getReducedFraction(int,int):438:numerator == 0 |==> false
362:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.BigFraction@getReducedFraction(int,int):438:numerator == 0 |==> true
363:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@abs():453:0 |==> 1
364:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@abs():453:0 |==> -1
365:ROR:<=(int,int):!=(int,int):org.apache.commons.math3.fraction.BigFraction@abs():453:BigInteger.ZERO.compareTo(numerator) <= 0 |==> BigInteger.ZERO.compareTo(numerator) != 0
366:ROR:<=(int,int):<(int,int):org.apache.commons.math3.fraction.BigFraction@abs():453:BigInteger.ZERO.compareTo(numerator) <= 0 |==> BigInteger.ZERO.compareTo(numerator) < 0
367:ROR:<=(int,int):==(int,int):org.apache.commons.math3.fraction.BigFraction@abs():453:BigInteger.ZERO.compareTo(numerator) <= 0 |==> BigInteger.ZERO.compareTo(numerator) == 0
368:ROR:<=(int,int):>(int,int):org.apache.commons.math3.fraction.BigFraction@abs():453:BigInteger.ZERO.compareTo(numerator) <= 0 |==> BigInteger.ZERO.compareTo(numerator) > 0
369:ROR:<=(int,int):>=(int,int):org.apache.commons.math3.fraction.BigFraction@abs():453:BigInteger.ZERO.compareTo(numerator) <= 0 |==> BigInteger.ZERO.compareTo(numerator) >= 0
370:ROR:<=(int,int):FALSE(int,int):org.apache.commons.math3.fraction.BigFraction@abs():453:BigInteger.ZERO.compareTo(numerator) <= 0 |==> false
371:ROR:<=(int,int):TRUE(int,int):org.apache.commons.math3.fraction.BigFraction@abs():453:BigInteger.ZERO.compareTo(numerator) <= 0 |==> true
372:STD:<CALL>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@add(java.math.BigInteger):469:MathUtils.checkNotNull(bg) |==> <NO-OP>
373:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@add(org.apache.commons.math3.fraction.BigFraction):513:fraction == null |==> fraction != null
374:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@add(org.apache.commons.math3.fraction.BigFraction):513:fraction == null |==> false
375:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@add(org.apache.commons.math3.fraction.BigFraction):513:fraction == null |==> true
376:COR:ZERO.equals(fraction):TRUE:org.apache.commons.math3.fraction.BigFraction@add(org.apache.commons.math3.fraction.BigFraction):516:ZERO.equals(fraction) |==> false
377:COR:ZERO.equals(fraction):FALSE:org.apache.commons.math3.fraction.BigFraction@add(org.apache.commons.math3.fraction.BigFraction):516:ZERO.equals(fraction) |==> true
378:COR:denominator.equals(fraction.denominator):TRUE:org.apache.commons.math3.fraction.BigFraction@add(org.apache.commons.math3.fraction.BigFraction):523:denominator.equals(fraction.denominator) |==> false
379:COR:denominator.equals(fraction.denominator):FALSE:org.apache.commons.math3.fraction.BigFraction@add(org.apache.commons.math3.fraction.BigFraction):523:denominator.equals(fraction.denominator) |==> true
380:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@add(org.apache.commons.math3.fraction.BigFraction):524:num = numerator.add(fraction.numerator) |==> <NO-OP>
381:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@add(org.apache.commons.math3.fraction.BigFraction):525:den = denominator |==> <NO-OP>
382:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@add(org.apache.commons.math3.fraction.BigFraction):527:num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator)) |==> <NO-OP>
383:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@add(org.apache.commons.math3.fraction.BigFraction):528:den = denominator.multiply(fraction.denominator) |==> <NO-OP>
384:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@divide(java.math.BigInteger):617:bg == null |==> bg != null
385:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@divide(java.math.BigInteger):617:bg == null |==> false
386:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@divide(java.math.BigInteger):617:bg == null |==> true
387:COR:BigInteger.ZERO.equals(bg):TRUE:org.apache.commons.math3.fraction.BigFraction@divide(java.math.BigInteger):620:BigInteger.ZERO.equals(bg) |==> false
388:COR:BigInteger.ZERO.equals(bg):FALSE:org.apache.commons.math3.fraction.BigFraction@divide(java.math.BigInteger):620:BigInteger.ZERO.equals(bg) |==> true
389:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@divide(org.apache.commons.math3.fraction.BigFraction):666:fraction == null |==> fraction != null
390:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@divide(org.apache.commons.math3.fraction.BigFraction):666:fraction == null |==> false
391:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@divide(org.apache.commons.math3.fraction.BigFraction):666:fraction == null |==> true
392:COR:BigInteger.ZERO.equals(fraction.numerator):TRUE:org.apache.commons.math3.fraction.BigFraction@divide(org.apache.commons.math3.fraction.BigFraction):669:BigInteger.ZERO.equals(fraction.numerator) |==> false
393:COR:BigInteger.ZERO.equals(fraction.numerator):FALSE:org.apache.commons.math3.fraction.BigFraction@divide(org.apache.commons.math3.fraction.BigFraction):669:BigInteger.ZERO.equals(fraction.numerator) |==> true
394:AOR:/(double,double):%(double,double):org.apache.commons.math3.fraction.BigFraction@doubleValue():687:numerator.doubleValue() / denominator.doubleValue() |==> numerator.doubleValue() % denominator.doubleValue()
395:AOR:/(double,double):*(double,double):org.apache.commons.math3.fraction.BigFraction@doubleValue():687:numerator.doubleValue() / denominator.doubleValue() |==> numerator.doubleValue() * denominator.doubleValue()
396:AOR:/(double,double):+(double,double):org.apache.commons.math3.fraction.BigFraction@doubleValue():687:numerator.doubleValue() / denominator.doubleValue() |==> numerator.doubleValue() + denominator.doubleValue()
397:AOR:/(double,double):-(double,double):org.apache.commons.math3.fraction.BigFraction@doubleValue():687:numerator.doubleValue() / denominator.doubleValue() |==> numerator.doubleValue() - denominator.doubleValue()
398:COR:Double.isNaN(result):TRUE:org.apache.commons.math3.fraction.BigFraction@doubleValue():688:Double.isNaN(result) |==> false
399:COR:Double.isNaN(result):FALSE:org.apache.commons.math3.fraction.BigFraction@doubleValue():688:Double.isNaN(result) |==> true
400:AOR:-(int,int):%(int,int):org.apache.commons.math3.fraction.BigFraction@doubleValue():691:Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Double.MAX_VALUE) |==> Math.max(numerator.bitLength(), denominator.bitLength()) % FastMath.getExponent(Double.MAX_VALUE)
401:AOR:-(int,int):*(int,int):org.apache.commons.math3.fraction.BigFraction@doubleValue():691:Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Double.MAX_VALUE) |==> Math.max(numerator.bitLength(), denominator.bitLength()) * FastMath.getExponent(Double.MAX_VALUE)
402:AOR:-(int,int):+(int,int):org.apache.commons.math3.fraction.BigFraction@doubleValue():691:Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Double.MAX_VALUE) |==> Math.max(numerator.bitLength(), denominator.bitLength()) + FastMath.getExponent(Double.MAX_VALUE)
403:AOR:-(int,int):/(int,int):org.apache.commons.math3.fraction.BigFraction@doubleValue():691:Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Double.MAX_VALUE) |==> Math.max(numerator.bitLength(), denominator.bitLength()) / FastMath.getExponent(Double.MAX_VALUE)
404:AOR:/(double,double):%(double,double):org.apache.commons.math3.fraction.BigFraction@doubleValue():693:numerator.shiftRight(shift).doubleValue() / denominator.shiftRight(shift).doubleValue() |==> numerator.shiftRight(shift).doubleValue() % denominator.shiftRight(shift).doubleValue()
405:AOR:/(double,double):*(double,double):org.apache.commons.math3.fraction.BigFraction@doubleValue():693:numerator.shiftRight(shift).doubleValue() / denominator.shiftRight(shift).doubleValue() |==> numerator.shiftRight(shift).doubleValue() * denominator.shiftRight(shift).doubleValue()
406:AOR:/(double,double):+(double,double):org.apache.commons.math3.fraction.BigFraction@doubleValue():693:numerator.shiftRight(shift).doubleValue() / denominator.shiftRight(shift).doubleValue() |==> numerator.shiftRight(shift).doubleValue() + denominator.shiftRight(shift).doubleValue()
407:AOR:/(double,double):-(double,double):org.apache.commons.math3.fraction.BigFraction@doubleValue():693:numerator.shiftRight(shift).doubleValue() / denominator.shiftRight(shift).doubleValue() |==> numerator.shiftRight(shift).doubleValue() - denominator.shiftRight(shift).doubleValue()
408:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@doubleValue():693:result = numerator.shiftRight(shift).doubleValue() / denominator.shiftRight(shift).doubleValue() |==> <NO-OP>
409:LVR:FALSE:TRUE:org.apache.commons.math3.fraction.BigFraction@equals(java.lang.Object):716:false |==> true
410:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@equals(java.lang.Object):718:this == other |==> this != other
411:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@equals(java.lang.Object):718:this == other |==> false
412:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@equals(java.lang.Object):718:this == other |==> true
413:LVR:TRUE:FALSE:org.apache.commons.math3.fraction.BigFraction@equals(java.lang.Object):719:true |==> false
414:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@equals(java.lang.Object):719:ret = true |==> <NO-OP>
415:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@equals(java.lang.Object):723:thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> thisOne.numerator.equals(rhs.numerator) != thisOne.denominator.equals(rhs.denominator)
416:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@equals(java.lang.Object):723:thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> thisOne.numerator.equals(rhs.numerator) == thisOne.denominator.equals(rhs.denominator)
417:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@equals(java.lang.Object):723:thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> false
418:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@equals(java.lang.Object):723:thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> thisOne.numerator.equals(rhs.numerator)
419:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@equals(java.lang.Object):723:thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> thisOne.denominator.equals(rhs.denominator)
420:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@equals(java.lang.Object):723:thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> true
421:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@equals(java.lang.Object):723:thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> thisOne.numerator.equals(rhs.numerator) || thisOne.denominator.equals(rhs.denominator)
422:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@equals(java.lang.Object):723:ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator) |==> <NO-OP>
423:AOR:/(float,float):%(float,float):org.apache.commons.math3.fraction.BigFraction@floatValue():740:numerator.floatValue() / denominator.floatValue() |==> numerator.floatValue() % denominator.floatValue()
424:AOR:/(float,float):*(float,float):org.apache.commons.math3.fraction.BigFraction@floatValue():740:numerator.floatValue() / denominator.floatValue() |==> numerator.floatValue() * denominator.floatValue()
425:AOR:/(float,float):+(float,float):org.apache.commons.math3.fraction.BigFraction@floatValue():740:numerator.floatValue() / denominator.floatValue() |==> numerator.floatValue() + denominator.floatValue()
426:AOR:/(float,float):-(float,float):org.apache.commons.math3.fraction.BigFraction@floatValue():740:numerator.floatValue() / denominator.floatValue() |==> numerator.floatValue() - denominator.floatValue()
427:COR:Double.isNaN(result):TRUE:org.apache.commons.math3.fraction.BigFraction@floatValue():741:Double.isNaN(result) |==> false
428:COR:Double.isNaN(result):FALSE:org.apache.commons.math3.fraction.BigFraction@floatValue():741:Double.isNaN(result) |==> true
429:AOR:-(int,int):%(int,int):org.apache.commons.math3.fraction.BigFraction@floatValue():744:Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Float.MAX_VALUE) |==> Math.max(numerator.bitLength(), denominator.bitLength()) % FastMath.getExponent(Float.MAX_VALUE)
430:AOR:-(int,int):*(int,int):org.apache.commons.math3.fraction.BigFraction@floatValue():744:Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Float.MAX_VALUE) |==> Math.max(numerator.bitLength(), denominator.bitLength()) * FastMath.getExponent(Float.MAX_VALUE)
431:AOR:-(int,int):+(int,int):org.apache.commons.math3.fraction.BigFraction@floatValue():744:Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Float.MAX_VALUE) |==> Math.max(numerator.bitLength(), denominator.bitLength()) + FastMath.getExponent(Float.MAX_VALUE)
432:AOR:-(int,int):/(int,int):org.apache.commons.math3.fraction.BigFraction@floatValue():744:Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Float.MAX_VALUE) |==> Math.max(numerator.bitLength(), denominator.bitLength()) / FastMath.getExponent(Float.MAX_VALUE)
433:AOR:/(float,float):%(float,float):org.apache.commons.math3.fraction.BigFraction@floatValue():746:numerator.shiftRight(shift).floatValue() / denominator.shiftRight(shift).floatValue() |==> numerator.shiftRight(shift).floatValue() % denominator.shiftRight(shift).floatValue()
434:AOR:/(float,float):*(float,float):org.apache.commons.math3.fraction.BigFraction@floatValue():746:numerator.shiftRight(shift).floatValue() / denominator.shiftRight(shift).floatValue() |==> numerator.shiftRight(shift).floatValue() * denominator.shiftRight(shift).floatValue()
435:AOR:/(float,float):+(float,float):org.apache.commons.math3.fraction.BigFraction@floatValue():746:numerator.shiftRight(shift).floatValue() / denominator.shiftRight(shift).floatValue() |==> numerator.shiftRight(shift).floatValue() + denominator.shiftRight(shift).floatValue()
436:AOR:/(float,float):-(float,float):org.apache.commons.math3.fraction.BigFraction@floatValue():746:numerator.shiftRight(shift).floatValue() / denominator.shiftRight(shift).floatValue() |==> numerator.shiftRight(shift).floatValue() - denominator.shiftRight(shift).floatValue()
437:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@floatValue():746:result = numerator.shiftRight(shift).floatValue() / denominator.shiftRight(shift).floatValue() |==> <NO-OP>
438:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 |==> 0
439:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 |==> -37
440:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 |==> 0
441:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 |==> -37
442:LVR:POS:0:org.apache.commons.math3.fraction.BigFraction@hashCode():828:17 |==> 0
443:LVR:POS:NEG:org.apache.commons.math3.fraction.BigFraction@hashCode():828:17 |==> -17
444:AOR:*(int,int):%(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * 17 |==> 37 % 17
445:AOR:*(int,int):+(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * 17 |==> 37 + 17
446:AOR:*(int,int):-(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * 17 |==> 37 - 17
447:AOR:*(int,int):/(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * 17 |==> 37 / 17
448:AOR:+(int,int):%(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * 17 + numerator.hashCode() |==> 37 * 17 % numerator.hashCode()
449:AOR:+(int,int):*(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * 17 + numerator.hashCode() |==> 37 * 17 * numerator.hashCode()
450:AOR:+(int,int):-(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * 17 + numerator.hashCode() |==> 37 * 17 - numerator.hashCode()
451:AOR:+(int,int):/(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * 17 + numerator.hashCode() |==> 37 * 17 / numerator.hashCode()
452:AOR:*(int,int):%(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * (37 * 17 + numerator.hashCode()) |==> 37 % (37 * 17 + numerator.hashCode())
453:AOR:*(int,int):+(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * (37 * 17 + numerator.hashCode()) |==> 37 + (37 * 17 + numerator.hashCode())
454:AOR:*(int,int):-(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * (37 * 17 + numerator.hashCode()) |==> 37 - (37 * 17 + numerator.hashCode())
455:AOR:*(int,int):/(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * (37 * 17 + numerator.hashCode()) |==> 37 / (37 * 17 + numerator.hashCode())
456:AOR:+(int,int):%(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode() |==> 37 * (37 * 17 + numerator.hashCode()) % denominator.hashCode()
457:AOR:+(int,int):*(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode() |==> 37 * (37 * 17 + numerator.hashCode()) * denominator.hashCode()
458:AOR:+(int,int):-(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode() |==> 37 * (37 * 17 + numerator.hashCode()) - denominator.hashCode()
459:AOR:+(int,int):/(int,int):org.apache.commons.math3.fraction.BigFraction@hashCode():828:37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode() |==> 37 * (37 * 17 + numerator.hashCode()) / denominator.hashCode()
460:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@multiply(java.math.BigInteger):870:bg == null |==> bg != null
461:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@multiply(java.math.BigInteger):870:bg == null |==> false
462:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@multiply(java.math.BigInteger):870:bg == null |==> true
463:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@multiply(org.apache.commons.math3.fraction.BigFraction):915:fraction == null |==> fraction != null
464:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@multiply(org.apache.commons.math3.fraction.BigFraction):915:fraction == null |==> false
465:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@multiply(org.apache.commons.math3.fraction.BigFraction):915:fraction == null |==> true
466:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@multiply(org.apache.commons.math3.fraction.BigFraction):918:numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO) |==> numerator.equals(BigInteger.ZERO) != fraction.numerator.equals(BigInteger.ZERO)
467:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@multiply(org.apache.commons.math3.fraction.BigFraction):918:numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO) |==> numerator.equals(BigInteger.ZERO) && fraction.numerator.equals(BigInteger.ZERO)
468:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@multiply(org.apache.commons.math3.fraction.BigFraction):918:numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO) |==> numerator.equals(BigInteger.ZERO) == fraction.numerator.equals(BigInteger.ZERO)
469:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@multiply(org.apache.commons.math3.fraction.BigFraction):918:numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO) |==> false
470:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@multiply(org.apache.commons.math3.fraction.BigFraction):918:numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO) |==> numerator.equals(BigInteger.ZERO)
471:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@multiply(org.apache.commons.math3.fraction.BigFraction):919:numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO) |==> fraction.numerator.equals(BigInteger.ZERO)
472:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.BigFraction@multiply(org.apache.commons.math3.fraction.BigFraction):918:numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO) |==> true
473:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@pow(int):962:0 |==> 1
474:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@pow(int):962:0 |==> -1
475:ROR:<(int,int):!=(int,int):org.apache.commons.math3.fraction.BigFraction@pow(int):962:exponent < 0 |==> exponent != 0
476:ROR:<(int,int):<=(int,int):org.apache.commons.math3.fraction.BigFraction@pow(int):962:exponent < 0 |==> exponent <= 0
477:ROR:<(int,int):==(int,int):org.apache.commons.math3.fraction.BigFraction@pow(int):962:exponent < 0 |==> exponent == 0
478:ROR:<(int,int):>(int,int):org.apache.commons.math3.fraction.BigFraction@pow(int):962:exponent < 0 |==> exponent > 0
479:ROR:<(int,int):>=(int,int):org.apache.commons.math3.fraction.BigFraction@pow(int):962:exponent < 0 |==> exponent >= 0
480:ROR:<(int,int):FALSE(int,int):org.apache.commons.math3.fraction.BigFraction@pow(int):962:exponent < 0 |==> false
481:ROR:<(int,int):TRUE(int,int):org.apache.commons.math3.fraction.BigFraction@pow(int):962:exponent < 0 |==> true
482:ORU:-(int):+(int):org.apache.commons.math3.fraction.BigFraction@pow(int):963:-exponent |==> +exponent
483:ORU:-(int):~(int):org.apache.commons.math3.fraction.BigFraction@pow(int):963:-exponent |==> ~exponent
484:ORU:-(int):+(int):org.apache.commons.math3.fraction.BigFraction@pow(int):963:-exponent |==> +exponent
485:ORU:-(int):~(int):org.apache.commons.math3.fraction.BigFraction@pow(int):963:-exponent |==> ~exponent
486:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@pow(long):979:0 |==> 1
487:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@pow(long):979:0 |==> -1
488:ROR:<(long,long):!=(long,long):org.apache.commons.math3.fraction.BigFraction@pow(long):979:exponent < 0 |==> exponent != 0
489:ROR:<(long,long):<=(long,long):org.apache.commons.math3.fraction.BigFraction@pow(long):979:exponent < 0 |==> exponent <= 0
490:ROR:<(long,long):==(long,long):org.apache.commons.math3.fraction.BigFraction@pow(long):979:exponent < 0 |==> exponent == 0
491:ROR:<(long,long):>(long,long):org.apache.commons.math3.fraction.BigFraction@pow(long):979:exponent < 0 |==> exponent > 0
492:ROR:<(long,long):>=(long,long):org.apache.commons.math3.fraction.BigFraction@pow(long):979:exponent < 0 |==> exponent >= 0
493:ROR:<(long,long):FALSE(long,long):org.apache.commons.math3.fraction.BigFraction@pow(long):979:exponent < 0 |==> false
494:ROR:<(long,long):TRUE(long,long):org.apache.commons.math3.fraction.BigFraction@pow(long):979:exponent < 0 |==> true
495:ORU:-(long):+(long):org.apache.commons.math3.fraction.BigFraction@pow(long):980:-exponent |==> +exponent
496:ORU:-(long):~(long):org.apache.commons.math3.fraction.BigFraction@pow(long):980:-exponent |==> ~exponent
497:ORU:-(long):+(long):org.apache.commons.math3.fraction.BigFraction@pow(long):981:-exponent |==> +exponent
498:ORU:-(long):~(long):org.apache.commons.math3.fraction.BigFraction@pow(long):981:-exponent |==> ~exponent
499:LVR:0:POS:org.apache.commons.math3.fraction.BigFraction@pow(java.math.BigInteger):998:0 |==> 1
500:LVR:0:NEG:org.apache.commons.math3.fraction.BigFraction@pow(java.math.BigInteger):998:0 |==> -1
501:ROR:<(int,int):!=(int,int):org.apache.commons.math3.fraction.BigFraction@pow(java.math.BigInteger):998:exponent.compareTo(BigInteger.ZERO) < 0 |==> exponent.compareTo(BigInteger.ZERO) != 0
502:ROR:<(int,int):<=(int,int):org.apache.commons.math3.fraction.BigFraction@pow(java.math.BigInteger):998:exponent.compareTo(BigInteger.ZERO) < 0 |==> exponent.compareTo(BigInteger.ZERO) <= 0
503:ROR:<(int,int):==(int,int):org.apache.commons.math3.fraction.BigFraction@pow(java.math.BigInteger):998:exponent.compareTo(BigInteger.ZERO) < 0 |==> exponent.compareTo(BigInteger.ZERO) == 0
504:ROR:<(int,int):>(int,int):org.apache.commons.math3.fraction.BigFraction@pow(java.math.BigInteger):998:exponent.compareTo(BigInteger.ZERO) < 0 |==> exponent.compareTo(BigInteger.ZERO) > 0
505:ROR:<(int,int):>=(int,int):org.apache.commons.math3.fraction.BigFraction@pow(java.math.BigInteger):998:exponent.compareTo(BigInteger.ZERO) < 0 |==> exponent.compareTo(BigInteger.ZERO) >= 0
506:ROR:<(int,int):FALSE(int,int):org.apache.commons.math3.fraction.BigFraction@pow(java.math.BigInteger):998:exponent.compareTo(BigInteger.ZERO) < 0 |==> false
507:ROR:<(int,int):TRUE(int,int):org.apache.commons.math3.fraction.BigFraction@pow(java.math.BigInteger):998:exponent.compareTo(BigInteger.ZERO) < 0 |==> true
508:AOR:/(double,double):%(double,double):org.apache.commons.math3.fraction.BigFraction@pow(double):1018:FastMath.pow(numerator.doubleValue(), exponent) / FastMath.pow(denominator.doubleValue(), exponent) |==> FastMath.pow(numerator.doubleValue(), exponent) % FastMath.pow(denominator.doubleValue(), exponent)
509:AOR:/(double,double):*(double,double):org.apache.commons.math3.fraction.BigFraction@pow(double):1018:FastMath.pow(numerator.doubleValue(), exponent) / FastMath.pow(denominator.doubleValue(), exponent) |==> FastMath.pow(numerator.doubleValue(), exponent) * FastMath.pow(denominator.doubleValue(), exponent)
510:AOR:/(double,double):+(double,double):org.apache.commons.math3.fraction.BigFraction@pow(double):1018:FastMath.pow(numerator.doubleValue(), exponent) / FastMath.pow(denominator.doubleValue(), exponent) |==> FastMath.pow(numerator.doubleValue(), exponent) + FastMath.pow(denominator.doubleValue(), exponent)
511:AOR:/(double,double):-(double,double):org.apache.commons.math3.fraction.BigFraction@pow(double):1018:FastMath.pow(numerator.doubleValue(), exponent) / FastMath.pow(denominator.doubleValue(), exponent) |==> FastMath.pow(numerator.doubleValue(), exponent) - FastMath.pow(denominator.doubleValue(), exponent)
512:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@subtract(java.math.BigInteger):1057:bg == null |==> bg != null
513:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@subtract(java.math.BigInteger):1057:bg == null |==> false
514:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@subtract(java.math.BigInteger):1057:bg == null |==> true
515:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@subtract(org.apache.commons.math3.fraction.BigFraction):1100:fraction == null |==> fraction != null
516:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@subtract(org.apache.commons.math3.fraction.BigFraction):1100:fraction == null |==> false
517:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.BigFraction@subtract(org.apache.commons.math3.fraction.BigFraction):1100:fraction == null |==> true
518:COR:ZERO.equals(fraction):TRUE:org.apache.commons.math3.fraction.BigFraction@subtract(org.apache.commons.math3.fraction.BigFraction):1103:ZERO.equals(fraction) |==> false
519:COR:ZERO.equals(fraction):FALSE:org.apache.commons.math3.fraction.BigFraction@subtract(org.apache.commons.math3.fraction.BigFraction):1103:ZERO.equals(fraction) |==> true
520:COR:denominator.equals(fraction.denominator):TRUE:org.apache.commons.math3.fraction.BigFraction@subtract(org.apache.commons.math3.fraction.BigFraction):1109:denominator.equals(fraction.denominator) |==> false
521:COR:denominator.equals(fraction.denominator):FALSE:org.apache.commons.math3.fraction.BigFraction@subtract(org.apache.commons.math3.fraction.BigFraction):1109:denominator.equals(fraction.denominator) |==> true
522:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@subtract(org.apache.commons.math3.fraction.BigFraction):1110:num = numerator.subtract(fraction.numerator) |==> <NO-OP>
523:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@subtract(org.apache.commons.math3.fraction.BigFraction):1111:den = denominator |==> <NO-OP>
524:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@subtract(org.apache.commons.math3.fraction.BigFraction):1113:num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator)) |==> <NO-OP>
525:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@subtract(org.apache.commons.math3.fraction.BigFraction):1114:den = denominator.multiply(fraction.denominator) |==> <NO-OP>
526:COR:BigInteger.ONE.equals(denominator):TRUE:org.apache.commons.math3.fraction.BigFraction@toString():1132:BigInteger.ONE.equals(denominator) |==> false
527:COR:BigInteger.ONE.equals(denominator):FALSE:org.apache.commons.math3.fraction.BigFraction@toString():1132:BigInteger.ONE.equals(denominator) |==> true
528:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@toString():1133:str = numerator.toString() |==> <NO-OP>
529:COR:BigInteger.ZERO.equals(numerator):TRUE:org.apache.commons.math3.fraction.BigFraction@toString():1134:BigInteger.ZERO.equals(numerator) |==> false
530:COR:BigInteger.ZERO.equals(numerator):FALSE:org.apache.commons.math3.fraction.BigFraction@toString():1134:BigInteger.ZERO.equals(numerator) |==> true
531:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@toString():1135:str = "0" |==> <NO-OP>
532:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.BigFraction@toString():1137:str = numerator + " / " + denominator |==> <NO-OP>
533:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:42:2 |==> 0
534:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:42:2 |==> -2
535:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:42:1 |==> 0
536:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:42:1 |==> -1
537:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:45:1 |==> 0
538:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:45:1 |==> -1
539:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:45:1 |==> 0
540:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:45:1 |==> -1
541:LVR:0:POS:org.apache.commons.math3.fraction.Fraction:48:0 |==> 1
542:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction:48:0 |==> -1
543:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:48:1 |==> 0
544:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:48:1 |==> -1
545:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:51:4 |==> 0
546:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:51:4 |==> -4
547:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:51:5 |==> 0
548:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:51:5 |==> -5
549:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:54:1 |==> 0
550:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:54:1 |==> -1
551:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:54:5 |==> 0
552:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:54:5 |==> -5
553:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:57:1 |==> 0
554:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:57:1 |==> -1
555:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:57:2 |==> 0
556:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:57:2 |==> -2
557:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:60:1 |==> 0
558:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:60:1 |==> -1
559:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:60:4 |==> 0
560:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:60:4 |==> -4
561:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:63:1 |==> 0
562:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:63:1 |==> -1
563:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:63:3 |==> 0
564:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:63:3 |==> -3
565:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:66:3 |==> 0
566:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:66:3 |==> -3
567:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:66:5 |==> 0
568:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:66:5 |==> -5
569:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:69:3 |==> 0
570:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:69:3 |==> -3
571:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:69:4 |==> 0
572:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:69:4 |==> -4
573:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:72:2 |==> 0
574:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:72:2 |==> -2
575:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:72:5 |==> 0
576:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:72:5 |==> -5
577:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:75:2 |==> 0
578:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:75:2 |==> -2
579:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:75:4 |==> 0
580:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:75:4 |==> -4
581:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:78:2 |==> 0
582:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:78:2 |==> -2
583:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:78:3 |==> 0
584:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:78:3 |==> -3
585:LVR:NEG:0:org.apache.commons.math3.fraction.Fraction:81:-1 |==> 0
586:LVR:NEG:POS:org.apache.commons.math3.fraction.Fraction:81:-1 |==> 1
587:LVR:POS:0:org.apache.commons.math3.fraction.Fraction:81:1 |==> 0
588:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction:81:1 |==> -1
589:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@<init>(double):102:100 |==> 0
590:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@<init>(double):102:100 |==> -100
591:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@<init>(double,int):144:0 |==> 1
592:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@<init>(double,int):144:0 |==> -1
593:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@<init>(double,int):144:100 |==> 0
594:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@<init>(double,int):144:100 |==> -100
595:ROR:>(long,long):!=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):184:FastMath.abs(a0) > overflow |==> FastMath.abs(a0) != overflow
596:ROR:>(long,long):<(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):184:FastMath.abs(a0) > overflow |==> FastMath.abs(a0) < overflow
597:ROR:>(long,long):<=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):184:FastMath.abs(a0) > overflow |==> FastMath.abs(a0) <= overflow
598:ROR:>(long,long):==(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):184:FastMath.abs(a0) > overflow |==> FastMath.abs(a0) == overflow
599:ROR:>(long,long):>=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):184:FastMath.abs(a0) > overflow |==> FastMath.abs(a0) >= overflow
600:ROR:>(long,long):FALSE(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):184:FastMath.abs(a0) > overflow |==> false
601:ROR:>(long,long):TRUE(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):184:FastMath.abs(a0) > overflow |==> true
602:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):185:1L |==> 0L
603:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):185:1L |==> -1L
604:AOR:-(double,double):%(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):189:a0 - value |==> a0 % value
605:AOR:-(double,double):*(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):189:a0 - value |==> a0 * value
606:AOR:-(double,double):+(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):189:a0 - value |==> a0 + value
607:AOR:-(double,double):/(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):189:a0 - value |==> a0 / value
608:ROR:<(double,double):!=(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):189:FastMath.abs(a0 - value) < epsilon |==> FastMath.abs(a0 - value) != epsilon
609:ROR:<(double,double):<=(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):189:FastMath.abs(a0 - value) < epsilon |==> FastMath.abs(a0 - value) <= epsilon
610:ROR:<(double,double):==(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):189:FastMath.abs(a0 - value) < epsilon |==> FastMath.abs(a0 - value) == epsilon
611:ROR:<(double,double):>(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):189:FastMath.abs(a0 - value) < epsilon |==> FastMath.abs(a0 - value) > epsilon
612:ROR:<(double,double):>=(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):189:FastMath.abs(a0 - value) < epsilon |==> FastMath.abs(a0 - value) >= epsilon
613:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):189:FastMath.abs(a0 - value) < epsilon |==> false
614:ROR:<(double,double):TRUE(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):189:FastMath.abs(a0 - value) < epsilon |==> true
615:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):191:1 |==> 0
616:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):191:1 |==> -1
617:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):195:1 |==> 0
618:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):195:1 |==> -1
619:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):196:0 |==> 1
620:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):196:0 |==> -1
621:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):198:1 |==> 0
622:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):198:1 |==> -1
623:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):200:0 |==> 1
624:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):200:0 |==> -1
625:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):201:1 |==> 0
626:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):201:1 |==> -1
627:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):203:0 |==> 1
628:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):203:0 |==> -1
629:LVR:FALSE:TRUE:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):204:false |==> true
630:STD:<INC>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):206:++n |==> <NO-OP>
631:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):207:1.0 |==> 0.0
632:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):207:1.0 |==> -1.0
633:AOR:-(double,double):%(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):207:r0 - a0 |==> r0 % a0
634:AOR:-(double,double):*(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):207:r0 - a0 |==> r0 * a0
635:AOR:-(double,double):+(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):207:r0 - a0 |==> r0 + a0
636:AOR:-(double,double):/(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):207:r0 - a0 |==> r0 / a0
637:AOR:/(double,double):%(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):207:1.0 / (r0 - a0) |==> 1.0 % (r0 - a0)
638:AOR:/(double,double):*(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):207:1.0 / (r0 - a0) |==> 1.0 * (r0 - a0)
639:AOR:/(double,double):+(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):207:1.0 / (r0 - a0) |==> 1.0 + (r0 - a0)
640:AOR:/(double,double):-(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):207:1.0 / (r0 - a0) |==> 1.0 - (r0 - a0)
641:AOR:*(long,long):%(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):209:a1 * p1 |==> a1 % p1
642:AOR:*(long,long):+(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):209:a1 * p1 |==> a1 + p1
643:AOR:*(long,long):-(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):209:a1 * p1 |==> a1 - p1
644:AOR:*(long,long):/(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):209:a1 * p1 |==> a1 / p1
645:AOR:+(long,long):%(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):209:(a1 * p1) + p0 |==> (a1 * p1) % p0
646:AOR:+(long,long):*(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):209:(a1 * p1) + p0 |==> (a1 * p1) * p0
647:AOR:+(long,long):-(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):209:(a1 * p1) + p0 |==> (a1 * p1) - p0
648:AOR:+(long,long):/(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):209:(a1 * p1) + p0 |==> (a1 * p1) / p0
649:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):209:p2 = (a1 * p1) + p0 |==> <NO-OP>
650:AOR:*(long,long):%(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):210:a1 * q1 |==> a1 % q1
651:AOR:*(long,long):+(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):210:a1 * q1 |==> a1 + q1
652:AOR:*(long,long):-(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):210:a1 * q1 |==> a1 - q1
653:AOR:*(long,long):/(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):210:a1 * q1 |==> a1 / q1
654:AOR:+(long,long):%(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):210:(a1 * q1) + q0 |==> (a1 * q1) % q0
655:AOR:+(long,long):*(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):210:(a1 * q1) + q0 |==> (a1 * q1) * q0
656:AOR:+(long,long):-(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):210:(a1 * q1) + q0 |==> (a1 * q1) - q0
657:AOR:+(long,long):/(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):210:(a1 * q1) + q0 |==> (a1 * q1) / q0
658:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):210:q2 = (a1 * q1) + q0 |==> <NO-OP>
659:ROR:>(long,long):!=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:FastMath.abs(p2) > overflow |==> FastMath.abs(p2) != overflow
660:ROR:>(long,long):<(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:FastMath.abs(p2) > overflow |==> FastMath.abs(p2) < overflow
661:ROR:>(long,long):<=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:FastMath.abs(p2) > overflow |==> FastMath.abs(p2) <= overflow
662:ROR:>(long,long):==(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:FastMath.abs(p2) > overflow |==> FastMath.abs(p2) == overflow
663:ROR:>(long,long):>=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:FastMath.abs(p2) > overflow |==> FastMath.abs(p2) >= overflow
664:ROR:>(long,long):FALSE(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:FastMath.abs(p2) > overflow |==> false
665:ROR:>(long,long):TRUE(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:FastMath.abs(p2) > overflow |==> true
666:ROR:>(long,long):!=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:FastMath.abs(q2) > overflow |==> FastMath.abs(q2) != overflow
667:ROR:>(long,long):<(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:FastMath.abs(q2) > overflow |==> FastMath.abs(q2) < overflow
668:ROR:>(long,long):<=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:FastMath.abs(q2) > overflow |==> FastMath.abs(q2) <= overflow
669:ROR:>(long,long):==(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:FastMath.abs(q2) > overflow |==> FastMath.abs(q2) == overflow
670:ROR:>(long,long):>=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:FastMath.abs(q2) > overflow |==> FastMath.abs(q2) >= overflow
671:ROR:>(long,long):FALSE(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:FastMath.abs(q2) > overflow |==> false
672:ROR:>(long,long):TRUE(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:FastMath.abs(q2) > overflow |==> true
673:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:(FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow) |==> (FastMath.abs(p2) > overflow) != (FastMath.abs(q2) > overflow)
674:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:(FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow) |==> (FastMath.abs(p2) > overflow) && (FastMath.abs(q2) > overflow)
675:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:(FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow) |==> (FastMath.abs(p2) > overflow) == (FastMath.abs(q2) > overflow)
676:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:(FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow) |==> false
677:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:(FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow) |==> (FastMath.abs(p2) > overflow)
678:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:(FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow) |==> (FastMath.abs(q2) > overflow)
679:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):212:(FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow) |==> true
680:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:0.0 |==> 1.0
681:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:0.0 |==> -1.0
682:ROR:==(double,double):!=(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:epsilon == 0.0 |==> epsilon != 0.0
683:ROR:==(double,double):<(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:epsilon == 0.0 |==> epsilon < 0.0
684:ROR:==(double,double):<=(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:epsilon == 0.0 |==> epsilon <= 0.0
685:ROR:==(double,double):>(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:epsilon == 0.0 |==> epsilon > 0.0
686:ROR:==(double,double):>=(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:epsilon == 0.0 |==> epsilon >= 0.0
687:ROR:==(double,double):FALSE(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:epsilon == 0.0 |==> false
688:ROR:==(double,double):TRUE(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:epsilon == 0.0 |==> true
689:ROR:<(long,long):!=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:FastMath.abs(q1) < maxDenominator |==> FastMath.abs(q1) != maxDenominator
690:ROR:<(long,long):<=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:FastMath.abs(q1) < maxDenominator |==> FastMath.abs(q1) <= maxDenominator
691:ROR:<(long,long):==(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:FastMath.abs(q1) < maxDenominator |==> FastMath.abs(q1) == maxDenominator
692:ROR:<(long,long):>(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:FastMath.abs(q1) < maxDenominator |==> FastMath.abs(q1) > maxDenominator
693:ROR:<(long,long):>=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:FastMath.abs(q1) < maxDenominator |==> FastMath.abs(q1) >= maxDenominator
694:ROR:<(long,long):FALSE(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:FastMath.abs(q1) < maxDenominator |==> false
695:ROR:<(long,long):TRUE(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:FastMath.abs(q1) < maxDenominator |==> true
696:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:epsilon == 0.0 && FastMath.abs(q1) < maxDenominator |==> epsilon == 0.0 != FastMath.abs(q1) < maxDenominator
697:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:epsilon == 0.0 && FastMath.abs(q1) < maxDenominator |==> epsilon == 0.0 == FastMath.abs(q1) < maxDenominator
698:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:epsilon == 0.0 && FastMath.abs(q1) < maxDenominator |==> false
699:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:epsilon == 0.0 && FastMath.abs(q1) < maxDenominator |==> epsilon == 0.0
700:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:epsilon == 0.0 && FastMath.abs(q1) < maxDenominator |==> FastMath.abs(q1) < maxDenominator
701:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:epsilon == 0.0 && FastMath.abs(q1) < maxDenominator |==> true
702:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):215:epsilon == 0.0 && FastMath.abs(q1) < maxDenominator |==> epsilon == 0.0 || FastMath.abs(q1) < maxDenominator
703:AOR:/(double,double):%(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):221:(double)p2 / (double)q2 |==> (double)p2 % (double)q2
704:AOR:/(double,double):*(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):221:(double)p2 / (double)q2 |==> (double)p2 * (double)q2
705:AOR:/(double,double):+(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):221:(double)p2 / (double)q2 |==> (double)p2 + (double)q2
706:AOR:/(double,double):-(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):221:(double)p2 / (double)q2 |==> (double)p2 - (double)q2
707:ROR:<(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations |==> n != maxIterations
708:ROR:<(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations |==> n <= maxIterations
709:ROR:<(int,int):==(int,int):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations |==> n == maxIterations
710:ROR:<(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations |==> n > maxIterations
711:ROR:<(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations |==> n >= maxIterations
712:ROR:<(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations |==> false
713:ROR:<(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations |==> true
714:AOR:-(double,double):%(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:convergent - value |==> convergent % value
715:AOR:-(double,double):*(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:convergent - value |==> convergent * value
716:AOR:-(double,double):+(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:convergent - value |==> convergent + value
717:AOR:-(double,double):/(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:convergent - value |==> convergent / value
718:ROR:>(double,double):!=(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) != epsilon
719:ROR:>(double,double):<(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) < epsilon
720:ROR:>(double,double):<=(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) <= epsilon
721:ROR:>(double,double):==(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) == epsilon
722:ROR:>(double,double):>=(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) >= epsilon
723:ROR:>(double,double):FALSE(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:FastMath.abs(convergent - value) > epsilon |==> false
724:ROR:>(double,double):TRUE(double,double):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:FastMath.abs(convergent - value) > epsilon |==> true
725:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations && FastMath.abs(convergent - value) > epsilon |==> n < maxIterations != FastMath.abs(convergent - value) > epsilon
726:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations && FastMath.abs(convergent - value) > epsilon |==> n < maxIterations == FastMath.abs(convergent - value) > epsilon
727:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations && FastMath.abs(convergent - value) > epsilon |==> false
728:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations && FastMath.abs(convergent - value) > epsilon |==> n < maxIterations
729:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations && FastMath.abs(convergent - value) > epsilon |==> FastMath.abs(convergent - value) > epsilon
730:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations && FastMath.abs(convergent - value) > epsilon |==> true
731:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations && FastMath.abs(convergent - value) > epsilon |==> n < maxIterations || FastMath.abs(convergent - value) > epsilon
732:ROR:<(long,long):!=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:q2 < maxDenominator |==> q2 != maxDenominator
733:ROR:<(long,long):<=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:q2 < maxDenominator |==> q2 <= maxDenominator
734:ROR:<(long,long):==(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:q2 < maxDenominator |==> q2 == maxDenominator
735:ROR:<(long,long):>(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:q2 < maxDenominator |==> q2 > maxDenominator
736:ROR:<(long,long):>=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:q2 < maxDenominator |==> q2 >= maxDenominator
737:ROR:<(long,long):FALSE(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:q2 < maxDenominator |==> false
738:ROR:<(long,long):TRUE(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:q2 < maxDenominator |==> true
739:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator |==> (n < maxIterations && FastMath.abs(convergent - value) > epsilon) != q2 < maxDenominator
740:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator |==> (n < maxIterations && FastMath.abs(convergent - value) > epsilon) == q2 < maxDenominator
741:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator |==> false
742:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator |==> n < maxIterations && FastMath.abs(convergent - value) > epsilon
743:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator |==> q2 < maxDenominator
744:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator |==> true
745:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):222:n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator |==> n < maxIterations && FastMath.abs(convergent - value) > epsilon || q2 < maxDenominator
746:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):223:p0 = p1 |==> <NO-OP>
747:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):224:p1 = p2 |==> <NO-OP>
748:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):225:q0 = q1 |==> <NO-OP>
749:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):226:q1 = q2 |==> <NO-OP>
750:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):227:a0 = a1 |==> <NO-OP>
751:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):228:r0 = r1 |==> <NO-OP>
752:LVR:TRUE:FALSE:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):230:true |==> false
753:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):230:stop = true |==> <NO-OP>
754:ROR:>=(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):234:n >= maxIterations |==> n != maxIterations
755:ROR:>=(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):234:n >= maxIterations |==> n < maxIterations
756:ROR:>=(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):234:n >= maxIterations |==> n <= maxIterations
757:ROR:>=(int,int):==(int,int):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):234:n >= maxIterations |==> n == maxIterations
758:ROR:>=(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):234:n >= maxIterations |==> n > maxIterations
759:ROR:>=(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):234:n >= maxIterations |==> false
760:ROR:>=(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):234:n >= maxIterations |==> true
761:ROR:<(long,long):!=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):238:q2 < maxDenominator |==> q2 != maxDenominator
762:ROR:<(long,long):<=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):238:q2 < maxDenominator |==> q2 <= maxDenominator
763:ROR:<(long,long):==(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):238:q2 < maxDenominator |==> q2 == maxDenominator
764:ROR:<(long,long):>(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):238:q2 < maxDenominator |==> q2 > maxDenominator
765:ROR:<(long,long):>=(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):238:q2 < maxDenominator |==> q2 >= maxDenominator
766:ROR:<(long,long):FALSE(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):238:q2 < maxDenominator |==> false
767:ROR:<(long,long):TRUE(long,long):org.apache.commons.math3.fraction.Fraction@<init>(double,double,int,int):238:q2 < maxDenominator |==> true
768:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@<init>(int):254:1 |==> 0
769:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@<init>(int):254:1 |==> -1
770:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@<init>(int,int):265:0 |==> 1
771:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@<init>(int,int):265:0 |==> -1
772:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):265:den == 0 |==> den != 0
773:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):265:den == 0 |==> den < 0
774:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):265:den == 0 |==> den <= 0
775:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):265:den == 0 |==> den > 0
776:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):265:den == 0 |==> den >= 0
777:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):265:den == 0 |==> false
778:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):265:den == 0 |==> true
779:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@<init>(int,int):269:0 |==> 1
780:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@<init>(int,int):269:0 |==> -1
781:ROR:<(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):269:den < 0 |==> den != 0
782:ROR:<(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):269:den < 0 |==> den <= 0
783:ROR:<(int,int):==(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):269:den < 0 |==> den == 0
784:ROR:<(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):269:den < 0 |==> den > 0
785:ROR:<(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):269:den < 0 |==> den >= 0
786:ROR:<(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):269:den < 0 |==> false
787:ROR:<(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):269:den < 0 |==> true
788:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):270:num == Integer.MIN_VALUE |==> num != Integer.MIN_VALUE
789:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):270:num == Integer.MIN_VALUE |==> num < Integer.MIN_VALUE
790:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):270:num == Integer.MIN_VALUE |==> num <= Integer.MIN_VALUE
791:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):270:num == Integer.MIN_VALUE |==> num > Integer.MIN_VALUE
792:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):270:num == Integer.MIN_VALUE |==> num >= Integer.MIN_VALUE
793:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):270:num == Integer.MIN_VALUE |==> false
794:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):270:num == Integer.MIN_VALUE |==> true
795:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):271:den == Integer.MIN_VALUE |==> den != Integer.MIN_VALUE
796:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):271:den == Integer.MIN_VALUE |==> den < Integer.MIN_VALUE
797:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):271:den == Integer.MIN_VALUE |==> den <= Integer.MIN_VALUE
798:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):271:den == Integer.MIN_VALUE |==> den > Integer.MIN_VALUE
799:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):271:den == Integer.MIN_VALUE |==> den >= Integer.MIN_VALUE
800:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):271:den == Integer.MIN_VALUE |==> false
801:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):271:den == Integer.MIN_VALUE |==> true
802:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(int,int):270:num == Integer.MIN_VALUE || den == Integer.MIN_VALUE |==> num == Integer.MIN_VALUE != (den == Integer.MIN_VALUE)
803:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(int,int):270:num == Integer.MIN_VALUE || den == Integer.MIN_VALUE |==> num == Integer.MIN_VALUE && den == Integer.MIN_VALUE
804:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(int,int):270:num == Integer.MIN_VALUE || den == Integer.MIN_VALUE |==> num == Integer.MIN_VALUE == (den == Integer.MIN_VALUE)
805:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(int,int):270:num == Integer.MIN_VALUE || den == Integer.MIN_VALUE |==> false
806:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(int,int):270:num == Integer.MIN_VALUE || den == Integer.MIN_VALUE |==> num == Integer.MIN_VALUE
807:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(int,int):271:num == Integer.MIN_VALUE || den == Integer.MIN_VALUE |==> den == Integer.MIN_VALUE
808:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@<init>(int,int):270:num == Integer.MIN_VALUE || den == Integer.MIN_VALUE |==> true
809:ORU:-(int):+(int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):275:-num |==> +num
810:ORU:-(int):~(int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):275:-num |==> ~num
811:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(int,int):275:num = -num |==> <NO-OP>
812:ORU:-(int):+(int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):276:-den |==> +den
813:ORU:-(int):~(int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):276:-den |==> ~den
814:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(int,int):276:den = -den |==> <NO-OP>
815:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@<init>(int,int):280:1 |==> 0
816:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@<init>(int,int):280:1 |==> -1
817:ROR:>(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):280:d > 1 |==> d != 1
818:ROR:>(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):280:d > 1 |==> d < 1
819:ROR:>(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):280:d > 1 |==> d <= 1
820:ROR:>(int,int):==(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):280:d > 1 |==> d == 1
821:ROR:>(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):280:d > 1 |==> d >= 1
822:ROR:>(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):280:d > 1 |==> false
823:ROR:>(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):280:d > 1 |==> true
824:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(int,int):281:num /= d |==> <NO-OP>
825:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(int,int):282:den /= d |==> <NO-OP>
826:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@<init>(int,int):286:0 |==> 1
827:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@<init>(int,int):286:0 |==> -1
828:ROR:<(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):286:den < 0 |==> den != 0
829:ROR:<(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):286:den < 0 |==> den <= 0
830:ROR:<(int,int):==(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):286:den < 0 |==> den == 0
831:ROR:<(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):286:den < 0 |==> den > 0
832:ROR:<(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):286:den < 0 |==> den >= 0
833:ROR:<(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):286:den < 0 |==> false
834:ROR:<(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):286:den < 0 |==> true
835:ORU:-(int):+(int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):287:-num |==> +num
836:ORU:-(int):~(int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):287:-num |==> ~num
837:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(int,int):287:num = -num |==> <NO-OP>
838:ORU:-(int):+(int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):288:-den |==> +den
839:ORU:-(int):~(int):org.apache.commons.math3.fraction.Fraction@<init>(int,int):288:-den |==> ~den
840:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@<init>(int,int):288:den = -den |==> <NO-OP>
841:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@abs():300:0 |==> 1
842:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@abs():300:0 |==> -1
843:ROR:>=(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@abs():300:numerator >= 0 |==> numerator != 0
844:ROR:>=(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@abs():300:numerator >= 0 |==> numerator < 0
845:ROR:>=(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@abs():300:numerator >= 0 |==> numerator <= 0
846:ROR:>=(int,int):==(int,int):org.apache.commons.math3.fraction.Fraction@abs():300:numerator >= 0 |==> numerator == 0
847:ROR:>=(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@abs():300:numerator >= 0 |==> numerator > 0
848:ROR:>=(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@abs():300:numerator >= 0 |==> false
849:ROR:>=(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@abs():300:numerator >= 0 |==> true
850:AOR:*(long,long):%(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):315:((long)numerator) * object.denominator |==> ((long)numerator) % object.denominator
851:AOR:*(long,long):+(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):315:((long)numerator) * object.denominator |==> ((long)numerator) + object.denominator
852:AOR:*(long,long):-(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):315:((long)numerator) * object.denominator |==> ((long)numerator) - object.denominator
853:AOR:*(long,long):/(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):315:((long)numerator) * object.denominator |==> ((long)numerator) / object.denominator
854:AOR:*(long,long):%(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):316:((long)denominator) * object.numerator |==> ((long)denominator) % object.numerator
855:AOR:*(long,long):+(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):316:((long)denominator) * object.numerator |==> ((long)denominator) + object.numerator
856:AOR:*(long,long):-(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):316:((long)denominator) * object.numerator |==> ((long)denominator) - object.numerator
857:AOR:*(long,long):/(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):316:((long)denominator) * object.numerator |==> ((long)denominator) / object.numerator
858:ROR:<(long,long):!=(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:nOd < dOn |==> nOd != dOn
859:ROR:<(long,long):<=(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:nOd < dOn |==> nOd <= dOn
860:ROR:<(long,long):==(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:nOd < dOn |==> nOd == dOn
861:ROR:<(long,long):>(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:nOd < dOn |==> nOd > dOn
862:ROR:<(long,long):>=(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:nOd < dOn |==> nOd >= dOn
863:ROR:<(long,long):FALSE(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:nOd < dOn |==> false
864:ROR:<(long,long):TRUE(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:nOd < dOn |==> true
865:LVR:NEG:0:org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:-1 |==> 0
866:LVR:NEG:POS:org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:-1 |==> 1
867:ROR:>(long,long):!=(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:nOd > dOn |==> nOd != dOn
868:ROR:>(long,long):<(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:nOd > dOn |==> nOd < dOn
869:ROR:>(long,long):<=(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:nOd > dOn |==> nOd <= dOn
870:ROR:>(long,long):==(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:nOd > dOn |==> nOd == dOn
871:ROR:>(long,long):>=(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:nOd > dOn |==> nOd >= dOn
872:ROR:>(long,long):FALSE(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:nOd > dOn |==> false
873:ROR:>(long,long):TRUE(long,long):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:nOd > dOn |==> true
874:ORU:+(int):-(int):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:+1 |==> -1
875:ORU:+(int):~(int):org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:+1 |==> ~1
876:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:1 |==> 0
877:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:1 |==> -1
878:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:0 |==> 1
879:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@compareTo(org.apache.commons.math3.fraction.Fraction):317:0 |==> -1
880:AOR:/(double,double):%(double,double):org.apache.commons.math3.fraction.Fraction@doubleValue():327:(double)numerator / (double)denominator |==> (double)numerator % (double)denominator
881:AOR:/(double,double):*(double,double):org.apache.commons.math3.fraction.Fraction@doubleValue():327:(double)numerator / (double)denominator |==> (double)numerator * (double)denominator
882:AOR:/(double,double):+(double,double):org.apache.commons.math3.fraction.Fraction@doubleValue():327:(double)numerator / (double)denominator |==> (double)numerator + (double)denominator
883:AOR:/(double,double):-(double,double):org.apache.commons.math3.fraction.Fraction@doubleValue():327:(double)numerator / (double)denominator |==> (double)numerator - (double)denominator
884:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):341:this == other |==> this != other
885:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):341:this == other |==> false
886:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):341:this == other |==> true
887:LVR:TRUE:FALSE:org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):342:true |==> false
888:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):348:numerator == rhs.numerator |==> numerator != rhs.numerator
889:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):348:numerator == rhs.numerator |==> numerator < rhs.numerator
890:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):348:numerator == rhs.numerator |==> numerator <= rhs.numerator
891:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):348:numerator == rhs.numerator |==> numerator > rhs.numerator
892:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):348:numerator == rhs.numerator |==> numerator >= rhs.numerator
893:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):348:numerator == rhs.numerator |==> false
894:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):348:numerator == rhs.numerator |==> true
895:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):349:denominator == rhs.denominator |==> denominator != rhs.denominator
896:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):349:denominator == rhs.denominator |==> denominator < rhs.denominator
897:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):349:denominator == rhs.denominator |==> denominator <= rhs.denominator
898:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):349:denominator == rhs.denominator |==> denominator > rhs.denominator
899:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):349:denominator == rhs.denominator |==> denominator >= rhs.denominator
900:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):349:denominator == rhs.denominator |==> false
901:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):349:denominator == rhs.denominator |==> true
902:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):348:(numerator == rhs.numerator) && (denominator == rhs.denominator) |==> (numerator == rhs.numerator) != (denominator == rhs.denominator)
903:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):348:(numerator == rhs.numerator) && (denominator == rhs.denominator) |==> (numerator == rhs.numerator) == (denominator == rhs.denominator)
904:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):348:(numerator == rhs.numerator) && (denominator == rhs.denominator) |==> false
905:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):348:(numerator == rhs.numerator) && (denominator == rhs.denominator) |==> (numerator == rhs.numerator)
906:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):349:(numerator == rhs.numerator) && (denominator == rhs.denominator) |==> (denominator == rhs.denominator)
907:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):348:(numerator == rhs.numerator) && (denominator == rhs.denominator) |==> true
908:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):348:(numerator == rhs.numerator) && (denominator == rhs.denominator) |==> (numerator == rhs.numerator) || (denominator == rhs.denominator)
909:LVR:FALSE:TRUE:org.apache.commons.math3.fraction.Fraction@equals(java.lang.Object):351:false |==> true
910:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@hashCode():386:37 |==> 0
911:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@hashCode():386:37 |==> -37
912:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@hashCode():386:37 |==> 0
913:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@hashCode():386:37 |==> -37
914:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@hashCode():386:17 |==> 0
915:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@hashCode():386:17 |==> -17
916:AOR:*(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * 17 |==> 37 % 17
917:AOR:*(int,int):+(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * 17 |==> 37 + 17
918:AOR:*(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * 17 |==> 37 - 17
919:AOR:*(int,int):/(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * 17 |==> 37 / 17
920:AOR:+(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * 17 + numerator |==> 37 * 17 % numerator
921:AOR:+(int,int):*(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * 17 + numerator |==> 37 * 17 * numerator
922:AOR:+(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * 17 + numerator |==> 37 * 17 - numerator
923:AOR:+(int,int):/(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * 17 + numerator |==> 37 * 17 / numerator
924:AOR:*(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * (37 * 17 + numerator) |==> 37 % (37 * 17 + numerator)
925:AOR:*(int,int):+(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * (37 * 17 + numerator) |==> 37 + (37 * 17 + numerator)
926:AOR:*(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * (37 * 17 + numerator) |==> 37 - (37 * 17 + numerator)
927:AOR:*(int,int):/(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * (37 * 17 + numerator) |==> 37 / (37 * 17 + numerator)
928:AOR:+(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * (37 * 17 + numerator) + denominator |==> 37 * (37 * 17 + numerator) % denominator
929:AOR:+(int,int):*(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * (37 * 17 + numerator) + denominator |==> 37 * (37 * 17 + numerator) * denominator
930:AOR:+(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * (37 * 17 + numerator) + denominator |==> 37 * (37 * 17 + numerator) - denominator
931:AOR:+(int,int):/(int,int):org.apache.commons.math3.fraction.Fraction@hashCode():386:37 * (37 * 17 + numerator) + denominator |==> 37 * (37 * 17 + numerator) / denominator
932:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@negate():414:numerator == Integer.MIN_VALUE |==> numerator != Integer.MIN_VALUE
933:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@negate():414:numerator == Integer.MIN_VALUE |==> numerator < Integer.MIN_VALUE
934:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@negate():414:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
935:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@negate():414:numerator == Integer.MIN_VALUE |==> numerator > Integer.MIN_VALUE
936:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@negate():414:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
937:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@negate():414:numerator == Integer.MIN_VALUE |==> false
938:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@negate():414:numerator == Integer.MIN_VALUE |==> true
939:ORU:-(int):+(int):org.apache.commons.math3.fraction.Fraction@negate():417:-numerator |==> +numerator
940:ORU:-(int):~(int):org.apache.commons.math3.fraction.Fraction@negate():417:-numerator |==> ~numerator
941:LVR:TRUE:FALSE:org.apache.commons.math3.fraction.Fraction@add(org.apache.commons.math3.fraction.Fraction):439:true |==> false
942:AOR:*(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@add(int):448:i * denominator |==> i % denominator
943:AOR:*(int,int):+(int,int):org.apache.commons.math3.fraction.Fraction@add(int):448:i * denominator |==> i + denominator
944:AOR:*(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@add(int):448:i * denominator |==> i - denominator
945:AOR:*(int,int):/(int,int):org.apache.commons.math3.fraction.Fraction@add(int):448:i * denominator |==> i / denominator
946:AOR:+(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@add(int):448:numerator + i * denominator |==> numerator % (i * denominator)
947:AOR:+(int,int):*(int,int):org.apache.commons.math3.fraction.Fraction@add(int):448:numerator + i * denominator |==> numerator * (i * denominator)
948:AOR:+(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@add(int):448:numerator + i * denominator |==> numerator - i * denominator
949:AOR:+(int,int):/(int,int):org.apache.commons.math3.fraction.Fraction@add(int):448:numerator + i * denominator |==> numerator / (i * denominator)
950:LVR:FALSE:TRUE:org.apache.commons.math3.fraction.Fraction@subtract(org.apache.commons.math3.fraction.Fraction):462:false |==> true
951:AOR:*(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@subtract(int):471:i * denominator |==> i % denominator
952:AOR:*(int,int):+(int,int):org.apache.commons.math3.fraction.Fraction@subtract(int):471:i * denominator |==> i + denominator
953:AOR:*(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@subtract(int):471:i * denominator |==> i - denominator
954:AOR:*(int,int):/(int,int):org.apache.commons.math3.fraction.Fraction@subtract(int):471:i * denominator |==> i / denominator
955:AOR:-(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@subtract(int):471:numerator - i * denominator |==> numerator % (i * denominator)
956:AOR:-(int,int):*(int,int):org.apache.commons.math3.fraction.Fraction@subtract(int):471:numerator - i * denominator |==> numerator * (i * denominator)
957:AOR:-(int,int):+(int,int):org.apache.commons.math3.fraction.Fraction@subtract(int):471:numerator - i * denominator |==> numerator + i * denominator
958:AOR:-(int,int):/(int,int):org.apache.commons.math3.fraction.Fraction@subtract(int):471:numerator - i * denominator |==> numerator / (i * denominator)
959:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):485:fraction == null |==> fraction != null
960:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):485:fraction == null |==> false
961:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):485:fraction == null |==> true
962:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):489:0 |==> 1
963:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):489:0 |==> -1
964:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):489:numerator == 0 |==> numerator != 0
965:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):489:numerator == 0 |==> numerator < 0
966:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):489:numerator == 0 |==> numerator <= 0
967:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):489:numerator == 0 |==> numerator > 0
968:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):489:numerator == 0 |==> numerator >= 0
969:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):489:numerator == 0 |==> false
970:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):489:numerator == 0 |==> true
971:COR:isAdd:TRUE:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):490:isAdd |==> false
972:COR:isAdd:FALSE:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):490:isAdd |==> true
973:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):492:0 |==> 1
974:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):492:0 |==> -1
975:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):492:fraction.numerator == 0 |==> fraction.numerator != 0
976:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):492:fraction.numerator == 0 |==> fraction.numerator < 0
977:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):492:fraction.numerator == 0 |==> fraction.numerator <= 0
978:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):492:fraction.numerator == 0 |==> fraction.numerator > 0
979:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):492:fraction.numerator == 0 |==> fraction.numerator >= 0
980:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):492:fraction.numerator == 0 |==> false
981:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):492:fraction.numerator == 0 |==> true
982:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):498:1 |==> 0
983:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):498:1 |==> -1
984:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):498:d1 == 1 |==> d1 != 1
985:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):498:d1 == 1 |==> d1 < 1
986:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):498:d1 == 1 |==> d1 <= 1
987:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):498:d1 == 1 |==> d1 > 1
988:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):498:d1 == 1 |==> d1 >= 1
989:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):498:d1 == 1 |==> false
990:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):498:d1 == 1 |==> true
991:COR:isAdd:TRUE:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):503:isAdd |==> false
992:COR:isAdd:FALSE:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):503:isAdd |==> true
993:AOR:/(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):511:fraction.denominator / d1 |==> fraction.denominator % d1
994:AOR:/(int,int):*(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):511:fraction.denominator / d1 |==> fraction.denominator * d1
995:AOR:/(int,int):+(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):511:fraction.denominator / d1 |==> fraction.denominator + d1
996:AOR:/(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):511:fraction.denominator / d1 |==> fraction.denominator - d1
997:AOR:/(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):513:denominator / d1 |==> denominator % d1
998:AOR:/(int,int):*(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):513:denominator / d1 |==> denominator * d1
999:AOR:/(int,int):+(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):513:denominator / d1 |==> denominator + d1
1000:AOR:/(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):513:denominator / d1 |==> denominator - d1
1001:COR:isAdd:TRUE:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):514:isAdd |==> false
1002:COR:isAdd:FALSE:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):514:isAdd |==> true
1003:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):518:0 |==> 1
1004:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):518:0 |==> -1
1005:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):518:tmodd1 == 0 |==> tmodd1 != 0
1006:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):518:tmodd1 == 0 |==> tmodd1 < 0
1007:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):518:tmodd1 == 0 |==> tmodd1 <= 0
1008:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):518:tmodd1 == 0 |==> tmodd1 > 0
1009:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):518:tmodd1 == 0 |==> tmodd1 >= 0
1010:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):518:tmodd1 == 0 |==> false
1011:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):518:tmodd1 == 0 |==> true
1012:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):522:31 |==> 0
1013:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):522:31 |==> -31
1014:ROR:>(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):522:w.bitLength() > 31 |==> w.bitLength() != 31
1015:ROR:>(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):522:w.bitLength() > 31 |==> w.bitLength() < 31
1016:ROR:>(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):522:w.bitLength() > 31 |==> w.bitLength() <= 31
1017:ROR:>(int,int):==(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):522:w.bitLength() > 31 |==> w.bitLength() == 31
1018:ROR:>(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):522:w.bitLength() > 31 |==> w.bitLength() >= 31
1019:ROR:>(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):522:w.bitLength() > 31 |==> false
1020:ROR:>(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):522:w.bitLength() > 31 |==> true
1021:AOR:/(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):527:denominator / d1 |==> denominator % d1
1022:AOR:/(int,int):*(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):527:denominator / d1 |==> denominator * d1
1023:AOR:/(int,int):+(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):527:denominator / d1 |==> denominator + d1
1024:AOR:/(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):527:denominator / d1 |==> denominator - d1
1025:AOR:/(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):528:fraction.denominator / d2 |==> fraction.denominator % d2
1026:AOR:/(int,int):*(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):528:fraction.denominator / d2 |==> fraction.denominator * d2
1027:AOR:/(int,int):+(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):528:fraction.denominator / d2 |==> fraction.denominator + d2
1028:AOR:/(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@addSub(org.apache.commons.math3.fraction.Fraction,boolean):528:fraction.denominator / d2 |==> fraction.denominator - d2
1029:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):542:fraction == null |==> fraction != null
1030:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):542:fraction == null |==> false
1031:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):542:fraction == null |==> true
1032:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:0 |==> 1
1033:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:0 |==> -1
1034:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:numerator == 0 |==> numerator != 0
1035:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:numerator == 0 |==> numerator < 0
1036:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:numerator == 0 |==> numerator <= 0
1037:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:numerator == 0 |==> numerator > 0
1038:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:numerator == 0 |==> numerator >= 0
1039:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:numerator == 0 |==> false
1040:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:numerator == 0 |==> true
1041:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:0 |==> 1
1042:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:0 |==> -1
1043:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:fraction.numerator == 0 |==> fraction.numerator != 0
1044:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:fraction.numerator == 0 |==> fraction.numerator < 0
1045:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:fraction.numerator == 0 |==> fraction.numerator <= 0
1046:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:fraction.numerator == 0 |==> fraction.numerator > 0
1047:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:fraction.numerator == 0 |==> fraction.numerator >= 0
1048:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:fraction.numerator == 0 |==> false
1049:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:fraction.numerator == 0 |==> true
1050:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:numerator == 0 || fraction.numerator == 0 |==> numerator == 0 != (fraction.numerator == 0)
1051:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:numerator == 0 || fraction.numerator == 0 |==> numerator == 0 && fraction.numerator == 0
1052:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:numerator == 0 || fraction.numerator == 0 |==> numerator == 0 == (fraction.numerator == 0)
1053:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:numerator == 0 || fraction.numerator == 0 |==> false
1054:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:numerator == 0 || fraction.numerator == 0 |==> numerator == 0
1055:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:numerator == 0 || fraction.numerator == 0 |==> fraction.numerator == 0
1056:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):545:numerator == 0 || fraction.numerator == 0 |==> true
1057:AOR:/(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):553:numerator / d1 |==> numerator % d1
1058:AOR:/(int,int):*(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):553:numerator / d1 |==> numerator * d1
1059:AOR:/(int,int):+(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):553:numerator / d1 |==> numerator + d1
1060:AOR:/(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):553:numerator / d1 |==> numerator - d1
1061:AOR:/(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):553:fraction.numerator / d2 |==> fraction.numerator % d2
1062:AOR:/(int,int):*(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):553:fraction.numerator / d2 |==> fraction.numerator * d2
1063:AOR:/(int,int):+(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):553:fraction.numerator / d2 |==> fraction.numerator + d2
1064:AOR:/(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):553:fraction.numerator / d2 |==> fraction.numerator - d2
1065:AOR:/(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):554:denominator / d2 |==> denominator % d2
1066:AOR:/(int,int):*(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):554:denominator / d2 |==> denominator * d2
1067:AOR:/(int,int):+(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):554:denominator / d2 |==> denominator + d2
1068:AOR:/(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):554:denominator / d2 |==> denominator - d2
1069:AOR:/(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):554:fraction.denominator / d1 |==> fraction.denominator % d1
1070:AOR:/(int,int):*(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):554:fraction.denominator / d1 |==> fraction.denominator * d1
1071:AOR:/(int,int):+(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):554:fraction.denominator / d1 |==> fraction.denominator + d1
1072:AOR:/(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@multiply(org.apache.commons.math3.fraction.Fraction):554:fraction.denominator / d1 |==> fraction.denominator - d1
1073:AOR:*(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@multiply(int):563:numerator * i |==> numerator % i
1074:AOR:*(int,int):+(int,int):org.apache.commons.math3.fraction.Fraction@multiply(int):563:numerator * i |==> numerator + i
1075:AOR:*(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@multiply(int):563:numerator * i |==> numerator - i
1076:AOR:*(int,int):/(int,int):org.apache.commons.math3.fraction.Fraction@multiply(int):563:numerator * i |==> numerator / i
1077:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.Fraction@divide(org.apache.commons.math3.fraction.Fraction):577:fraction == null |==> fraction != null
1078:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.Fraction@divide(org.apache.commons.math3.fraction.Fraction):577:fraction == null |==> false
1079:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.fraction.Fraction@divide(org.apache.commons.math3.fraction.Fraction):577:fraction == null |==> true
1080:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@divide(org.apache.commons.math3.fraction.Fraction):580:0 |==> 1
1081:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@divide(org.apache.commons.math3.fraction.Fraction):580:0 |==> -1
1082:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@divide(org.apache.commons.math3.fraction.Fraction):580:fraction.numerator == 0 |==> fraction.numerator != 0
1083:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@divide(org.apache.commons.math3.fraction.Fraction):580:fraction.numerator == 0 |==> fraction.numerator < 0
1084:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@divide(org.apache.commons.math3.fraction.Fraction):580:fraction.numerator == 0 |==> fraction.numerator <= 0
1085:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@divide(org.apache.commons.math3.fraction.Fraction):580:fraction.numerator == 0 |==> fraction.numerator > 0
1086:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@divide(org.apache.commons.math3.fraction.Fraction):580:fraction.numerator == 0 |==> fraction.numerator >= 0
1087:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@divide(org.apache.commons.math3.fraction.Fraction):580:fraction.numerator == 0 |==> false
1088:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@divide(org.apache.commons.math3.fraction.Fraction):580:fraction.numerator == 0 |==> true
1089:AOR:*(int,int):%(int,int):org.apache.commons.math3.fraction.Fraction@divide(int):593:denominator * i |==> denominator % i
1090:AOR:*(int,int):+(int,int):org.apache.commons.math3.fraction.Fraction@divide(int):593:denominator * i |==> denominator + i
1091:AOR:*(int,int):-(int,int):org.apache.commons.math3.fraction.Fraction@divide(int):593:denominator * i |==> denominator - i
1092:AOR:*(int,int):/(int,int):org.apache.commons.math3.fraction.Fraction@divide(int):593:denominator * i |==> denominator / i
1093:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@percentageValue():605:100 |==> 0
1094:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@percentageValue():605:100 |==> -100
1095:AOR:*(double,double):%(double,double):org.apache.commons.math3.fraction.Fraction@percentageValue():605:100 * doubleValue() |==> 100 % doubleValue()
1096:AOR:*(double,double):+(double,double):org.apache.commons.math3.fraction.Fraction@percentageValue():605:100 * doubleValue() |==> 100 + doubleValue()
1097:AOR:*(double,double):-(double,double):org.apache.commons.math3.fraction.Fraction@percentageValue():605:100 * doubleValue() |==> 100 - doubleValue()
1098:AOR:*(double,double):/(double,double):org.apache.commons.math3.fraction.Fraction@percentageValue():605:100 * doubleValue() |==> 100 / doubleValue()
1099:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):620:0 |==> 1
1100:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):620:0 |==> -1
1101:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):620:denominator == 0 |==> denominator != 0
1102:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):620:denominator == 0 |==> denominator < 0
1103:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):620:denominator == 0 |==> denominator <= 0
1104:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):620:denominator == 0 |==> denominator > 0
1105:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):620:denominator == 0 |==> denominator >= 0
1106:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):620:denominator == 0 |==> false
1107:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):620:denominator == 0 |==> true
1108:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):624:0 |==> 1
1109:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):624:0 |==> -1
1110:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):624:numerator == 0 |==> numerator != 0
1111:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):624:numerator == 0 |==> numerator < 0
1112:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):624:numerator == 0 |==> numerator <= 0
1113:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):624:numerator == 0 |==> numerator > 0
1114:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):624:numerator == 0 |==> numerator >= 0
1115:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):624:numerator == 0 |==> false
1116:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):624:numerator == 0 |==> true
1117:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:denominator == Integer.MIN_VALUE |==> denominator != Integer.MIN_VALUE
1118:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:denominator == Integer.MIN_VALUE |==> denominator < Integer.MIN_VALUE
1119:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
1120:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:denominator == Integer.MIN_VALUE |==> denominator > Integer.MIN_VALUE
1121:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
1122:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:denominator == Integer.MIN_VALUE |==> false
1123:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:denominator == Integer.MIN_VALUE |==> true
1124:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:1 |==> 0
1125:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:1 |==> -1
1126:LOR:&(int,int):^(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:numerator & 1 |==> numerator ^ 1
1127:LOR:&(int,int):|(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:numerator & 1 |==> numerator | 1
1128:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:0 |==> 1
1129:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:0 |==> -1
1130:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:(numerator & 1) == 0 |==> (numerator & 1) != 0
1131:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:(numerator & 1) == 0 |==> (numerator & 1) < 0
1132:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:(numerator & 1) == 0 |==> (numerator & 1) <= 0
1133:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:(numerator & 1) == 0 |==> (numerator & 1) > 0
1134:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:(numerator & 1) == 0 |==> (numerator & 1) >= 0
1135:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:(numerator & 1) == 0 |==> false
1136:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:(numerator & 1) == 0 |==> true
1137:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE != ((numerator & 1) == 0)
1138:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE == ((numerator & 1) == 0)
1139:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> false
1140:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE
1141:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> (numerator & 1) == 0
1142:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> true
1143:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):628:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE || (numerator & 1) == 0
1144:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):629:2 |==> 0
1145:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):629:2 |==> -2
1146:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):629:numerator /= 2 |==> <NO-OP>
1147:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):629:2 |==> 0
1148:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):629:2 |==> -2
1149:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):629:denominator /= 2 |==> <NO-OP>
1150:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):631:0 |==> 1
1151:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):631:0 |==> -1
1152:ROR:<(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):631:denominator < 0 |==> denominator != 0
1153:ROR:<(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):631:denominator < 0 |==> denominator <= 0
1154:ROR:<(int,int):==(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):631:denominator < 0 |==> denominator == 0
1155:ROR:<(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):631:denominator < 0 |==> denominator > 0
1156:ROR:<(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):631:denominator < 0 |==> denominator >= 0
1157:ROR:<(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):631:denominator < 0 |==> false
1158:ROR:<(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):631:denominator < 0 |==> true
1159:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):632:numerator == Integer.MIN_VALUE |==> numerator != Integer.MIN_VALUE
1160:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):632:numerator == Integer.MIN_VALUE |==> numerator < Integer.MIN_VALUE
1161:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):632:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
1162:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):632:numerator == Integer.MIN_VALUE |==> numerator > Integer.MIN_VALUE
1163:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):632:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
1164:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):632:numerator == Integer.MIN_VALUE |==> false
1165:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):632:numerator == Integer.MIN_VALUE |==> true
1166:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):633:denominator == Integer.MIN_VALUE |==> denominator != Integer.MIN_VALUE
1167:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):633:denominator == Integer.MIN_VALUE |==> denominator < Integer.MIN_VALUE
1168:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):633:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
1169:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):633:denominator == Integer.MIN_VALUE |==> denominator > Integer.MIN_VALUE
1170:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):633:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
1171:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):633:denominator == Integer.MIN_VALUE |==> false
1172:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):633:denominator == Integer.MIN_VALUE |==> true
1173:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):632:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE != (denominator == Integer.MIN_VALUE)
1174:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):632:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE && denominator == Integer.MIN_VALUE
1175:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):632:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE == (denominator == Integer.MIN_VALUE)
1176:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):632:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> false
1177:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):632:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE
1178:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):633:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> denominator == Integer.MIN_VALUE
1179:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):632:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> true
1180:ORU:-(int):+(int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):637:-numerator |==> +numerator
1181:ORU:-(int):~(int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):637:-numerator |==> ~numerator
1182:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):637:numerator = -numerator |==> <NO-OP>
1183:ORU:-(int):+(int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):638:-denominator |==> +denominator
1184:ORU:-(int):~(int):org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):638:-denominator |==> ~denominator
1185:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):638:denominator = -denominator |==> <NO-OP>
1186:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):642:numerator /= gcd |==> <NO-OP>
1187:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@getReducedFraction(int,int):643:denominator /= gcd |==> <NO-OP>
1188:LVR:POS:0:org.apache.commons.math3.fraction.Fraction@toString():659:1 |==> 0
1189:LVR:POS:NEG:org.apache.commons.math3.fraction.Fraction@toString():659:1 |==> -1
1190:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@toString():659:denominator == 1 |==> denominator != 1
1191:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@toString():659:denominator == 1 |==> denominator < 1
1192:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@toString():659:denominator == 1 |==> denominator <= 1
1193:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@toString():659:denominator == 1 |==> denominator > 1
1194:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@toString():659:denominator == 1 |==> denominator >= 1
1195:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@toString():659:denominator == 1 |==> false
1196:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@toString():659:denominator == 1 |==> true
1197:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@toString():660:str = Integer.toString(numerator) |==> <NO-OP>
1198:LVR:0:POS:org.apache.commons.math3.fraction.Fraction@toString():661:0 |==> 1
1199:LVR:0:NEG:org.apache.commons.math3.fraction.Fraction@toString():661:0 |==> -1
1200:ROR:==(int,int):!=(int,int):org.apache.commons.math3.fraction.Fraction@toString():661:numerator == 0 |==> numerator != 0
1201:ROR:==(int,int):<(int,int):org.apache.commons.math3.fraction.Fraction@toString():661:numerator == 0 |==> numerator < 0
1202:ROR:==(int,int):<=(int,int):org.apache.commons.math3.fraction.Fraction@toString():661:numerator == 0 |==> numerator <= 0
1203:ROR:==(int,int):>(int,int):org.apache.commons.math3.fraction.Fraction@toString():661:numerator == 0 |==> numerator > 0
1204:ROR:==(int,int):>=(int,int):org.apache.commons.math3.fraction.Fraction@toString():661:numerator == 0 |==> numerator >= 0
1205:ROR:==(int,int):FALSE(int,int):org.apache.commons.math3.fraction.Fraction@toString():661:numerator == 0 |==> false
1206:ROR:==(int,int):TRUE(int,int):org.apache.commons.math3.fraction.Fraction@toString():661:numerator == 0 |==> true
1207:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@toString():662:str = "0" |==> <NO-OP>
1208:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math3.fraction.Fraction@toString():664:str = numerator + " / " + denominator |==> <NO-OP>
