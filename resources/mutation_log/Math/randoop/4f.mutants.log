1:STD:<CALL>:<NO-OP>:org.apache.commons.math3.geometry.euclidean.threed.SubLine@getSegments():89:segments.add(new Segment(start, end, line)) |==> <NO-OP>
2:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):114:v1D == null |==> v1D != null
3:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):114:v1D == null |==> false
4:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):114:v1D == null |==> true
5:COR:includeEndPoints:TRUE:org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):124:includeEndPoints |==> false
6:COR:includeEndPoints:FALSE:org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):124:includeEndPoints |==> true
7:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:loc1 != Location.OUTSIDE |==> loc1 == Location.OUTSIDE
8:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:loc1 != Location.OUTSIDE |==> false
9:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:loc1 != Location.OUTSIDE |==> true
10:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:loc2 != Location.OUTSIDE |==> loc2 == Location.OUTSIDE
11:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:loc2 != Location.OUTSIDE |==> false
12:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:loc2 != Location.OUTSIDE |==> true
13:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE) != (loc2 != Location.OUTSIDE)
14:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE) == (loc2 != Location.OUTSIDE)
15:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> false
16:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE)
17:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc2 != Location.OUTSIDE)
18:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> true
19:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE) || (loc2 != Location.OUTSIDE)
20:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:loc1 == Location.INSIDE |==> loc1 != Location.INSIDE
21:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:loc1 == Location.INSIDE |==> false
22:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:loc1 == Location.INSIDE |==> true
23:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:loc2 == Location.INSIDE |==> loc2 != Location.INSIDE
24:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:loc2 == Location.INSIDE |==> false
25:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:loc2 == Location.INSIDE |==> true
26:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE) != (loc2 == Location.INSIDE)
27:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE) == (loc2 == Location.INSIDE)
28:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> false
29:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE)
30:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc2 == Location.INSIDE)
31:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> true
32:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE) || (loc2 == Location.INSIDE)
33:STD:<CALL>:<NO-OP>:org.apache.commons.math3.geometry.euclidean.twod.SubLine@getSegments():89:segments.add(new Segment(start, end, line)) |==> <NO-OP>
34:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):118:v2D == null |==> v2D != null
35:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):118:v2D == null |==> false
36:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):118:v2D == null |==> true
37:COR:includeEndPoints:TRUE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):128:includeEndPoints |==> false
38:COR:includeEndPoints:FALSE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):128:includeEndPoints |==> true
39:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:loc1 != Location.OUTSIDE |==> loc1 == Location.OUTSIDE
40:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:loc1 != Location.OUTSIDE |==> false
41:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:loc1 != Location.OUTSIDE |==> true
42:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:loc2 != Location.OUTSIDE |==> loc2 == Location.OUTSIDE
43:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:loc2 != Location.OUTSIDE |==> false
44:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:loc2 != Location.OUTSIDE |==> true
45:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE) != (loc2 != Location.OUTSIDE)
46:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE) == (loc2 != Location.OUTSIDE)
47:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> false
48:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE)
49:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc2 != Location.OUTSIDE)
50:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> true
51:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE) || (loc2 != Location.OUTSIDE)
52:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:loc1 == Location.INSIDE |==> loc1 != Location.INSIDE
53:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:loc1 == Location.INSIDE |==> false
54:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:loc1 == Location.INSIDE |==> true
55:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:loc2 == Location.INSIDE |==> loc2 != Location.INSIDE
56:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:loc2 == Location.INSIDE |==> false
57:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:loc2 == Location.INSIDE |==> true
58:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE) != (loc2 == Location.INSIDE)
59:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE) == (loc2 == Location.INSIDE)
60:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> false
61:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE)
62:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc2 == Location.INSIDE)
63:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> true
64:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE) || (loc2 == Location.INSIDE)
65:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):162:crossing == null |==> crossing != null
66:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):162:crossing == null |==> false
67:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):162:crossing == null |==> true
68:ORU:-(double):+(double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:-1.0E-10 |==> +1.0E-10
69:LVR:POS:0:org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:1.0E-10 |==> 0.0
70:LVR:POS:NEG:org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:1.0E-10 |==> -1.0E-10
71:ROR:<(double,double):!=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global < -1.0E-10 |==> global != -1.0E-10
72:ROR:<(double,double):<=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global < -1.0E-10 |==> global <= -1.0E-10
73:ROR:<(double,double):==(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global < -1.0E-10 |==> global == -1.0E-10
74:ROR:<(double,double):>(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global < -1.0E-10 |==> global > -1.0E-10
75:ROR:<(double,double):>=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global < -1.0E-10 |==> global >= -1.0E-10
76:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global < -1.0E-10 |==> false
77:ROR:<(double,double):TRUE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global < -1.0E-10 |==> true
78:LVR:POS:0:org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:1.0E-10 |==> 0.0
79:LVR:POS:NEG:org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:1.0E-10 |==> -1.0E-10
80:ROR:>(double,double):!=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global > 1.0E-10 |==> global != 1.0E-10
81:ROR:>(double,double):<(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global > 1.0E-10 |==> global < 1.0E-10
82:ROR:>(double,double):<=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global > 1.0E-10 |==> global <= 1.0E-10
83:ROR:>(double,double):==(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global > 1.0E-10 |==> global == 1.0E-10
84:ROR:>(double,double):>=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global > 1.0E-10 |==> global >= 1.0E-10
85:ROR:>(double,double):FALSE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global > 1.0E-10 |==> false
86:ROR:>(double,double):TRUE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global > 1.0E-10 |==> true
87:AOR:-(double,double):%(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() % otherLine.getAngle()
88:AOR:-(double,double):*(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() * otherLine.getAngle()
89:AOR:-(double,double):+(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() + otherLine.getAngle()
90:AOR:-(double,double):/(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() / otherLine.getAngle()
91:LVR:0:POS:org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:0 |==> 1
92:LVR:0:NEG:org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:0 |==> -1
93:ROR:<(double,double):!=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) != 0
94:ROR:<(double,double):<=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) <= 0
95:ROR:<(double,double):==(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) == 0
96:ROR:<(double,double):>(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) > 0
97:ROR:<(double,double):>=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) >= 0
98:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> false
99:ROR:<(double,double):TRUE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> true
100:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):183:crossing == null |==> crossing != null
101:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):183:crossing == null |==> false
102:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):183:crossing == null |==> true
103:ORU:-(double):+(double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:-1.0E-10 |==> +1.0E-10
104:LVR:POS:0:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:1.0E-10 |==> 0.0
105:LVR:POS:NEG:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:1.0E-10 |==> -1.0E-10
106:ROR:<(double,double):!=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:global < -1.0E-10 |==> global != -1.0E-10
107:ROR:<(double,double):<=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:global < -1.0E-10 |==> global <= -1.0E-10
108:ROR:<(double,double):==(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:global < -1.0E-10 |==> global == -1.0E-10
109:ROR:<(double,double):>(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:global < -1.0E-10 |==> global > -1.0E-10
110:ROR:<(double,double):>=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:global < -1.0E-10 |==> global >= -1.0E-10
111:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:global < -1.0E-10 |==> false
112:ROR:<(double,double):TRUE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:global < -1.0E-10 |==> true
113:AOR:-(double,double):%(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() % otherLine.getAngle()
114:AOR:-(double,double):*(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() * otherLine.getAngle()
115:AOR:-(double,double):+(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() + otherLine.getAngle()
116:AOR:-(double,double):/(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() / otherLine.getAngle()
117:LVR:0:POS:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:0 |==> 1
118:LVR:0:NEG:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:0 |==> -1
119:ROR:<(double,double):!=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) != 0
120:ROR:<(double,double):<=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) <= 0
121:ROR:<(double,double):==(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) == 0
122:ROR:<(double,double):>(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) > 0
123:ROR:<(double,double):>=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) >= 0
124:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> false
125:ROR:<(double,double):TRUE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> true
126:LVR:FALSE:TRUE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):197:false |==> true
127:COR:getRemainingRegion().isEmpty(splitTree.getPlus()):TRUE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):198:getRemainingRegion().isEmpty(splitTree.getPlus()) |==> false
128:COR:getRemainingRegion().isEmpty(splitTree.getPlus()):FALSE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):198:getRemainingRegion().isEmpty(splitTree.getPlus()) |==> true
129:COR:getRemainingRegion().isEmpty(splitTree.getMinus()):TRUE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):202:getRemainingRegion().isEmpty(splitTree.getMinus()) |==> false
130:COR:getRemainingRegion().isEmpty(splitTree.getMinus()):FALSE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):202:getRemainingRegion().isEmpty(splitTree.getMinus()) |==> true
