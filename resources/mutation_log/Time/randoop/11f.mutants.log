1:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):95:0 |==> 1
2:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):95:0 |==> -1
3:ROR:==(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):95:args.length == 0 |==> args.length != 0
4:ROR:==(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):95:args.length == 0 |==> args.length < 0
5:ROR:==(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):95:args.length == 0 |==> args.length <= 0
6:ROR:==(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):95:args.length == 0 |==> args.length > 0
7:ROR:==(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):95:args.length == 0 |==> args.length >= 0
8:ROR:==(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):95:args.length == 0 |==> false
9:ROR:==(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):95:args.length == 0 |==> true
10:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):96:printUsage() |==> <NO-OP>
11:LVR:FALSE:TRUE:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):102:false |==> true
12:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):105:0 |==> 1
13:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):105:0 |==> -1
14:ROR:<(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):105:i < args.length |==> i != args.length
15:ROR:<(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):105:i < args.length |==> i <= args.length
16:ROR:<(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):105:i < args.length |==> i == args.length
17:ROR:<(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):105:i < args.length |==> i > args.length
18:ROR:<(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):105:i < args.length |==> i >= args.length
19:ROR:<(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):105:i < args.length |==> false
20:ROR:<(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):105:i < args.length |==> true
21:COR:"-src".equals(args[i]):TRUE:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):107:"-src".equals(args[i]) |==> false
22:COR:"-src".equals(args[i]):FALSE:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):107:"-src".equals(args[i]) |==> true
23:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):108:inputDir = new File(args[++i]) |==> <NO-OP>
24:COR:"-dst".equals(args[i]):TRUE:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):109:"-dst".equals(args[i]) |==> false
25:COR:"-dst".equals(args[i]):FALSE:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):109:"-dst".equals(args[i]) |==> true
26:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):110:outputDir = new File(args[++i]) |==> <NO-OP>
27:COR:"-verbose".equals(args[i]):TRUE:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):111:"-verbose".equals(args[i]) |==> false
28:COR:"-verbose".equals(args[i]):FALSE:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):111:"-verbose".equals(args[i]) |==> true
29:LVR:TRUE:FALSE:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):112:true |==> false
30:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):112:verbose = true |==> <NO-OP>
31:COR:"-?".equals(args[i]):TRUE:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):113:"-?".equals(args[i]) |==> false
32:COR:"-?".equals(args[i]):FALSE:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):113:"-?".equals(args[i]) |==> true
33:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):114:printUsage() |==> <NO-OP>
34:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):120:printUsage() |==> <NO-OP>
35:ROR:>=(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):125:i >= args.length |==> i != args.length
36:ROR:>=(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):125:i >= args.length |==> i < args.length
37:ROR:>=(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):125:i >= args.length |==> i <= args.length
38:ROR:>=(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):125:i >= args.length |==> i == args.length
39:ROR:>=(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):125:i >= args.length |==> i > args.length
40:ROR:>=(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):125:i >= args.length |==> false
41:ROR:>=(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):125:i >= args.length |==> true
42:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):126:printUsage() |==> <NO-OP>
43:AOR:-(int,int):%(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):130:args.length - i |==> args.length % i
44:AOR:-(int,int):*(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):130:args.length - i |==> args.length * i
45:AOR:-(int,int):+(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):130:args.length - i |==> args.length + i
46:AOR:-(int,int):/(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):130:args.length - i |==> args.length / i
47:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):131:0 |==> 1
48:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):131:0 |==> -1
49:ROR:<(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):131:i < args.length |==> i != args.length
50:ROR:<(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):131:i < args.length |==> i <= args.length
51:ROR:<(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):131:i < args.length |==> i == args.length
52:ROR:<(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):131:i < args.length |==> i > args.length
53:ROR:<(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):131:i < args.length |==> i >= args.length
54:ROR:<(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):131:i < args.length |==> false
55:ROR:<(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):131:i < args.length |==> true
56:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):132:inputDir == null |==> inputDir != null
57:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):132:inputDir == null |==> false
58:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):132:inputDir == null |==> true
59:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):132:sources[j] = inputDir == null ? new File(args[i]) : new File(inputDir, args[i]) |==> <NO-OP>
60:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):135:cVerbose.set(verbose) |==> <NO-OP>
61:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@main(java.lang.String[]):137:zic.compile(outputDir, sources) |==> <NO-OP>
62:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@printUsage():141:System.out.println("Usage: java org.joda.time.tz.ZoneInfoCompiler <options> <source files>") |==> <NO-OP>
63:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@printUsage():142:System.out.println("where possible options include:") |==> <NO-OP>
64:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@printUsage():143:System.out.println("  -src <directory>    Specify where to read source files") |==> <NO-OP>
65:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@printUsage():144:System.out.println("  -dst <directory>    Specify where to write generated files") |==> <NO-OP>
66:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@printUsage():145:System.out.println("  -verbose            Output verbosely (default false)") |==> <NO-OP>
67:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@getStartOfYear():149:cStartOfYear == null |==> cStartOfYear != null
68:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@getStartOfYear():149:cStartOfYear == null |==> false
69:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@getStartOfYear():149:cStartOfYear == null |==> true
70:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@getStartOfYear():150:cStartOfYear = new DateTimeOfYear() |==> <NO-OP>
71:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@getLenientISOChronology():156:cLenientISO == null |==> cLenientISO != null
72:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@getLenientISOChronology():156:cLenientISO == null |==> false
73:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@getLenientISOChronology():156:cLenientISO == null |==> true
74:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@getLenientISOChronology():157:cLenientISO = LenientChronology.getInstance(ISOChronology.getInstanceUTC()) |==> <NO-OP>
75:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):170:0 |==> 1
76:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):170:0 |==> -1
77:COR:idToIndex.containsKey(id):TRUE:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):173:idToIndex.containsKey(id) |==> false
78:COR:idToIndex.containsKey(id):FALSE:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):173:idToIndex.containsKey(id) |==> true
79:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):175:idToIndex.put(id, index) |==> <NO-OP>
80:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):176:indexToId.put(index, id) |==> <NO-OP>
81:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):177:0 |==> 1
82:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):177:0 |==> -1
83:ROR:==(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):177:++count == 0 |==> ++count != 0
84:ROR:==(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):177:++count == 0 |==> ++count < 0
85:ROR:==(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):177:++count == 0 |==> ++count <= 0
86:ROR:==(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):177:++count == 0 |==> ++count > 0
87:ROR:==(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):177:++count == 0 |==> ++count >= 0
88:ROR:==(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):177:++count == 0 |==> false
89:ROR:==(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):177:++count == 0 |==> true
90:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):181:id = ((DateTimeZone)entry.getValue()).getID() |==> <NO-OP>
91:COR:idToIndex.containsKey(id):TRUE:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):182:idToIndex.containsKey(id) |==> false
92:COR:idToIndex.containsKey(id):FALSE:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):182:idToIndex.containsKey(id) |==> true
93:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):184:idToIndex.put(id, index) |==> <NO-OP>
94:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):185:indexToId.put(index, id) |==> <NO-OP>
95:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):186:0 |==> 1
96:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):186:0 |==> -1
97:ROR:==(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):186:++count == 0 |==> ++count != 0
98:ROR:==(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):186:++count == 0 |==> ++count < 0
99:ROR:==(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):186:++count == 0 |==> ++count <= 0
100:ROR:==(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):186:++count == 0 |==> ++count > 0
101:ROR:==(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):186:++count == 0 |==> ++count >= 0
102:ROR:==(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):186:++count == 0 |==> false
103:ROR:==(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):186:++count == 0 |==> true
104:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):193:dout.writeShort(indexToId.size()) |==> <NO-OP>
105:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):195:dout.writeUTF(id) |==> <NO-OP>
106:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):199:dout.writeShort(zimap.size()) |==> <NO-OP>
107:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):202:dout.writeShort(idToIndex.get(id).shortValue()) |==> <NO-OP>
108:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):203:id = entry.getValue().getID() |==> <NO-OP>
109:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@writeZoneInfoMap(java.io.DataOutputStream,java.util.Map<java.lang.String,org.joda.time.DateTimeZone>):204:dout.writeShort(idToIndex.get(id).shortValue()) |==> <NO-OP>
110:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):209:str = str.toLowerCase() |==> <NO-OP>
111:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):210:str.equals("minimum") || str.equals("min") |==> str.equals("minimum") != str.equals("min")
112:COR:||(boolean,boolean):&&(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):210:str.equals("minimum") || str.equals("min") |==> str.equals("minimum") && str.equals("min")
113:COR:||(boolean,boolean):==(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):210:str.equals("minimum") || str.equals("min") |==> str.equals("minimum") == str.equals("min")
114:COR:||(boolean,boolean):FALSE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):210:str.equals("minimum") || str.equals("min") |==> false
115:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):210:str.equals("minimum") || str.equals("min") |==> str.equals("minimum")
116:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):210:str.equals("minimum") || str.equals("min") |==> str.equals("min")
117:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):210:str.equals("minimum") || str.equals("min") |==> true
118:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):212:str.equals("maximum") || str.equals("max") |==> str.equals("maximum") != str.equals("max")
119:COR:||(boolean,boolean):&&(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):212:str.equals("maximum") || str.equals("max") |==> str.equals("maximum") && str.equals("max")
120:COR:||(boolean,boolean):==(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):212:str.equals("maximum") || str.equals("max") |==> str.equals("maximum") == str.equals("max")
121:COR:||(boolean,boolean):FALSE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):212:str.equals("maximum") || str.equals("max") |==> false
122:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):212:str.equals("maximum") || str.equals("max") |==> str.equals("maximum")
123:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):212:str.equals("maximum") || str.equals("max") |==> str.equals("max")
124:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):212:str.equals("maximum") || str.equals("max") |==> true
125:COR:str.equals("only"):TRUE:org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):214:str.equals("only") |==> false
126:COR:str.equals("only"):FALSE:org.joda.time.tz.ZoneInfoCompiler@parseYear(java.lang.String,int):214:str.equals("only") |==> true
127:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@parseMonth(java.lang.String):222:0 |==> 1
128:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@parseMonth(java.lang.String):222:0 |==> -1
129:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@parseDayOfWeek(java.lang.String):227:0 |==> 1
130:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@parseDayOfWeek(java.lang.String):227:0 |==> -1
131:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):236:0 |==> 1
132:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):236:0 |==> -1
133:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):237:0 |==> 1
134:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):237:0 |==> -1
135:COR:str.startsWith("-"):TRUE:org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):238:str.startsWith("-") |==> false
136:COR:str.startsWith("-"):FALSE:org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):238:str.startsWith("-") |==> true
137:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):239:1 |==> 0
138:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):239:1 |==> -1
139:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):239:pos = 1 |==> <NO-OP>
140:ORU:~(int):+(int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):242:~pos |==> +pos
141:ORU:~(int):-(int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):242:~pos |==> -pos
142:ROR:==(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):242:newPos == ~pos |==> newPos != ~pos
143:ROR:==(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):242:newPos == ~pos |==> newPos < ~pos
144:ROR:==(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):242:newPos == ~pos |==> newPos <= ~pos
145:ROR:==(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):242:newPos == ~pos |==> newPos > ~pos
146:ROR:==(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):242:newPos == ~pos |==> newPos >= ~pos
147:ROR:==(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):242:newPos == ~pos |==> false
148:ROR:==(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):242:newPos == ~pos |==> true
149:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):246:1 |==> 0
150:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):246:1 |==> -1
151:ROR:==(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):246:pos == 1 |==> pos != 1
152:ROR:==(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):246:pos == 1 |==> pos < 1
153:ROR:==(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):246:pos == 1 |==> pos <= 1
154:ROR:==(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):246:pos == 1 |==> pos > 1
155:ROR:==(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):246:pos == 1 |==> pos >= 1
156:ROR:==(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):246:pos == 1 |==> false
157:ROR:==(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):246:pos == 1 |==> true
158:ORU:-(int):+(int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):247:-millis |==> +millis
159:ORU:-(int):~(int):org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):247:-millis |==> ~millis
160:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@parseTime(java.lang.String):247:millis = -millis |==> <NO-OP>
161:COR:id.equals(tz.getID()):TRUE:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):270:id.equals(tz.getID()) |==> false
162:COR:id.equals(tz.getID()):FALSE:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):270:id.equals(tz.getID()) |==> true
163:LVR:TRUE:FALSE:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):271:true |==> false
164:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):276:0 |==> 1
165:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):276:0 |==> -1
166:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):276:1850 |==> 0
167:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):276:1850 |==> -1850
168:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):277:0 |==> 1
169:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):277:0 |==> -1
170:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):277:2050 |==> 0
171:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):277:2050 |==> -2050
172:ROR:==(long,long):!=(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next == millis |==> next != millis
173:ROR:==(long,long):<(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next == millis |==> next < millis
174:ROR:==(long,long):<=(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next == millis |==> next <= millis
175:ROR:==(long,long):>(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next == millis |==> next > millis
176:ROR:==(long,long):>=(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next == millis |==> next >= millis
177:ROR:==(long,long):FALSE(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next == millis |==> false
178:ROR:==(long,long):TRUE(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next == millis |==> true
179:ROR:>(long,long):!=(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next > end |==> next != end
180:ROR:>(long,long):<(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next > end |==> next < end
181:ROR:>(long,long):<=(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next > end |==> next <= end
182:ROR:>(long,long):==(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next > end |==> next == end
183:ROR:>(long,long):>=(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next > end |==> next >= end
184:ROR:>(long,long):FALSE(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next > end |==> false
185:ROR:>(long,long):TRUE(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next > end |==> true
186:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next == millis || next > end |==> next == millis != next > end
187:COR:||(boolean,boolean):&&(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next == millis || next > end |==> next == millis && next > end
188:COR:||(boolean,boolean):==(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next == millis || next > end |==> next == millis == next > end
189:COR:||(boolean,boolean):FALSE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next == millis || next > end |==> false
190:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next == millis || next > end |==> next == millis
191:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next == millis || next > end |==> next > end
192:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):286:next == millis || next > end |==> true
193:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):290:millis = next |==> <NO-OP>
194:ROR:==(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):295:offset == nextOffset |==> offset != nextOffset
195:ROR:==(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):295:offset == nextOffset |==> offset < nextOffset
196:ROR:==(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):295:offset == nextOffset |==> offset <= nextOffset
197:ROR:==(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):295:offset == nextOffset |==> offset > nextOffset
198:ROR:==(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):295:offset == nextOffset |==> offset >= nextOffset
199:ROR:==(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):295:offset == nextOffset |==> false
200:ROR:==(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):295:offset == nextOffset |==> true
201:COR:&&(boolean,boolean):!=(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):295:offset == nextOffset && key.equals(nextKey) |==> offset == nextOffset != key.equals(nextKey)
202:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):295:offset == nextOffset && key.equals(nextKey) |==> offset == nextOffset == key.equals(nextKey)
203:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):296:offset == nextOffset && key.equals(nextKey) |==> false
204:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):295:offset == nextOffset && key.equals(nextKey) |==> offset == nextOffset
205:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):296:offset == nextOffset && key.equals(nextKey) |==> key.equals(nextKey)
206:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):296:offset == nextOffset && key.equals(nextKey) |==> true
207:COR:&&(boolean,boolean):||(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):295:offset == nextOffset && key.equals(nextKey) |==> offset == nextOffset || key.equals(nextKey)
208:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):297:System.out.println("*d* Error in " + tz.getID() + " " + new DateTime(millis, ISOChronology.getInstanceUTC())) |==> <NO-OP>
209:LVR:FALSE:TRUE:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):300:false |==> true
210:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey == null |==> nextKey != null
211:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey == null |==> false
212:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey == null |==> true
213:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:3 |==> 0
214:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:3 |==> -3
215:ROR:<(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey.length() < 3 |==> nextKey.length() != 3
216:ROR:<(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey.length() < 3 |==> nextKey.length() <= 3
217:ROR:<(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey.length() < 3 |==> nextKey.length() == 3
218:ROR:<(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey.length() < 3 |==> nextKey.length() > 3
219:ROR:<(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey.length() < 3 |==> nextKey.length() >= 3
220:ROR:<(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey.length() < 3 |==> false
221:ROR:<(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey.length() < 3 |==> true
222:COR:&&(boolean,boolean):!=(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey.length() < 3 && !"??".equals(nextKey) |==> nextKey.length() < 3 != !"??".equals(nextKey)
223:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey.length() < 3 && !"??".equals(nextKey) |==> nextKey.length() < 3 == !"??".equals(nextKey)
224:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey.length() < 3 && !"??".equals(nextKey) |==> false
225:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey.length() < 3 && !"??".equals(nextKey) |==> nextKey.length() < 3
226:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey.length() < 3 && !"??".equals(nextKey) |==> !"??".equals(nextKey)
227:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey.length() < 3 && !"??".equals(nextKey) |==> true
228:COR:&&(boolean,boolean):||(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey.length() < 3 && !"??".equals(nextKey) |==> nextKey.length() < 3 || !"??".equals(nextKey)
229:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey == null || (nextKey.length() < 3 && !"??".equals(nextKey)) |==> nextKey == null != (nextKey.length() < 3 && !"??".equals(nextKey))
230:COR:||(boolean,boolean):&&(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey == null || (nextKey.length() < 3 && !"??".equals(nextKey)) |==> nextKey == null && (nextKey.length() < 3 && !"??".equals(nextKey))
231:COR:||(boolean,boolean):==(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey == null || (nextKey.length() < 3 && !"??".equals(nextKey)) |==> nextKey == null == (nextKey.length() < 3 && !"??".equals(nextKey))
232:COR:||(boolean,boolean):FALSE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey == null || (nextKey.length() < 3 && !"??".equals(nextKey)) |==> false
233:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey == null || (nextKey.length() < 3 && !"??".equals(nextKey)) |==> nextKey == null
234:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey == null || (nextKey.length() < 3 && !"??".equals(nextKey)) |==> (nextKey.length() < 3 && !"??".equals(nextKey))
235:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):303:nextKey == null || (nextKey.length() < 3 && !"??".equals(nextKey)) |==> true
236:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):304:System.out.println("*s* Error in " + tz.getID() + " " + new DateTime(millis, ISOChronology.getInstanceUTC()) + ", nameKey=" + nextKey) |==> <NO-OP>
237:LVR:FALSE:TRUE:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):308:false |==> true
238:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):311:transitions.add(Long.valueOf(millis)) |==> <NO-OP>
239:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):313:offset = nextOffset |==> <NO-OP>
240:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):314:key = nextKey |==> <NO-OP>
241:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):319:0 |==> 1
242:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):319:0 |==> -1
243:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):319:2050 |==> 0
244:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):319:2050 |==> -2050
245:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):319:millis = ISOChronology.getInstanceUTC().year().set(0, 2050) |==> <NO-OP>
246:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):320:0 |==> 1
247:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):320:0 |==> -1
248:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):320:1850 |==> 0
249:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):320:1850 |==> -1850
250:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):320:end = ISOChronology.getInstanceUTC().year().set(0, 1850) |==> <NO-OP>
251:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):322:0 |==> 1
252:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):322:0 |==> -1
253:ROR:>=(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):322:--i >= 0 |==> --i != 0
254:ROR:>=(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):322:--i >= 0 |==> --i < 0
255:ROR:>=(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):322:--i >= 0 |==> --i <= 0
256:ROR:>=(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):322:--i >= 0 |==> --i == 0
257:ROR:>=(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):322:--i >= 0 |==> --i > 0
258:ROR:>=(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):322:--i >= 0 |==> false
259:ROR:>=(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):322:--i >= 0 |==> true
260:ROR:==(long,long):!=(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev == millis |==> prev != millis
261:ROR:==(long,long):<(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev == millis |==> prev < millis
262:ROR:==(long,long):<=(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev == millis |==> prev <= millis
263:ROR:==(long,long):>(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev == millis |==> prev > millis
264:ROR:==(long,long):>=(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev == millis |==> prev >= millis
265:ROR:==(long,long):FALSE(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev == millis |==> false
266:ROR:==(long,long):TRUE(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev == millis |==> true
267:ROR:<(long,long):!=(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev < end |==> prev != end
268:ROR:<(long,long):<=(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev < end |==> prev <= end
269:ROR:<(long,long):==(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev < end |==> prev == end
270:ROR:<(long,long):>(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev < end |==> prev > end
271:ROR:<(long,long):>=(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev < end |==> prev >= end
272:ROR:<(long,long):FALSE(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev < end |==> false
273:ROR:<(long,long):TRUE(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev < end |==> true
274:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev == millis || prev < end |==> prev == millis != prev < end
275:COR:||(boolean,boolean):&&(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev == millis || prev < end |==> prev == millis && prev < end
276:COR:||(boolean,boolean):==(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev == millis || prev < end |==> prev == millis == prev < end
277:COR:||(boolean,boolean):FALSE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev == millis || prev < end |==> false
278:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev == millis || prev < end |==> prev == millis
279:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev == millis || prev < end |==> prev < end
280:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):324:prev == millis || prev < end |==> true
281:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):328:millis = prev |==> <NO-OP>
282:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):332:1 |==> 0
283:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):332:1 |==> -1
284:AOR:-(long,long):%(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):332:trans - 1 |==> trans % 1
285:AOR:-(long,long):*(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):332:trans - 1 |==> trans * 1
286:AOR:-(long,long):+(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):332:trans - 1 |==> trans + 1
287:AOR:-(long,long):/(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):332:trans - 1 |==> trans / 1
288:ROR:!=(long,long):<(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):332:trans - 1 != millis |==> trans - 1 < millis
289:ROR:!=(long,long):<=(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):332:trans - 1 != millis |==> trans - 1 <= millis
290:ROR:!=(long,long):==(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):332:trans - 1 != millis |==> trans - 1 == millis
291:ROR:!=(long,long):>(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):332:trans - 1 != millis |==> trans - 1 > millis
292:ROR:!=(long,long):>=(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):332:trans - 1 != millis |==> trans - 1 >= millis
293:ROR:!=(long,long):FALSE(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):332:trans - 1 != millis |==> false
294:ROR:!=(long,long):TRUE(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):332:trans - 1 != millis |==> true
295:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):336:1 |==> 0
296:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):336:1 |==> -1
297:AOR:-(long,long):%(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):336:trans - 1 |==> trans % 1
298:AOR:-(long,long):*(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):336:trans - 1 |==> trans * 1
299:AOR:-(long,long):+(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):336:trans - 1 |==> trans + 1
300:AOR:-(long,long):/(long,long):org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):336:trans - 1 |==> trans / 1
301:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):333:System.out.println("*r* Error in " + tz.getID() + " " + new DateTime(millis, ISOChronology.getInstanceUTC()) + " != " + new DateTime(trans - 1, ISOChronology.getInstanceUTC())) |==> <NO-OP>
302:LVR:FALSE:TRUE:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):339:false |==> true
303:LVR:TRUE:FALSE:org.joda.time.tz.ZoneInfoCompiler@test(java.lang.String,org.joda.time.DateTimeZone):343:true |==> false
304:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@<init>():356:iRuleSets = new HashMap<String, RuleSet>() |==> <NO-OP>
305:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@<init>():357:iZones = new ArrayList<Zone>() |==> <NO-OP>
306:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@<init>():358:iLinks = new ArrayList<String>() |==> <NO-OP>
307:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):368:sources != null |==> sources == null
308:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):368:sources != null |==> false
309:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):368:sources != null |==> true
310:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):369:0 |==> 1
311:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):369:0 |==> -1
312:ROR:<(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):369:i < sources.length |==> i != sources.length
313:ROR:<(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):369:i < sources.length |==> i <= sources.length
314:ROR:<(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):369:i < sources.length |==> i == sources.length
315:ROR:<(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):369:i < sources.length |==> i > sources.length
316:ROR:<(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):369:i < sources.length |==> i >= sources.length
317:ROR:<(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):369:i < sources.length |==> false
318:ROR:<(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):369:i < sources.length |==> true
319:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):371:parseDataFile(in) |==> <NO-OP>
320:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):372:in.close() |==> <NO-OP>
321:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):376:outputDir != null |==> outputDir == null
322:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):376:outputDir != null |==> false
323:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):376:outputDir != null |==> true
324:COR:outputDir.exists():TRUE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):377:outputDir.exists() |==> false
325:COR:outputDir.exists():FALSE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):377:outputDir.exists() |==> true
326:COR:outputDir.mkdirs():TRUE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):378:outputDir.mkdirs() |==> false
327:COR:outputDir.mkdirs():FALSE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):378:outputDir.mkdirs() |==> true
328:COR:outputDir.isDirectory():TRUE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):382:outputDir.isDirectory() |==> false
329:COR:outputDir.isDirectory():FALSE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):382:outputDir.isDirectory() |==> true
330:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):389:System.out.println("Writing zoneinfo files") |==> <NO-OP>
331:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):390:0 |==> 1
332:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):390:0 |==> -1
333:ROR:<(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):390:i < iZones.size() |==> i != iZones.size()
334:ROR:<(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):390:i < iZones.size() |==> i <= iZones.size()
335:ROR:<(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):390:i < iZones.size() |==> i == iZones.size()
336:ROR:<(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):390:i < iZones.size() |==> i > iZones.size()
337:ROR:<(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):390:i < iZones.size() |==> i >= iZones.size()
338:ROR:<(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):390:i < iZones.size() |==> false
339:ROR:<(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):390:i < iZones.size() |==> true
340:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):393:zone.addToBuilder(builder, iRuleSets) |==> <NO-OP>
341:LVR:TRUE:FALSE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):394:true |==> false
342:COR:test(tz.getID(), tz):TRUE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):396:test(tz.getID(), tz) |==> false
343:COR:test(tz.getID(), tz):FALSE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):396:test(tz.getID(), tz) |==> true
344:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):397:map.put(tz.getID(), tz) |==> <NO-OP>
345:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):398:outputDir != null |==> outputDir == null
346:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):398:outputDir != null |==> false
347:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):398:outputDir != null |==> true
348:COR:ZoneInfoCompiler.verbose():TRUE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):399:ZoneInfoCompiler.verbose() |==> false
349:COR:ZoneInfoCompiler.verbose():FALSE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):399:ZoneInfoCompiler.verbose() |==> true
350:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):400:System.out.println("Writing " + tz.getID()) |==> <NO-OP>
351:COR:file.getParentFile().exists():TRUE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):403:file.getParentFile().exists() |==> false
352:COR:file.getParentFile().exists():FALSE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):403:file.getParentFile().exists() |==> true
353:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):404:file.getParentFile().mkdirs() |==> <NO-OP>
354:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):408:builder.writeTo(zone.iName, out) |==> <NO-OP>
355:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):410:out.close() |==> <NO-OP>
356:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):416:in.close() |==> <NO-OP>
357:COR:original.equals(tz2):TRUE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):418:original.equals(tz2) |==> false
358:COR:original.equals(tz2):FALSE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):418:original.equals(tz2) |==> true
359:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):419:System.out.println("*e* Error in " + tz.getID() + ": Didn\'t read properly from file") |==> <NO-OP>
360:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):426:0 |==> 1
361:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):426:0 |==> -1
362:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):426:2 |==> 0
363:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):426:2 |==> -2
364:ROR:<(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):426:pass < 2 |==> pass != 2
365:ROR:<(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):426:pass < 2 |==> pass <= 2
366:ROR:<(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):426:pass < 2 |==> pass == 2
367:ROR:<(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):426:pass < 2 |==> pass > 2
368:ROR:<(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):426:pass < 2 |==> pass >= 2
369:ROR:<(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):426:pass < 2 |==> false
370:ROR:<(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):426:pass < 2 |==> true
371:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):427:0 |==> 1
372:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):427:0 |==> -1
373:ROR:<(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):427:i < iLinks.size() |==> i != iLinks.size()
374:ROR:<(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):427:i < iLinks.size() |==> i <= iLinks.size()
375:ROR:<(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):427:i < iLinks.size() |==> i == iLinks.size()
376:ROR:<(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):427:i < iLinks.size() |==> i > iLinks.size()
377:ROR:<(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):427:i < iLinks.size() |==> i >= iLinks.size()
378:ROR:<(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):427:i < iLinks.size() |==> false
379:ROR:<(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):427:i < iLinks.size() |==> true
380:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):427:2 |==> 0
381:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):427:2 |==> -2
382:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):429:1 |==> 0
383:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):429:1 |==> -1
384:AOR:+(int,int):%(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):429:i + 1 |==> i % 1
385:AOR:+(int,int):*(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):429:i + 1 |==> i * 1
386:AOR:+(int,int):-(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):429:i + 1 |==> i - 1
387:AOR:+(int,int):/(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):429:i + 1 |==> i / 1
388:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):431:tz == null |==> tz != null
389:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):431:tz == null |==> false
390:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):431:tz == null |==> true
391:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):432:0 |==> 1
392:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):432:0 |==> -1
393:ROR:>(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):432:pass > 0 |==> pass != 0
394:ROR:>(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):432:pass > 0 |==> pass < 0
395:ROR:>(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):432:pass > 0 |==> pass <= 0
396:ROR:>(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):432:pass > 0 |==> pass == 0
397:ROR:>(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):432:pass > 0 |==> pass >= 0
398:ROR:>(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):432:pass > 0 |==> false
399:ROR:>(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):432:pass > 0 |==> true
400:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):433:System.out.println("Cannot find time zone \'" + id + "\' to link alias \'" + alias + "\' to") |==> <NO-OP>
401:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):437:map.put(alias, tz) |==> <NO-OP>
402:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):442:outputDir != null |==> outputDir == null
403:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):442:outputDir != null |==> false
404:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):442:outputDir != null |==> true
405:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):443:System.out.println("Writing ZoneInfoMap") |==> <NO-OP>
406:COR:file.getParentFile().exists():TRUE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):445:file.getParentFile().exists() |==> false
407:COR:file.getParentFile().exists():FALSE:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):445:file.getParentFile().exists() |==> true
408:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):446:file.getParentFile().mkdirs() |==> <NO-OP>
409:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):454:zimap.putAll(map) |==> <NO-OP>
410:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):455:writeZoneInfoMap(dout, zimap) |==> <NO-OP>
411:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@compile(java.io.File,java.io.File[]):457:dout.close() |==> <NO-OP>
412:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):467:(line = in.readLine()) != null |==> (line = in.readLine()) == null
413:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:0 |==> 1
414:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:0 |==> -1
415:ROR:==(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.length() == 0 |==> trimmed.length() != 0
416:ROR:==(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.length() == 0 |==> trimmed.length() < 0
417:ROR:==(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.length() == 0 |==> trimmed.length() <= 0
418:ROR:==(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.length() == 0 |==> trimmed.length() > 0
419:ROR:==(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.length() == 0 |==> trimmed.length() >= 0
420:ROR:==(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.length() == 0 |==> false
421:ROR:==(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.length() == 0 |==> true
422:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:0 |==> 1
423:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:0 |==> -1
424:ROR:==(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.charAt(0) == '#' |==> trimmed.charAt(0) != '#'
425:ROR:==(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.charAt(0) == '#' |==> trimmed.charAt(0) < '#'
426:ROR:==(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.charAt(0) == '#' |==> trimmed.charAt(0) <= '#'
427:ROR:==(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.charAt(0) == '#' |==> trimmed.charAt(0) > '#'
428:ROR:==(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.charAt(0) == '#' |==> trimmed.charAt(0) >= '#'
429:ROR:==(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.charAt(0) == '#' |==> false
430:ROR:==(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.charAt(0) == '#' |==> true
431:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.length() == 0 || trimmed.charAt(0) == '#' |==> trimmed.length() == 0 != (trimmed.charAt(0) == '#')
432:COR:||(boolean,boolean):&&(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.length() == 0 || trimmed.charAt(0) == '#' |==> trimmed.length() == 0 && trimmed.charAt(0) == '#'
433:COR:||(boolean,boolean):==(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.length() == 0 || trimmed.charAt(0) == '#' |==> trimmed.length() == 0 == (trimmed.charAt(0) == '#')
434:COR:||(boolean,boolean):FALSE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.length() == 0 || trimmed.charAt(0) == '#' |==> false
435:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.length() == 0 || trimmed.charAt(0) == '#' |==> trimmed.length() == 0
436:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.length() == 0 || trimmed.charAt(0) == '#' |==> trimmed.charAt(0) == '#'
437:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):469:trimmed.length() == 0 || trimmed.charAt(0) == '#' |==> true
438:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):474:0 |==> 1
439:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):474:0 |==> -1
440:ROR:>=(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):474:index >= 0 |==> index != 0
441:ROR:>=(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):474:index >= 0 |==> index < 0
442:ROR:>=(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):474:index >= 0 |==> index <= 0
443:ROR:>=(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):474:index >= 0 |==> index == 0
444:ROR:>=(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):474:index >= 0 |==> index > 0
445:ROR:>=(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):474:index >= 0 |==> false
446:ROR:>=(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):474:index >= 0 |==> true
447:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):475:0 |==> 1
448:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):475:0 |==> -1
449:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):475:line = line.substring(0, index) |==> <NO-OP>
450:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):482:0 |==> 1
451:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):482:0 |==> -1
452:COR:&&(boolean,boolean):!=(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):482:Character.isWhitespace(line.charAt(0)) && st.hasMoreTokens() |==> Character.isWhitespace(line.charAt(0)) != st.hasMoreTokens()
453:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):482:Character.isWhitespace(line.charAt(0)) && st.hasMoreTokens() |==> Character.isWhitespace(line.charAt(0)) == st.hasMoreTokens()
454:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):482:Character.isWhitespace(line.charAt(0)) && st.hasMoreTokens() |==> false
455:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):482:Character.isWhitespace(line.charAt(0)) && st.hasMoreTokens() |==> Character.isWhitespace(line.charAt(0))
456:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):482:Character.isWhitespace(line.charAt(0)) && st.hasMoreTokens() |==> st.hasMoreTokens()
457:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):482:Character.isWhitespace(line.charAt(0)) && st.hasMoreTokens() |==> true
458:COR:&&(boolean,boolean):||(boolean,boolean):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):482:Character.isWhitespace(line.charAt(0)) && st.hasMoreTokens() |==> Character.isWhitespace(line.charAt(0)) || st.hasMoreTokens()
459:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):483:zone != null |==> zone == null
460:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):483:zone != null |==> false
461:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):483:zone != null |==> true
462:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):485:zone.chain(st) |==> <NO-OP>
463:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):489:zone != null |==> zone == null
464:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):489:zone != null |==> false
465:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):489:zone != null |==> true
466:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):490:iZones.add(zone) |==> <NO-OP>
467:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):492:zone = null |==> <NO-OP>
468:COR:st.hasMoreTokens():TRUE:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):495:st.hasMoreTokens() |==> false
469:COR:st.hasMoreTokens():FALSE:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):495:st.hasMoreTokens() |==> true
470:COR:token.equalsIgnoreCase("Rule"):TRUE:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):497:token.equalsIgnoreCase("Rule") |==> false
471:COR:token.equalsIgnoreCase("Rule"):FALSE:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):497:token.equalsIgnoreCase("Rule") |==> true
472:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):500:rs == null |==> rs != null
473:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):500:rs == null |==> false
474:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):500:rs == null |==> true
475:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):501:rs = new RuleSet(r) |==> <NO-OP>
476:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):502:iRuleSets.put(r.iName, rs) |==> <NO-OP>
477:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):504:rs.addRule(r) |==> <NO-OP>
478:COR:token.equalsIgnoreCase("Zone"):TRUE:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):506:token.equalsIgnoreCase("Zone") |==> false
479:COR:token.equalsIgnoreCase("Zone"):FALSE:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):506:token.equalsIgnoreCase("Zone") |==> true
480:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):507:zone = new Zone(st) |==> <NO-OP>
481:COR:token.equalsIgnoreCase("Link"):TRUE:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):508:token.equalsIgnoreCase("Link") |==> false
482:COR:token.equalsIgnoreCase("Link"):FALSE:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):508:token.equalsIgnoreCase("Link") |==> true
483:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):509:iLinks.add(st.nextToken()) |==> <NO-OP>
484:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):510:iLinks.add(st.nextToken()) |==> <NO-OP>
485:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):512:System.out.println("Unknown line: " + line) |==> <NO-OP>
486:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):517:zone != null |==> zone == null
487:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):517:zone != null |==> false
488:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):517:zone != null |==> true
489:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler@parseDataFile(java.io.BufferedReader):518:iZones.add(zone) |==> <NO-OP>
490:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>():531:1 |==> 0
491:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>():531:1 |==> -1
492:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>():532:1 |==> 0
493:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>():532:1 |==> -1
494:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>():533:0 |==> 1
495:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>():533:0 |==> -1
496:LVR:FALSE:TRUE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>():534:false |==> true
497:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>():535:0 |==> 1
498:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>():535:0 |==> -1
499:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):540:1 |==> 0
500:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):540:1 |==> -1
501:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):541:1 |==> 0
502:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):541:1 |==> -1
503:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):542:0 |==> 1
504:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):542:0 |==> -1
505:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):543:0 |==> 1
506:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):543:0 |==> -1
507:LVR:FALSE:TRUE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):544:false |==> true
508:COR:st.hasMoreTokens():TRUE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):547:st.hasMoreTokens() |==> false
509:COR:st.hasMoreTokens():FALSE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):547:st.hasMoreTokens() |==> true
510:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):548:month = parseMonth(st.nextToken()) |==> <NO-OP>
511:COR:st.hasMoreTokens():TRUE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):550:st.hasMoreTokens() |==> false
512:COR:st.hasMoreTokens():FALSE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):550:st.hasMoreTokens() |==> true
513:COR:str.startsWith("last"):TRUE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):552:str.startsWith("last") |==> false
514:COR:str.startsWith("last"):FALSE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):552:str.startsWith("last") |==> true
515:LVR:NEG:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):553:-1 |==> 0
516:LVR:NEG:POS:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):553:-1 |==> 1
517:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):553:day = -1 |==> <NO-OP>
518:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):554:4 |==> 0
519:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):554:4 |==> -4
520:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):554:dayOfWeek = parseDayOfWeek(str.substring(4)) |==> <NO-OP>
521:LVR:FALSE:TRUE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):555:false |==> true
522:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):555:advance = false |==> <NO-OP>
523:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):558:day = Integer.parseInt(str) |==> <NO-OP>
524:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):559:0 |==> 1
525:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):559:0 |==> -1
526:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):559:dayOfWeek = 0 |==> <NO-OP>
527:LVR:FALSE:TRUE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):560:false |==> true
528:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):560:advance = false |==> <NO-OP>
529:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):563:0 |==> 1
530:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):563:0 |==> -1
531:ROR:>(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):563:index > 0 |==> index != 0
532:ROR:>(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):563:index > 0 |==> index < 0
533:ROR:>(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):563:index > 0 |==> index <= 0
534:ROR:>(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):563:index > 0 |==> index == 0
535:ROR:>(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):563:index > 0 |==> index >= 0
536:ROR:>(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):563:index > 0 |==> false
537:ROR:>(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):563:index > 0 |==> true
538:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):564:2 |==> 0
539:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):564:2 |==> -2
540:AOR:+(int,int):%(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):564:index + 2 |==> index % 2
541:AOR:+(int,int):*(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):564:index + 2 |==> index * 2
542:AOR:+(int,int):-(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):564:index + 2 |==> index - 2
543:AOR:+(int,int):/(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):564:index + 2 |==> index / 2
544:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):564:day = Integer.parseInt(str.substring(index + 2)) |==> <NO-OP>
545:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):565:0 |==> 1
546:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):565:0 |==> -1
547:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):565:dayOfWeek = parseDayOfWeek(str.substring(0, index)) |==> <NO-OP>
548:LVR:TRUE:FALSE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):566:true |==> false
549:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):566:advance = true |==> <NO-OP>
550:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):568:index = str.indexOf("<=") |==> <NO-OP>
551:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):569:0 |==> 1
552:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):569:0 |==> -1
553:ROR:>(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):569:index > 0 |==> index != 0
554:ROR:>(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):569:index > 0 |==> index < 0
555:ROR:>(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):569:index > 0 |==> index <= 0
556:ROR:>(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):569:index > 0 |==> index == 0
557:ROR:>(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):569:index > 0 |==> index >= 0
558:ROR:>(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):569:index > 0 |==> false
559:ROR:>(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):569:index > 0 |==> true
560:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):570:2 |==> 0
561:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):570:2 |==> -2
562:AOR:+(int,int):%(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):570:index + 2 |==> index % 2
563:AOR:+(int,int):*(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):570:index + 2 |==> index * 2
564:AOR:+(int,int):-(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):570:index + 2 |==> index - 2
565:AOR:+(int,int):/(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):570:index + 2 |==> index / 2
566:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):570:day = Integer.parseInt(str.substring(index + 2)) |==> <NO-OP>
567:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):571:0 |==> 1
568:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):571:0 |==> -1
569:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):571:dayOfWeek = parseDayOfWeek(str.substring(0, index)) |==> <NO-OP>
570:LVR:FALSE:TRUE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):572:false |==> true
571:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):572:advance = false |==> <NO-OP>
572:COR:st.hasMoreTokens():TRUE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):580:st.hasMoreTokens() |==> false
573:COR:st.hasMoreTokens():FALSE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):580:st.hasMoreTokens() |==> true
574:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):581:str = st.nextToken() |==> <NO-OP>
575:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):582:1 |==> 0
576:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):582:1 |==> -1
577:AOR:-(int,int):%(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):582:str.length() - 1 |==> str.length() % 1
578:AOR:-(int,int):*(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):582:str.length() - 1 |==> str.length() * 1
579:AOR:-(int,int):+(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):582:str.length() - 1 |==> str.length() + 1
580:AOR:-(int,int):/(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):582:str.length() - 1 |==> str.length() / 1
581:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):582:zoneChar = parseZoneChar(str.charAt(str.length() - 1)) |==> <NO-OP>
582:COR:str.equals("24:00"):TRUE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):583:str.equals("24:00") |==> false
583:COR:str.equals("24:00"):FALSE:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):583:str.equals("24:00") |==> true
584:LVR:NEG:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):584:-1 |==> 0
585:LVR:NEG:POS:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):584:-1 |==> 1
586:ROR:==(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):584:day == -1 |==> day != -1
587:ROR:==(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):584:day == -1 |==> day < -1
588:ROR:==(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):584:day == -1 |==> day <= -1
589:ROR:==(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):584:day == -1 |==> day > -1
590:ROR:==(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):584:day == -1 |==> day >= -1
591:ROR:==(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):584:day == -1 |==> false
592:ROR:==(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):584:day == -1 |==> true
593:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):585:2001 |==> 0
594:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):585:2001 |==> -2001
595:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):585:1 |==> 0
596:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):585:1 |==> -1
597:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):585:1 |==> 0
598:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):585:1 |==> -1
599:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):586:2001 |==> 0
600:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):586:2001 |==> -2001
601:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):586:1 |==> 0
602:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):586:1 |==> -1
603:LVR:NEG:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):587:-1 |==> 0
604:LVR:NEG:POS:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):587:-1 |==> 1
605:ROR:!=(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):587:day != -1 |==> day < -1
606:ROR:!=(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):587:day != -1 |==> day <= -1
607:ROR:!=(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):587:day != -1 |==> day == -1
608:ROR:!=(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):587:day != -1 |==> day > -1
609:ROR:!=(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):587:day != -1 |==> day >= -1
610:ROR:!=(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):587:day != -1 |==> false
611:ROR:!=(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):587:day != -1 |==> true
612:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):587:advance = (day != -1) |==> <NO-OP>
613:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):588:month = date.getMonthOfYear() |==> <NO-OP>
614:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):589:day = date.getDayOfMonth() |==> <NO-OP>
615:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:1 |==> 0
616:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:1 |==> -1
617:AOR:-(int,int):%(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:dayOfWeek - 1 |==> dayOfWeek % 1
618:AOR:-(int,int):*(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:dayOfWeek - 1 |==> dayOfWeek * 1
619:AOR:-(int,int):+(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:dayOfWeek - 1 |==> dayOfWeek + 1
620:AOR:-(int,int):/(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:dayOfWeek - 1 |==> dayOfWeek / 1
621:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:1 |==> 0
622:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:1 |==> -1
623:AOR:+(int,int):%(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:dayOfWeek - 1 + 1 |==> (dayOfWeek - 1) % 1
624:AOR:+(int,int):*(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:dayOfWeek - 1 + 1 |==> (dayOfWeek - 1) * 1
625:AOR:+(int,int):-(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:dayOfWeek - 1 + 1 |==> dayOfWeek - 1 - 1
626:AOR:+(int,int):/(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:dayOfWeek - 1 + 1 |==> (dayOfWeek - 1) / 1
627:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:7 |==> 0
628:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:7 |==> -7
629:AOR:%(int,int):*(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:(dayOfWeek - 1 + 1) % 7 |==> (dayOfWeek - 1 + 1) * 7
630:AOR:%(int,int):+(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:(dayOfWeek - 1 + 1) % 7 |==> (dayOfWeek - 1 + 1) + 7
631:AOR:%(int,int):-(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:(dayOfWeek - 1 + 1) % 7 |==> (dayOfWeek - 1 + 1) - 7
632:AOR:%(int,int):/(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:(dayOfWeek - 1 + 1) % 7 |==> (dayOfWeek - 1 + 1) / 7
633:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:1 |==> 0
634:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:1 |==> -1
635:AOR:+(int,int):%(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:((dayOfWeek - 1 + 1) % 7) + 1 |==> ((dayOfWeek - 1 + 1) % 7) % 1
636:AOR:+(int,int):*(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:((dayOfWeek - 1 + 1) % 7) + 1 |==> ((dayOfWeek - 1 + 1) % 7) * 1
637:AOR:+(int,int):-(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:((dayOfWeek - 1 + 1) % 7) + 1 |==> ((dayOfWeek - 1 + 1) % 7) - 1
638:AOR:+(int,int):/(int,int):org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:((dayOfWeek - 1 + 1) % 7) + 1 |==> ((dayOfWeek - 1 + 1) % 7) / 1
639:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):590:dayOfWeek = ((dayOfWeek - 1 + 1) % 7) + 1 |==> <NO-OP>
640:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@<init>(java.util.StringTokenizer):592:millis = parseTime(str) |==> <NO-OP>
641:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int):612:builder.addRecurringSavings(nameKey, saveMillis, fromYear, toYear, iZoneChar, iMonthOfYear, iDayOfMonth, iDayOfWeek, iAdvanceDayOfWeek, iMillisOfDay) |==> <NO-OP>
642:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear@addCutover(org.joda.time.tz.DateTimeZoneBuilder,int):626:builder.addCutover(year, iZoneChar, iMonthOfYear, iDayOfMonth, iDayOfWeek, iAdvanceDayOfWeek, iMillisOfDay) |==> <NO-OP>
643:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$Rule@<init>(java.util.StringTokenizer):657:0 |==> 1
644:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$Rule@<init>(java.util.StringTokenizer):657:0 |==> -1
645:ROR:<(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@<init>(java.util.StringTokenizer):659:iToYear < iFromYear |==> iToYear != iFromYear
646:ROR:<(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@<init>(java.util.StringTokenizer):659:iToYear < iFromYear |==> iToYear <= iFromYear
647:ROR:<(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@<init>(java.util.StringTokenizer):659:iToYear < iFromYear |==> iToYear == iFromYear
648:ROR:<(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@<init>(java.util.StringTokenizer):659:iToYear < iFromYear |==> iToYear > iFromYear
649:ROR:<(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@<init>(java.util.StringTokenizer):659:iToYear < iFromYear |==> iToYear >= iFromYear
650:ROR:<(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@<init>(java.util.StringTokenizer):659:iToYear < iFromYear |==> false
651:ROR:<(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@<init>(java.util.StringTokenizer):659:iToYear < iFromYear |==> true
652:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$Rule@addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String):673:iDateTimeOfYear.addRecurring(builder, nameKey, iSaveMillis, iFromYear, iToYear) |==> <NO-OP>
653:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):679:0 |==> 1
654:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):679:0 |==> -1
655:ROR:>(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):679:index > 0 |==> index != 0
656:ROR:>(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):679:index > 0 |==> index < 0
657:ROR:>(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):679:index > 0 |==> index <= 0
658:ROR:>(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):679:index > 0 |==> index == 0
659:ROR:>(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):679:index > 0 |==> index >= 0
660:ROR:>(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):679:index > 0 |==> false
661:ROR:>(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):679:index > 0 |==> true
662:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):680:0 |==> 1
663:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):680:0 |==> -1
664:ROR:==(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):680:iSaveMillis == 0 |==> iSaveMillis != 0
665:ROR:==(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):680:iSaveMillis == 0 |==> iSaveMillis < 0
666:ROR:==(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):680:iSaveMillis == 0 |==> iSaveMillis <= 0
667:ROR:==(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):680:iSaveMillis == 0 |==> iSaveMillis > 0
668:ROR:==(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):680:iSaveMillis == 0 |==> iSaveMillis >= 0
669:ROR:==(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):680:iSaveMillis == 0 |==> false
670:ROR:==(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):680:iSaveMillis == 0 |==> true
671:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):682:0 |==> 1
672:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):682:0 |==> -1
673:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):684:1 |==> 0
674:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):684:1 |==> -1
675:AOR:+(int,int):%(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):684:index + 1 |==> index % 1
676:AOR:+(int,int):*(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):684:index + 1 |==> index * 1
677:AOR:+(int,int):-(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):684:index + 1 |==> index - 1
678:AOR:+(int,int):/(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):684:index + 1 |==> index / 1
679:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):687:index = nameFormat.indexOf("%s") |==> <NO-OP>
680:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):688:0 |==> 1
681:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):688:0 |==> -1
682:ROR:<(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):688:index < 0 |==> index != 0
683:ROR:<(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):688:index < 0 |==> index <= 0
684:ROR:<(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):688:index < 0 |==> index == 0
685:ROR:<(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):688:index < 0 |==> index > 0
686:ROR:<(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):688:index < 0 |==> index >= 0
687:ROR:<(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):688:index < 0 |==> false
688:ROR:<(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):688:index < 0 |==> true
689:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):691:0 |==> 1
690:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):691:0 |==> -1
691:LVR:POS:0:org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):692:2 |==> 0
692:LVR:POS:NEG:org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):692:2 |==> -2
693:AOR:+(int,int):%(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):692:index + 2 |==> index % 2
694:AOR:+(int,int):*(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):692:index + 2 |==> index * 2
695:AOR:+(int,int):-(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):692:index + 2 |==> index - 2
696:AOR:+(int,int):/(int,int):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):692:index + 2 |==> index / 2
697:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):694:iLetterS == null |==> iLetterS != null
698:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):694:iLetterS == null |==> false
699:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Rule@formatName(java.lang.String):694:iLetterS == null |==> true
700:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$RuleSet@<init>(org.joda.time.tz.ZoneInfoCompiler.Rule):719:iRules = new ArrayList<Rule>() |==> <NO-OP>
701:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$RuleSet@<init>(org.joda.time.tz.ZoneInfoCompiler.Rule):720:iRules.add(rule) |==> <NO-OP>
702:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$RuleSet@addRule(org.joda.time.tz.ZoneInfoCompiler.Rule):724:0 |==> 1
703:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$RuleSet@addRule(org.joda.time.tz.ZoneInfoCompiler.Rule):724:0 |==> -1
704:COR:rule.iName.equals(iRules.get(0).iName):TRUE:org.joda.time.tz.ZoneInfoCompiler$RuleSet@addRule(org.joda.time.tz.ZoneInfoCompiler.Rule):724:rule.iName.equals(iRules.get(0).iName) |==> false
705:COR:rule.iName.equals(iRules.get(0).iName):FALSE:org.joda.time.tz.ZoneInfoCompiler$RuleSet@addRule(org.joda.time.tz.ZoneInfoCompiler.Rule):724:rule.iName.equals(iRules.get(0).iName) |==> true
706:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$RuleSet@addRule(org.joda.time.tz.ZoneInfoCompiler.Rule):727:iRules.add(rule) |==> <NO-OP>
707:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$RuleSet@addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String):734:0 |==> 1
708:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$RuleSet@addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String):734:0 |==> -1
709:ROR:<(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler$RuleSet@addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String):734:i < iRules.size() |==> i != iRules.size()
710:ROR:<(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler$RuleSet@addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String):734:i < iRules.size() |==> i <= iRules.size()
711:ROR:<(int,int):==(int,int):org.joda.time.tz.ZoneInfoCompiler$RuleSet@addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String):734:i < iRules.size() |==> i == iRules.size()
712:ROR:<(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler$RuleSet@addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String):734:i < iRules.size() |==> i > iRules.size()
713:ROR:<(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler$RuleSet@addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String):734:i < iRules.size() |==> i >= iRules.size()
714:ROR:<(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler$RuleSet@addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String):734:i < iRules.size() |==> false
715:ROR:<(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler$RuleSet@addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String):734:i < iRules.size() |==> true
716:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$RuleSet@addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String):736:rule.addRecurring(builder, nameFormat) |==> <NO-OP>
717:COR:st.hasMoreTokens():TRUE:org.joda.time.tz.ZoneInfoCompiler$Zone@<init>(java.lang.String,java.util.StringTokenizer):764:st.hasMoreTokens() |==> false
718:COR:st.hasMoreTokens():FALSE:org.joda.time.tz.ZoneInfoCompiler$Zone@<init>(java.lang.String,java.util.StringTokenizer):764:st.hasMoreTokens() |==> true
719:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$Zone@<init>(java.lang.String,java.util.StringTokenizer):765:year = Integer.parseInt(st.nextToken()) |==> <NO-OP>
720:COR:st.hasMoreTokens():TRUE:org.joda.time.tz.ZoneInfoCompiler$Zone@<init>(java.lang.String,java.util.StringTokenizer):766:st.hasMoreTokens() |==> false
721:COR:st.hasMoreTokens():FALSE:org.joda.time.tz.ZoneInfoCompiler$Zone@<init>(java.lang.String,java.util.StringTokenizer):766:st.hasMoreTokens() |==> true
722:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$Zone@<init>(java.lang.String,java.util.StringTokenizer):767:dtOfYear = new DateTimeOfYear(st) |==> <NO-OP>
723:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Zone@chain(java.util.StringTokenizer):776:iNext != null |==> iNext == null
724:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Zone@chain(java.util.StringTokenizer):776:iNext != null |==> false
725:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Zone@chain(java.util.StringTokenizer):776:iNext != null |==> true
726:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$Zone@chain(java.util.StringTokenizer):777:iNext.chain(st) |==> <NO-OP>
727:STD:<ASSIGN>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$Zone@chain(java.util.StringTokenizer):779:iNext = new Zone(iName, st) |==> <NO-OP>
728:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):795:addToBuilder(this, builder, ruleSets) |==> <NO-OP>
729:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):802:zone != null |==> zone == null
730:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):802:zone != null |==> false
731:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):802:zone != null |==> true
732:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):803:builder.setStandardOffset(zone.iOffsetMillis) |==> <NO-OP>
733:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):805:zone.iRules == null |==> zone.iRules != null
734:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):805:zone.iRules == null |==> false
735:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):805:zone.iRules == null |==> true
736:LVR:0:POS:org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):806:0 |==> 1
737:LVR:0:NEG:org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):806:0 |==> -1
738:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):806:builder.setFixedSavings(zone.iFormat, 0) |==> <NO-OP>
739:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):811:builder.setFixedSavings(zone.iFormat, saveMillis) |==> <NO-OP>
740:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):815:rs == null |==> rs != null
741:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):815:rs == null |==> false
742:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):815:rs == null |==> true
743:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):819:rs.addRecurring(builder, zone.iFormat) |==> <NO-OP>
744:ROR:==(int,int):!=(int,int):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):823:zone.iUntilYear == Integer.MAX_VALUE |==> zone.iUntilYear != Integer.MAX_VALUE
745:ROR:==(int,int):<(int,int):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):823:zone.iUntilYear == Integer.MAX_VALUE |==> zone.iUntilYear < Integer.MAX_VALUE
746:ROR:==(int,int):<=(int,int):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):823:zone.iUntilYear == Integer.MAX_VALUE |==> zone.iUntilYear <= Integer.MAX_VALUE
747:ROR:==(int,int):>(int,int):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):823:zone.iUntilYear == Integer.MAX_VALUE |==> zone.iUntilYear > Integer.MAX_VALUE
748:ROR:==(int,int):>=(int,int):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):823:zone.iUntilYear == Integer.MAX_VALUE |==> zone.iUntilYear >= Integer.MAX_VALUE
749:ROR:==(int,int):FALSE(int,int):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):823:zone.iUntilYear == Integer.MAX_VALUE |==> false
750:ROR:==(int,int):TRUE(int,int):org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):823:zone.iUntilYear == Integer.MAX_VALUE |==> true
751:STD:<CALL>:<NO-OP>:org.joda.time.tz.ZoneInfoCompiler$Zone@addToBuilder(org.joda.time.tz.ZoneInfoCompiler.Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map<java.lang.String,org.joda.time.tz.ZoneInfoCompiler.RuleSet>):827:zone.iUntilDateTimeOfYear.addCutover(builder, zone.iUntilYear) |==> <NO-OP>
752:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Zone@toString():841:iNext == null |==> iNext != null
753:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Zone@toString():841:iNext == null |==> false
754:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.tz.ZoneInfoCompiler$Zone@toString():841:iNext == null |==> true
