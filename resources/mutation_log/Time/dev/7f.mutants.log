1:LVR:FALSE:TRUE:org.joda.time.format.DateTimeFormatter@<init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser):114:false |==> true
2:LVR:POS:0:org.joda.time.format.DateTimeFormatter@<init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser):118:2000 |==> 0
3:LVR:POS:NEG:org.joda.time.format.DateTimeFormatter@<init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser):118:2000 |==> -2000
4:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@isPrinter():147:iPrinter != null |==> iPrinter == null
5:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@isPrinter():147:iPrinter != null |==> false
6:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@isPrinter():147:iPrinter != null |==> true
7:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@isParser():165:iParser != null |==> iParser == null
8:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@isParser():165:iParser != null |==> false
9:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@isParser():165:iParser != null |==> true
10:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale == getLocale() |==> locale != getLocale()
11:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale == getLocale() |==> false
12:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale == getLocale() |==> true
13:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale != null |==> locale == null
14:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale != null |==> false
15:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale != null |==> true
16:COR:&&(boolean,boolean):!=(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale != null && locale.equals(getLocale()) |==> locale != null != locale.equals(getLocale())
17:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale != null && locale.equals(getLocale()) |==> locale != null == locale.equals(getLocale())
18:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale != null && locale.equals(getLocale()) |==> false
19:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale != null && locale.equals(getLocale()) |==> locale != null
20:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale != null && locale.equals(getLocale()) |==> locale.equals(getLocale())
21:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale != null && locale.equals(getLocale()) |==> true
22:COR:&&(boolean,boolean):||(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale != null && locale.equals(getLocale()) |==> locale != null || locale.equals(getLocale())
23:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale == getLocale() || (locale != null && locale.equals(getLocale())) |==> locale == getLocale() != (locale != null && locale.equals(getLocale()))
24:COR:||(boolean,boolean):&&(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale == getLocale() || (locale != null && locale.equals(getLocale())) |==> locale == getLocale() && (locale != null && locale.equals(getLocale()))
25:COR:||(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale == getLocale() || (locale != null && locale.equals(getLocale())) |==> locale == getLocale() == (locale != null && locale.equals(getLocale()))
26:COR:||(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale == getLocale() || (locale != null && locale.equals(getLocale())) |==> false
27:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale == getLocale() || (locale != null && locale.equals(getLocale())) |==> locale == getLocale()
28:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale == getLocale() || (locale != null && locale.equals(getLocale())) |==> (locale != null && locale.equals(getLocale()))
29:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale == getLocale() || (locale != null && locale.equals(getLocale())) |==> true
30:LVR:TRUE:FALSE:org.joda.time.format.DateTimeFormatter@withOffsetParsed():223:true |==> false
31:ROR:==(boolean,boolean):!=(boolean,boolean):org.joda.time.format.DateTimeFormatter@withOffsetParsed():223:iOffsetParsed == true |==> iOffsetParsed != true
32:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@withOffsetParsed():223:iOffsetParsed == true |==> false
33:ROR:==(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withOffsetParsed():223:iOffsetParsed == true |==> iOffsetParsed
34:ROR:==(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withOffsetParsed():223:iOffsetParsed == true |==> true
35:ROR:==(boolean,boolean):TRUE(boolean,boolean):org.joda.time.format.DateTimeFormatter@withOffsetParsed():223:iOffsetParsed == true |==> true
36:LVR:TRUE:FALSE:org.joda.time.format.DateTimeFormatter@withOffsetParsed():227:true |==> false
37:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withChronology(org.joda.time.Chronology):258:iChrono == chrono |==> iChrono != chrono
38:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withChronology(org.joda.time.Chronology):258:iChrono == chrono |==> false
39:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withChronology(org.joda.time.Chronology):258:iChrono == chrono |==> true
40:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withZone(org.joda.time.DateTimeZone):322:iZone == zone |==> iZone != zone
41:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withZone(org.joda.time.DateTimeZone):322:iZone == zone |==> false
42:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withZone(org.joda.time.DateTimeZone):322:iZone == zone |==> true
43:LVR:FALSE:TRUE:org.joda.time.format.DateTimeFormatter@withZone(org.joda.time.DateTimeZone):326:false |==> true
44:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear == pivotYear |==> iPivotYear != pivotYear
45:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear == pivotYear |==> false
46:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear == pivotYear |==> true
47:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear != null |==> iPivotYear == null
48:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear != null |==> false
49:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear != null |==> true
50:COR:&&(boolean,boolean):!=(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear != null && iPivotYear.equals(pivotYear) |==> iPivotYear != null != iPivotYear.equals(pivotYear)
51:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear != null && iPivotYear.equals(pivotYear) |==> iPivotYear != null == iPivotYear.equals(pivotYear)
52:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear != null && iPivotYear.equals(pivotYear) |==> false
53:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear != null && iPivotYear.equals(pivotYear) |==> iPivotYear != null
54:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear != null && iPivotYear.equals(pivotYear) |==> iPivotYear.equals(pivotYear)
55:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear != null && iPivotYear.equals(pivotYear) |==> true
56:COR:&&(boolean,boolean):||(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear != null && iPivotYear.equals(pivotYear) |==> iPivotYear != null || iPivotYear.equals(pivotYear)
57:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear)) |==> iPivotYear == pivotYear != (iPivotYear != null && iPivotYear.equals(pivotYear))
58:COR:||(boolean,boolean):&&(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear)) |==> iPivotYear == pivotYear && (iPivotYear != null && iPivotYear.equals(pivotYear))
59:COR:||(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear)) |==> iPivotYear == pivotYear == (iPivotYear != null && iPivotYear.equals(pivotYear))
60:COR:||(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear)) |==> false
61:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear)) |==> iPivotYear == pivotYear
62:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear)) |==> (iPivotYear != null && iPivotYear.equals(pivotYear))
63:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear)) |==> true
64:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,org.joda.time.ReadableInstant):463:printTo(buf, millis, chrono) |==> <NO-OP>
65:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,org.joda.time.ReadableInstant):475:printTo(out, millis, chrono) |==> <NO-OP>
66:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.Appendable,org.joda.time.ReadableInstant):486:appendable.append(print(instant)) |==> <NO-OP>
67:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long):498:printTo(buf, instant, null) |==> <NO-OP>
68:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long):509:printTo(out, instant, null) |==> <NO-OP>
69:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.Appendable,long):521:appendable.append(print(instant)) |==> <NO-OP>
70:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial):536:partial == null |==> partial != null
71:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial):536:partial == null |==> false
72:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial):536:partial == null |==> true
73:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial):539:printer.printTo(buf, partial, iLocale) |==> <NO-OP>
74:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,org.joda.time.ReadablePartial):553:partial == null |==> partial != null
75:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,org.joda.time.ReadablePartial):553:partial == null |==> false
76:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,org.joda.time.ReadablePartial):553:partial == null |==> true
77:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,org.joda.time.ReadablePartial):556:printer.printTo(out, partial, iLocale) |==> <NO-OP>
78:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.Appendable,org.joda.time.ReadablePartial):570:appendable.append(print(partial)) |==> <NO-OP>
79:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@print(org.joda.time.ReadableInstant):585:printTo(buf, instant) |==> <NO-OP>
80:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@print(long):600:printTo(buf, instant) |==> <NO-OP>
81:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@print(org.joda.time.ReadablePartial):615:printTo(buf, partial) |==> <NO-OP>
82:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):621:chrono = selectChronology(chrono) |==> <NO-OP>
83:AOR:+(long,long):%(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):626:instant + offset |==> instant % offset
84:AOR:+(long,long):*(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):626:instant + offset |==> instant * offset
85:AOR:+(long,long):-(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):626:instant + offset |==> instant - offset
86:AOR:+(long,long):/(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):626:instant + offset |==> instant / offset
87:LOR:^(long,long):&(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:instant ^ adjustedInstant |==> instant & adjustedInstant
88:LOR:^(long,long):|(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:instant ^ adjustedInstant |==> instant | adjustedInstant
89:LVR:0:POS:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:0 |==> 1
90:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:0 |==> -1
91:ROR:<(long,long):!=(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 |==> (instant ^ adjustedInstant) != 0
92:ROR:<(long,long):<=(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 |==> (instant ^ adjustedInstant) <= 0
93:ROR:<(long,long):==(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 |==> (instant ^ adjustedInstant) == 0
94:ROR:<(long,long):>(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 |==> (instant ^ adjustedInstant) > 0
95:ROR:<(long,long):>=(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 |==> (instant ^ adjustedInstant) >= 0
96:ROR:<(long,long):FALSE(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 |==> false
97:ROR:<(long,long):TRUE(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 |==> true
98:LOR:^(long,long):&(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:instant ^ offset |==> instant & offset
99:LOR:^(long,long):|(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:instant ^ offset |==> instant | offset
100:LVR:0:POS:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:0 |==> 1
101:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:0 |==> -1
102:ROR:>=(long,long):!=(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ offset) >= 0 |==> (instant ^ offset) != 0
103:ROR:>=(long,long):<(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ offset) >= 0 |==> (instant ^ offset) < 0
104:ROR:>=(long,long):<=(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ offset) >= 0 |==> (instant ^ offset) <= 0
105:ROR:>=(long,long):==(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ offset) >= 0 |==> (instant ^ offset) == 0
106:ROR:>=(long,long):>(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ offset) >= 0 |==> (instant ^ offset) > 0
107:ROR:>=(long,long):FALSE(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ offset) >= 0 |==> false
108:ROR:>=(long,long):TRUE(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ offset) >= 0 |==> true
109:COR:&&(boolean,boolean):!=(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ adjustedInstant) < 0 != (instant ^ offset) >= 0
110:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ adjustedInstant) < 0 == (instant ^ offset) >= 0
111:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> false
112:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ adjustedInstant) < 0
113:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ offset) >= 0
114:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> true
115:COR:&&(boolean,boolean):||(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ adjustedInstant) < 0 || (instant ^ offset) >= 0
116:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):629:zone = DateTimeZone.UTC |==> <NO-OP>
117:LVR:0:POS:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):630:0 |==> 1
118:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):630:0 |==> -1
119:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):630:offset = 0 |==> <NO-OP>
120:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):631:adjustedInstant = instant |==> <NO-OP>
121:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):633:printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale) |==> <NO-OP>
122:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):638:chrono = selectChronology(chrono) |==> <NO-OP>
123:AOR:+(long,long):%(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):643:instant + offset |==> instant % offset
124:AOR:+(long,long):*(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):643:instant + offset |==> instant * offset
125:AOR:+(long,long):-(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):643:instant + offset |==> instant - offset
126:AOR:+(long,long):/(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):643:instant + offset |==> instant / offset
127:LOR:^(long,long):&(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:instant ^ adjustedInstant |==> instant & adjustedInstant
128:LOR:^(long,long):|(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:instant ^ adjustedInstant |==> instant | adjustedInstant
129:LVR:0:POS:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:0 |==> 1
130:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:0 |==> -1
131:ROR:<(long,long):!=(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 |==> (instant ^ adjustedInstant) != 0
132:ROR:<(long,long):<=(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 |==> (instant ^ adjustedInstant) <= 0
133:ROR:<(long,long):==(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 |==> (instant ^ adjustedInstant) == 0
134:ROR:<(long,long):>(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 |==> (instant ^ adjustedInstant) > 0
135:ROR:<(long,long):>=(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 |==> (instant ^ adjustedInstant) >= 0
136:ROR:<(long,long):FALSE(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 |==> false
137:ROR:<(long,long):TRUE(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 |==> true
138:LOR:^(long,long):&(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:instant ^ offset |==> instant & offset
139:LOR:^(long,long):|(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:instant ^ offset |==> instant | offset
140:LVR:0:POS:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:0 |==> 1
141:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:0 |==> -1
142:ROR:>=(long,long):!=(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ offset) >= 0 |==> (instant ^ offset) != 0
143:ROR:>=(long,long):<(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ offset) >= 0 |==> (instant ^ offset) < 0
144:ROR:>=(long,long):<=(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ offset) >= 0 |==> (instant ^ offset) <= 0
145:ROR:>=(long,long):==(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ offset) >= 0 |==> (instant ^ offset) == 0
146:ROR:>=(long,long):>(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ offset) >= 0 |==> (instant ^ offset) > 0
147:ROR:>=(long,long):FALSE(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ offset) >= 0 |==> false
148:ROR:>=(long,long):TRUE(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ offset) >= 0 |==> true
149:COR:&&(boolean,boolean):!=(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ adjustedInstant) < 0 != (instant ^ offset) >= 0
150:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ adjustedInstant) < 0 == (instant ^ offset) >= 0
151:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> false
152:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ adjustedInstant) < 0
153:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ offset) >= 0
154:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> true
155:COR:&&(boolean,boolean):||(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ adjustedInstant) < 0 || (instant ^ offset) >= 0
156:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):646:zone = DateTimeZone.UTC |==> <NO-OP>
157:LVR:0:POS:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):647:0 |==> 1
158:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):647:0 |==> -1
159:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):647:offset = 0 |==> <NO-OP>
160:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):648:adjustedInstant = instant |==> <NO-OP>
161:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):650:printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale) |==> <NO-OP>
162:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@requirePrinter():660:printer == null |==> printer != null
163:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@requirePrinter():660:printer == null |==> false
164:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@requirePrinter():660:printer == null |==> true
165:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):702:instant == null |==> instant != null
166:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):702:instant == null |==> false
167:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):702:instant == null |==> true
168:AOR:+(long,long):%(long,long):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):709:instantMillis + chrono.getZone().getOffset(instantMillis) |==> instantMillis % chrono.getZone().getOffset(instantMillis)
169:AOR:+(long,long):*(long,long):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):709:instantMillis + chrono.getZone().getOffset(instantMillis) |==> instantMillis * chrono.getZone().getOffset(instantMillis)
170:AOR:+(long,long):-(long,long):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):709:instantMillis + chrono.getZone().getOffset(instantMillis) |==> instantMillis - chrono.getZone().getOffset(instantMillis)
171:AOR:+(long,long):/(long,long):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):709:instantMillis + chrono.getZone().getOffset(instantMillis) |==> instantMillis / chrono.getZone().getOffset(instantMillis)
172:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):710:chrono = selectChronology(chrono) |==> <NO-OP>
173:LVR:FALSE:TRUE:org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):715:false |==> true
174:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):715:instant.setMillis(bucket.computeMillis(false, text)) |==> <NO-OP>
175:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):716:bucket.getOffsetInteger() != null |==> bucket.getOffsetInteger() == null
176:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):716:bucket.getOffsetInteger() != null |==> false
177:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):716:bucket.getOffsetInteger() != null |==> true
178:COR:&&(boolean,boolean):!=(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):716:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed != (bucket.getOffsetInteger() != null)
179:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):716:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed == (bucket.getOffsetInteger() != null)
180:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):716:iOffsetParsed && bucket.getOffsetInteger() != null |==> false
181:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):716:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed
182:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):716:iOffsetParsed && bucket.getOffsetInteger() != null |==> bucket.getOffsetInteger() != null
183:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):716:iOffsetParsed && bucket.getOffsetInteger() != null |==> true
184:COR:&&(boolean,boolean):||(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):716:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed || bucket.getOffsetInteger() != null
185:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):719:chrono = chrono.withZone(parsedZone) |==> <NO-OP>
186:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):720:bucket.getZone() != null |==> bucket.getZone() == null
187:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):720:bucket.getZone() != null |==> false
188:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):720:bucket.getZone() != null |==> true
189:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):721:chrono = chrono.withZone(bucket.getZone()) |==> <NO-OP>
190:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):723:instant.setChronology(chrono) |==> <NO-OP>
191:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):724:iZone != null |==> iZone == null
192:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):724:iZone != null |==> false
193:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):724:iZone != null |==> true
194:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):725:instant.setZone(iZone) |==> <NO-OP>
195:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):746:0 |==> 1
196:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):746:0 |==> -1
197:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):747:0 |==> 1
198:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):747:0 |==> -1
199:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):748:0 |==> 1
200:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):748:0 |==> -1
201:ROR:>=(int,int):!=(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):748:newPos >= 0 |==> newPos != 0
202:ROR:>=(int,int):<(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):748:newPos >= 0 |==> newPos < 0
203:ROR:>=(int,int):<=(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):748:newPos >= 0 |==> newPos <= 0
204:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):748:newPos >= 0 |==> newPos == 0
205:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):748:newPos >= 0 |==> newPos > 0
206:ROR:>=(int,int):FALSE(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):748:newPos >= 0 |==> false
207:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):748:newPos >= 0 |==> true
208:ROR:>=(int,int):!=(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):749:newPos >= text.length() |==> newPos != text.length()
209:ROR:>=(int,int):<(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):749:newPos >= text.length() |==> newPos < text.length()
210:ROR:>=(int,int):<=(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):749:newPos >= text.length() |==> newPos <= text.length()
211:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):749:newPos >= text.length() |==> newPos == text.length()
212:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):749:newPos >= text.length() |==> newPos > text.length()
213:ROR:>=(int,int):FALSE(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):749:newPos >= text.length() |==> false
214:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):749:newPos >= text.length() |==> true
215:LVR:TRUE:FALSE:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):750:true |==> false
216:ORU:~(int):+(int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):753:~newPos |==> +newPos
217:ORU:~(int):-(int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):753:~newPos |==> -newPos
218:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):753:newPos = ~newPos |==> <NO-OP>
219:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):812:0 |==> 1
220:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):812:0 |==> -1
221:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):813:0 |==> 1
222:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):813:0 |==> -1
223:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):814:0 |==> 1
224:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):814:0 |==> -1
225:ROR:>=(int,int):!=(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):814:newPos >= 0 |==> newPos != 0
226:ROR:>=(int,int):<(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):814:newPos >= 0 |==> newPos < 0
227:ROR:>=(int,int):<=(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):814:newPos >= 0 |==> newPos <= 0
228:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):814:newPos >= 0 |==> newPos == 0
229:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):814:newPos >= 0 |==> newPos > 0
230:ROR:>=(int,int):FALSE(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):814:newPos >= 0 |==> false
231:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):814:newPos >= 0 |==> true
232:ROR:>=(int,int):!=(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):815:newPos >= text.length() |==> newPos != text.length()
233:ROR:>=(int,int):<(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):815:newPos >= text.length() |==> newPos < text.length()
234:ROR:>=(int,int):<=(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):815:newPos >= text.length() |==> newPos <= text.length()
235:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):815:newPos >= text.length() |==> newPos == text.length()
236:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):815:newPos >= text.length() |==> newPos > text.length()
237:ROR:>=(int,int):FALSE(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):815:newPos >= text.length() |==> false
238:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):815:newPos >= text.length() |==> true
239:LVR:TRUE:FALSE:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):816:true |==> false
240:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):817:bucket.getOffsetInteger() != null |==> bucket.getOffsetInteger() == null
241:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):817:bucket.getOffsetInteger() != null |==> false
242:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):817:bucket.getOffsetInteger() != null |==> true
243:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):820:chrono = chrono.withZone(parsedZone) |==> <NO-OP>
244:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):821:bucket.getZone() != null |==> bucket.getZone() == null
245:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):821:bucket.getZone() != null |==> false
246:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):821:bucket.getZone() != null |==> true
247:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):822:chrono = chrono.withZone(bucket.getZone()) |==> <NO-OP>
248:ORU:~(int):+(int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):827:~newPos |==> +newPos
249:ORU:~(int):-(int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):827:~newPos |==> -newPos
250:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):827:newPos = ~newPos |==> <NO-OP>
251:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):853:0 |==> 1
252:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):853:0 |==> -1
253:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):854:0 |==> 1
254:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):854:0 |==> -1
255:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):855:0 |==> 1
256:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):855:0 |==> -1
257:ROR:>=(int,int):!=(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):855:newPos >= 0 |==> newPos != 0
258:ROR:>=(int,int):<(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):855:newPos >= 0 |==> newPos < 0
259:ROR:>=(int,int):<=(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):855:newPos >= 0 |==> newPos <= 0
260:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):855:newPos >= 0 |==> newPos == 0
261:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):855:newPos >= 0 |==> newPos > 0
262:ROR:>=(int,int):FALSE(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):855:newPos >= 0 |==> false
263:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):855:newPos >= 0 |==> true
264:ROR:>=(int,int):!=(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):856:newPos >= text.length() |==> newPos != text.length()
265:ROR:>=(int,int):<(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):856:newPos >= text.length() |==> newPos < text.length()
266:ROR:>=(int,int):<=(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):856:newPos >= text.length() |==> newPos <= text.length()
267:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):856:newPos >= text.length() |==> newPos == text.length()
268:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):856:newPos >= text.length() |==> newPos > text.length()
269:ROR:>=(int,int):FALSE(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):856:newPos >= text.length() |==> false
270:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):856:newPos >= text.length() |==> true
271:LVR:TRUE:FALSE:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):857:true |==> false
272:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):858:bucket.getOffsetInteger() != null |==> bucket.getOffsetInteger() == null
273:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):858:bucket.getOffsetInteger() != null |==> false
274:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):858:bucket.getOffsetInteger() != null |==> true
275:COR:&&(boolean,boolean):!=(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):858:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed != (bucket.getOffsetInteger() != null)
276:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):858:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed == (bucket.getOffsetInteger() != null)
277:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):858:iOffsetParsed && bucket.getOffsetInteger() != null |==> false
278:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):858:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed
279:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):858:iOffsetParsed && bucket.getOffsetInteger() != null |==> bucket.getOffsetInteger() != null
280:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):858:iOffsetParsed && bucket.getOffsetInteger() != null |==> true
281:COR:&&(boolean,boolean):||(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):858:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed || bucket.getOffsetInteger() != null
282:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):861:chrono = chrono.withZone(parsedZone) |==> <NO-OP>
283:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):862:bucket.getZone() != null |==> bucket.getZone() == null
284:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):862:bucket.getZone() != null |==> false
285:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):862:bucket.getZone() != null |==> true
286:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):863:chrono = chrono.withZone(bucket.getZone()) |==> <NO-OP>
287:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):866:iZone != null |==> iZone == null
288:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):866:iZone != null |==> false
289:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):866:iZone != null |==> true
290:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):867:dt = dt.withZone(iZone) |==> <NO-OP>
291:ORU:~(int):+(int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):872:~newPos |==> +newPos
292:ORU:~(int):-(int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):872:~newPos |==> -newPos
293:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):872:newPos = ~newPos |==> <NO-OP>
294:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):898:0 |==> 1
295:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):898:0 |==> -1
296:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):899:0 |==> 1
297:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):899:0 |==> -1
298:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):900:0 |==> 1
299:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):900:0 |==> -1
300:ROR:>=(int,int):!=(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):900:newPos >= 0 |==> newPos != 0
301:ROR:>=(int,int):<(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):900:newPos >= 0 |==> newPos < 0
302:ROR:>=(int,int):<=(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):900:newPos >= 0 |==> newPos <= 0
303:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):900:newPos >= 0 |==> newPos == 0
304:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):900:newPos >= 0 |==> newPos > 0
305:ROR:>=(int,int):FALSE(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):900:newPos >= 0 |==> false
306:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):900:newPos >= 0 |==> true
307:ROR:>=(int,int):!=(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):901:newPos >= text.length() |==> newPos != text.length()
308:ROR:>=(int,int):<(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):901:newPos >= text.length() |==> newPos < text.length()
309:ROR:>=(int,int):<=(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):901:newPos >= text.length() |==> newPos <= text.length()
310:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):901:newPos >= text.length() |==> newPos == text.length()
311:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):901:newPos >= text.length() |==> newPos > text.length()
312:ROR:>=(int,int):FALSE(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):901:newPos >= text.length() |==> false
313:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):901:newPos >= text.length() |==> true
314:LVR:TRUE:FALSE:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):902:true |==> false
315:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):903:bucket.getOffsetInteger() != null |==> bucket.getOffsetInteger() == null
316:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):903:bucket.getOffsetInteger() != null |==> false
317:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):903:bucket.getOffsetInteger() != null |==> true
318:COR:&&(boolean,boolean):!=(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):903:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed != (bucket.getOffsetInteger() != null)
319:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):903:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed == (bucket.getOffsetInteger() != null)
320:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):903:iOffsetParsed && bucket.getOffsetInteger() != null |==> false
321:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):903:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed
322:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):903:iOffsetParsed && bucket.getOffsetInteger() != null |==> bucket.getOffsetInteger() != null
323:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):903:iOffsetParsed && bucket.getOffsetInteger() != null |==> true
324:COR:&&(boolean,boolean):||(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):903:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed || bucket.getOffsetInteger() != null
325:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):906:chrono = chrono.withZone(parsedZone) |==> <NO-OP>
326:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):907:bucket.getZone() != null |==> bucket.getZone() == null
327:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):907:bucket.getZone() != null |==> false
328:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):907:bucket.getZone() != null |==> true
329:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):908:chrono = chrono.withZone(bucket.getZone()) |==> <NO-OP>
330:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):911:iZone != null |==> iZone == null
331:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):911:iZone != null |==> false
332:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):911:iZone != null |==> true
333:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):912:dt.setZone(iZone) |==> <NO-OP>
334:ORU:~(int):+(int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):917:~newPos |==> +newPos
335:ORU:~(int):-(int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):917:~newPos |==> -newPos
336:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):917:newPos = ~newPos |==> <NO-OP>
337:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@requireParser():929:parser == null |==> parser != null
338:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@requireParser():929:parser == null |==> false
339:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@requireParser():929:parser == null |==> true
340:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@selectChronology(org.joda.time.Chronology):943:chrono = DateTimeUtils.getChronology(chrono) |==> <NO-OP>
341:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@selectChronology(org.joda.time.Chronology):944:iChrono != null |==> iChrono == null
342:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@selectChronology(org.joda.time.Chronology):944:iChrono != null |==> false
343:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@selectChronology(org.joda.time.Chronology):944:iChrono != null |==> true
344:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@selectChronology(org.joda.time.Chronology):945:chrono = iChrono |==> <NO-OP>
345:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@selectChronology(org.joda.time.Chronology):947:iZone != null |==> iZone == null
346:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@selectChronology(org.joda.time.Chronology):947:iZone != null |==> false
347:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@selectChronology(org.joda.time.Chronology):947:iZone != null |==> true
348:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@selectChronology(org.joda.time.Chronology):948:chrono = chrono.withZone(iZone) |==> <NO-OP>