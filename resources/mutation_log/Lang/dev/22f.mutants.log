1:LVR:0:POS:org.apache.commons.lang3.math.Fraction:52:0 |==> 1
2:LVR:0:NEG:org.apache.commons.lang3.math.Fraction:52:0 |==> -1
3:LVR:POS:0:org.apache.commons.lang3.math.Fraction:52:1 |==> 0
4:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:52:1 |==> -1
5:LVR:POS:0:org.apache.commons.lang3.math.Fraction:56:1 |==> 0
6:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:56:1 |==> -1
7:LVR:POS:0:org.apache.commons.lang3.math.Fraction:56:1 |==> 0
8:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:56:1 |==> -1
9:LVR:POS:0:org.apache.commons.lang3.math.Fraction:60:1 |==> 0
10:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:60:1 |==> -1
11:LVR:POS:0:org.apache.commons.lang3.math.Fraction:60:2 |==> 0
12:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:60:2 |==> -2
13:LVR:POS:0:org.apache.commons.lang3.math.Fraction:64:1 |==> 0
14:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:64:1 |==> -1
15:LVR:POS:0:org.apache.commons.lang3.math.Fraction:64:3 |==> 0
16:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:64:3 |==> -3
17:LVR:POS:0:org.apache.commons.lang3.math.Fraction:68:2 |==> 0
18:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:68:2 |==> -2
19:LVR:POS:0:org.apache.commons.lang3.math.Fraction:68:3 |==> 0
20:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:68:3 |==> -3
21:LVR:POS:0:org.apache.commons.lang3.math.Fraction:72:1 |==> 0
22:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:72:1 |==> -1
23:LVR:POS:0:org.apache.commons.lang3.math.Fraction:72:4 |==> 0
24:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:72:4 |==> -4
25:LVR:POS:0:org.apache.commons.lang3.math.Fraction:76:2 |==> 0
26:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:76:2 |==> -2
27:LVR:POS:0:org.apache.commons.lang3.math.Fraction:76:4 |==> 0
28:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:76:4 |==> -4
29:LVR:POS:0:org.apache.commons.lang3.math.Fraction:80:3 |==> 0
30:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:80:3 |==> -3
31:LVR:POS:0:org.apache.commons.lang3.math.Fraction:80:4 |==> 0
32:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:80:4 |==> -4
33:LVR:POS:0:org.apache.commons.lang3.math.Fraction:84:1 |==> 0
34:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:84:1 |==> -1
35:LVR:POS:0:org.apache.commons.lang3.math.Fraction:84:5 |==> 0
36:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:84:5 |==> -5
37:LVR:POS:0:org.apache.commons.lang3.math.Fraction:88:2 |==> 0
38:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:88:2 |==> -2
39:LVR:POS:0:org.apache.commons.lang3.math.Fraction:88:5 |==> 0
40:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:88:5 |==> -5
41:LVR:POS:0:org.apache.commons.lang3.math.Fraction:92:3 |==> 0
42:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:92:3 |==> -3
43:LVR:POS:0:org.apache.commons.lang3.math.Fraction:92:5 |==> 0
44:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:92:5 |==> -5
45:LVR:POS:0:org.apache.commons.lang3.math.Fraction:96:4 |==> 0
46:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:96:4 |==> -4
47:LVR:POS:0:org.apache.commons.lang3.math.Fraction:96:5 |==> 0
48:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:96:5 |==> -5
49:LVR:0:POS:org.apache.commons.lang3.math.Fraction:111:0 |==> 1
50:LVR:0:NEG:org.apache.commons.lang3.math.Fraction:111:0 |==> -1
51:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(int,int):147:0 |==> 1
52:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(int,int):147:0 |==> -1
53:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):147:denominator == 0 |==> denominator != 0
54:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):147:denominator == 0 |==> denominator < 0
55:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):147:denominator == 0 |==> denominator <= 0
56:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):147:denominator == 0 |==> denominator > 0
57:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):147:denominator == 0 |==> denominator >= 0
58:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):147:denominator == 0 |==> false
59:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):147:denominator == 0 |==> true
60:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(int,int):150:0 |==> 1
61:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(int,int):150:0 |==> -1
62:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):150:denominator < 0 |==> denominator != 0
63:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):150:denominator < 0 |==> denominator <= 0
64:ROR:<(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):150:denominator < 0 |==> denominator == 0
65:ROR:<(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):150:denominator < 0 |==> denominator > 0
66:ROR:<(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):150:denominator < 0 |==> denominator >= 0
67:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):150:denominator < 0 |==> false
68:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):150:denominator < 0 |==> true
69:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE |==> numerator != Integer.MIN_VALUE
70:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE |==> numerator < Integer.MIN_VALUE
71:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
72:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE |==> numerator > Integer.MIN_VALUE
73:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
74:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE |==> false
75:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE |==> true
76:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):152:denominator == Integer.MIN_VALUE |==> denominator != Integer.MIN_VALUE
77:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):152:denominator == Integer.MIN_VALUE |==> denominator < Integer.MIN_VALUE
78:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):152:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
79:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):152:denominator == Integer.MIN_VALUE |==> denominator > Integer.MIN_VALUE
80:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):152:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
81:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):152:denominator == Integer.MIN_VALUE |==> false
82:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):152:denominator == Integer.MIN_VALUE |==> true
83:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE != (denominator == Integer.MIN_VALUE)
84:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE && denominator == Integer.MIN_VALUE
85:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE == (denominator == Integer.MIN_VALUE)
86:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> false
87:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE
88:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int):152:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> denominator == Integer.MIN_VALUE
89:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> true
90:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):155:-numerator |==> +numerator
91:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):155:-numerator |==> ~numerator
92:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(int,int):155:numerator = -numerator |==> <NO-OP>
93:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):156:-denominator |==> +denominator
94:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):156:-denominator |==> ~denominator
95:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(int,int):156:denominator = -denominator |==> <NO-OP>
96:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):178:0 |==> 1
97:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):178:0 |==> -1
98:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):178:denominator == 0 |==> denominator != 0
99:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):178:denominator == 0 |==> denominator < 0
100:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):178:denominator == 0 |==> denominator <= 0
101:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):178:denominator == 0 |==> denominator > 0
102:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):178:denominator == 0 |==> denominator >= 0
103:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):178:denominator == 0 |==> false
104:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):178:denominator == 0 |==> true
105:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):181:0 |==> 1
106:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):181:0 |==> -1
107:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):181:denominator < 0 |==> denominator != 0
108:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):181:denominator < 0 |==> denominator <= 0
109:ROR:<(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):181:denominator < 0 |==> denominator == 0
110:ROR:<(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):181:denominator < 0 |==> denominator > 0
111:ROR:<(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):181:denominator < 0 |==> denominator >= 0
112:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):181:denominator < 0 |==> false
113:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):181:denominator < 0 |==> true
114:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):184:0 |==> 1
115:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):184:0 |==> -1
116:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):184:numerator < 0 |==> numerator != 0
117:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):184:numerator < 0 |==> numerator <= 0
118:ROR:<(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):184:numerator < 0 |==> numerator == 0
119:ROR:<(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):184:numerator < 0 |==> numerator > 0
120:ROR:<(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):184:numerator < 0 |==> numerator >= 0
121:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):184:numerator < 0 |==> false
122:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):184:numerator < 0 |==> true
123:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):188:0 |==> 1
124:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):188:0 |==> -1
125:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):188:whole < 0 |==> whole != 0
126:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):188:whole < 0 |==> whole <= 0
127:ROR:<(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):188:whole < 0 |==> whole == 0
128:ROR:<(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):188:whole < 0 |==> whole > 0
129:ROR:<(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):188:whole < 0 |==> whole >= 0
130:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):188:whole < 0 |==> false
131:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):188:whole < 0 |==> true
132:AOR:*(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator |==> whole % (long)denominator
133:AOR:*(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator |==> whole + (long)denominator
134:AOR:*(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator |==> whole - (long)denominator
135:AOR:*(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator |==> whole / (long)denominator
136:AOR:-(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator - numerator |==> whole * (long)denominator % numerator
137:AOR:-(long,long):*(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator - numerator |==> whole * (long)denominator * numerator
138:AOR:-(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator - numerator |==> whole * (long)denominator + numerator
139:AOR:-(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator - numerator |==> whole * (long)denominator / numerator
140:AOR:*(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator |==> whole % (long)denominator
141:AOR:*(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator |==> whole + (long)denominator
142:AOR:*(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator |==> whole - (long)denominator
143:AOR:*(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator |==> whole / (long)denominator
144:AOR:+(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator + numerator |==> whole * (long)denominator % numerator
145:AOR:+(long,long):*(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator + numerator |==> whole * (long)denominator * numerator
146:AOR:+(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator + numerator |==> whole * (long)denominator - numerator
147:AOR:+(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator + numerator |==> whole * (long)denominator / numerator
148:ROR:<(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE |==> numeratorValue != Integer.MIN_VALUE
149:ROR:<(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE |==> numeratorValue <= Integer.MIN_VALUE
150:ROR:<(long,long):==(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE |==> numeratorValue == Integer.MIN_VALUE
151:ROR:<(long,long):>(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE |==> numeratorValue > Integer.MIN_VALUE
152:ROR:<(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE |==> numeratorValue >= Integer.MIN_VALUE
153:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE |==> false
154:ROR:<(long,long):TRUE(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE |==> true
155:ROR:>(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):194:numeratorValue > Integer.MAX_VALUE |==> numeratorValue != Integer.MAX_VALUE
156:ROR:>(long,long):<(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):194:numeratorValue > Integer.MAX_VALUE |==> numeratorValue < Integer.MAX_VALUE
157:ROR:>(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):194:numeratorValue > Integer.MAX_VALUE |==> numeratorValue <= Integer.MAX_VALUE
158:ROR:>(long,long):==(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):194:numeratorValue > Integer.MAX_VALUE |==> numeratorValue == Integer.MAX_VALUE
159:ROR:>(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):194:numeratorValue > Integer.MAX_VALUE |==> numeratorValue >= Integer.MAX_VALUE
160:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):194:numeratorValue > Integer.MAX_VALUE |==> false
161:ROR:>(long,long):TRUE(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):194:numeratorValue > Integer.MAX_VALUE |==> true
162:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue < Integer.MIN_VALUE != numeratorValue > Integer.MAX_VALUE
163:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue < Integer.MIN_VALUE && numeratorValue > Integer.MAX_VALUE
164:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue < Integer.MIN_VALUE == numeratorValue > Integer.MAX_VALUE
165:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> false
166:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue < Integer.MIN_VALUE
167:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):194:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue > Integer.MAX_VALUE
168:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> true
169:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):215:0 |==> 1
170:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):215:0 |==> -1
171:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):215:denominator == 0 |==> denominator != 0
172:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):215:denominator == 0 |==> denominator < 0
173:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):215:denominator == 0 |==> denominator <= 0
174:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):215:denominator == 0 |==> denominator > 0
175:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):215:denominator == 0 |==> denominator >= 0
176:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):215:denominator == 0 |==> false
177:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):215:denominator == 0 |==> true
178:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):218:0 |==> 1
179:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):218:0 |==> -1
180:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):218:numerator == 0 |==> numerator != 0
181:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):218:numerator == 0 |==> numerator < 0
182:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):218:numerator == 0 |==> numerator <= 0
183:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):218:numerator == 0 |==> numerator > 0
184:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):218:numerator == 0 |==> numerator >= 0
185:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):218:numerator == 0 |==> false
186:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):218:numerator == 0 |==> true
187:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> denominator != Integer.MIN_VALUE
188:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> denominator < Integer.MIN_VALUE
189:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
190:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> denominator > Integer.MIN_VALUE
191:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
192:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> false
193:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> true
194:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:1 |==> 0
195:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:1 |==> -1
196:LOR:&(int,int):^(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:numerator & 1 |==> numerator ^ 1
197:LOR:&(int,int):|(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:numerator & 1 |==> numerator | 1
198:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:0 |==> 1
199:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:0 |==> -1
200:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:(numerator & 1) == 0 |==> (numerator & 1) != 0
201:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:(numerator & 1) == 0 |==> (numerator & 1) < 0
202:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:(numerator & 1) == 0 |==> (numerator & 1) <= 0
203:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:(numerator & 1) == 0 |==> (numerator & 1) > 0
204:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:(numerator & 1) == 0 |==> (numerator & 1) >= 0
205:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:(numerator & 1) == 0 |==> false
206:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:(numerator & 1) == 0 |==> true
207:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE != ((numerator & 1) == 0)
208:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE == ((numerator & 1) == 0)
209:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> false
210:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE
211:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> (numerator & 1) == 0
212:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> true
213:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE || (numerator & 1) == 0
214:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):223:2 |==> 0
215:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):223:2 |==> -2
216:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):223:numerator /= 2 |==> <NO-OP>
217:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):223:2 |==> 0
218:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):223:2 |==> -2
219:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):223:denominator /= 2 |==> <NO-OP>
220:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):225:0 |==> 1
221:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):225:0 |==> -1
222:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):225:denominator < 0 |==> denominator != 0
223:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):225:denominator < 0 |==> denominator <= 0
224:ROR:<(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):225:denominator < 0 |==> denominator == 0
225:ROR:<(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):225:denominator < 0 |==> denominator > 0
226:ROR:<(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):225:denominator < 0 |==> denominator >= 0
227:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):225:denominator < 0 |==> false
228:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):225:denominator < 0 |==> true
229:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE |==> numerator != Integer.MIN_VALUE
230:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE |==> numerator < Integer.MIN_VALUE
231:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
232:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE |==> numerator > Integer.MIN_VALUE
233:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
234:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE |==> false
235:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE |==> true
236:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):227:denominator == Integer.MIN_VALUE |==> denominator != Integer.MIN_VALUE
237:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):227:denominator == Integer.MIN_VALUE |==> denominator < Integer.MIN_VALUE
238:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):227:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
239:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):227:denominator == Integer.MIN_VALUE |==> denominator > Integer.MIN_VALUE
240:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):227:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
241:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):227:denominator == Integer.MIN_VALUE |==> false
242:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):227:denominator == Integer.MIN_VALUE |==> true
243:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE != (denominator == Integer.MIN_VALUE)
244:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE && denominator == Integer.MIN_VALUE
245:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE == (denominator == Integer.MIN_VALUE)
246:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> false
247:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE
248:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):227:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> denominator == Integer.MIN_VALUE
249:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> true
250:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):230:-numerator |==> +numerator
251:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):230:-numerator |==> ~numerator
252:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):230:numerator = -numerator |==> <NO-OP>
253:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):231:-denominator |==> +denominator
254:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):231:-denominator |==> ~denominator
255:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):231:denominator = -denominator |==> <NO-OP>
256:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):235:numerator /= gcd |==> <NO-OP>
257:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):236:denominator /= gcd |==> <NO-OP>
258:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):255:0 |==> 1
259:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):255:0 |==> -1
260:ROR:<(double,double):!=(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):255:value < 0 |==> value != 0
261:ROR:<(double,double):<=(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):255:value < 0 |==> value <= 0
262:ROR:<(double,double):==(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):255:value < 0 |==> value == 0
263:ROR:<(double,double):>(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):255:value < 0 |==> value > 0
264:ROR:<(double,double):>=(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):255:value < 0 |==> value >= 0
265:ROR:<(double,double):FALSE(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):255:value < 0 |==> false
266:ROR:<(double,double):TRUE(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):255:value < 0 |==> true
267:LVR:NEG:0:org.apache.commons.lang3.math.Fraction@getFraction(double):255:-1 |==> 0
268:LVR:NEG:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):255:-1 |==> 1
269:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):255:1 |==> 0
270:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):255:1 |==> -1
271:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):256:value = Math.abs(value) |==> <NO-OP>
272:ROR:>(double,double):!=(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE |==> value != Integer.MAX_VALUE
273:ROR:>(double,double):<(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE |==> value < Integer.MAX_VALUE
274:ROR:>(double,double):<=(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE |==> value <= Integer.MAX_VALUE
275:ROR:>(double,double):==(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE |==> value == Integer.MAX_VALUE
276:ROR:>(double,double):>=(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE |==> value >= Integer.MAX_VALUE
277:ROR:>(double,double):FALSE(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE |==> false
278:ROR:>(double,double):TRUE(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE |==> true
279:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE || Double.isNaN(value) |==> value > Integer.MAX_VALUE != Double.isNaN(value)
280:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE || Double.isNaN(value) |==> value > Integer.MAX_VALUE && Double.isNaN(value)
281:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE || Double.isNaN(value) |==> value > Integer.MAX_VALUE == Double.isNaN(value)
282:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE || Double.isNaN(value) |==> false
283:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE || Double.isNaN(value) |==> value > Integer.MAX_VALUE
284:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE || Double.isNaN(value) |==> Double.isNaN(value)
285:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE || Double.isNaN(value) |==> true
286:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):262:value -= wholeNumber |==> <NO-OP>
287:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):264:0 |==> 1
288:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):264:0 |==> -1
289:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):265:1 |==> 0
290:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):265:1 |==> -1
291:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):266:1 |==> 0
292:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):266:1 |==> -1
293:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):267:0 |==> 1
294:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):267:0 |==> -1
295:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):268:0 |==> 1
296:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):268:0 |==> -1
297:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):269:0 |==> 1
298:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):269:0 |==> -1
299:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):271:0 |==> 1
300:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):271:0 |==> -1
301:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):272:1 |==> 0
302:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):272:1 |==> -1
303:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):273:0 |==> 1
304:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):273:0 |==> -1
305:AOR:-(double,double):%(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):274:value - a1 |==> value % a1
306:AOR:-(double,double):*(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):274:value - a1 |==> value * a1
307:AOR:-(double,double):+(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):274:value - a1 |==> value + a1
308:AOR:-(double,double):/(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):274:value - a1 |==> value / a1
309:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):275:0 |==> 1
310:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):275:0 |==> -1
311:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):278:1 |==> 0
312:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):278:1 |==> -1
313:AOR:/(double,double):%(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):282:x1 / y1 |==> x1 % y1
314:AOR:/(double,double):*(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):282:x1 / y1 |==> x1 * y1
315:AOR:/(double,double):+(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):282:x1 / y1 |==> x1 + y1
316:AOR:/(double,double):-(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):282:x1 / y1 |==> x1 - y1
317:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):282:a2 = (int)(x1 / y1) |==> <NO-OP>
318:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):283:x2 = y1 |==> <NO-OP>
319:AOR:*(double,double):%(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:a2 * y1 |==> a2 % y1
320:AOR:*(double,double):+(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:a2 * y1 |==> a2 + y1
321:AOR:*(double,double):-(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:a2 * y1 |==> a2 - y1
322:AOR:*(double,double):/(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:a2 * y1 |==> a2 / y1
323:AOR:-(double,double):%(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:x1 - a2 * y1 |==> x1 % (a2 * y1)
324:AOR:-(double,double):*(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:x1 - a2 * y1 |==> x1 * (a2 * y1)
325:AOR:-(double,double):+(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:x1 - a2 * y1 |==> x1 + a2 * y1
326:AOR:-(double,double):/(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:x1 - a2 * y1 |==> x1 / (a2 * y1)
327:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):284:y2 = x1 - a2 * y1 |==> <NO-OP>
328:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 |==> a1 % numer1
329:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 |==> a1 + numer1
330:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 |==> a1 - numer1
331:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 |==> a1 / numer1
332:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 + numer0 |==> a1 * numer1 % numer0
333:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 + numer0 |==> a1 * numer1 * numer0
334:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 + numer0 |==> a1 * numer1 - numer0
335:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 + numer0 |==> a1 * numer1 / numer0
336:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):285:numer2 = a1 * numer1 + numer0 |==> <NO-OP>
337:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 |==> a1 % denom1
338:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 |==> a1 + denom1
339:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 |==> a1 - denom1
340:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 |==> a1 / denom1
341:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 + denom0 |==> a1 * denom1 % denom0
342:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 + denom0 |==> a1 * denom1 * denom0
343:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 + denom0 |==> a1 * denom1 - denom0
344:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 + denom0 |==> a1 * denom1 / denom0
345:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):286:denom2 = a1 * denom1 + denom0 |==> <NO-OP>
346:AOR:/(double,double):%(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):287:(double)numer2 / (double)denom2 |==> (double)numer2 % (double)denom2
347:AOR:/(double,double):*(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):287:(double)numer2 / (double)denom2 |==> (double)numer2 * (double)denom2
348:AOR:/(double,double):+(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):287:(double)numer2 / (double)denom2 |==> (double)numer2 + (double)denom2
349:AOR:/(double,double):-(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):287:(double)numer2 / (double)denom2 |==> (double)numer2 - (double)denom2
350:AOR:-(double,double):%(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):288:value - fraction |==> value % fraction
351:AOR:-(double,double):*(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):288:value - fraction |==> value * fraction
352:AOR:-(double,double):+(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):288:value - fraction |==> value + fraction
353:AOR:-(double,double):/(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):288:value - fraction |==> value / fraction
354:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):288:delta2 = Math.abs(value - fraction) |==> <NO-OP>
355:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):290:a1 = a2 |==> <NO-OP>
356:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):291:x1 = x2 |==> <NO-OP>
357:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):292:y1 = y2 |==> <NO-OP>
358:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):293:numer0 = numer1 |==> <NO-OP>
359:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):294:denom0 = denom1 |==> <NO-OP>
360:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):295:numer1 = numer2 |==> <NO-OP>
361:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):296:denom1 = denom2 |==> <NO-OP>
362:STD:<INC>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):297:i++ |==> <NO-OP>
363:ROR:>(double,double):!=(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):299:delta1 > delta2 |==> delta1 != delta2
364:ROR:>(double,double):<(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):299:delta1 > delta2 |==> delta1 < delta2
365:ROR:>(double,double):<=(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):299:delta1 > delta2 |==> delta1 <= delta2
366:ROR:>(double,double):==(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):299:delta1 > delta2 |==> delta1 == delta2
367:ROR:>(double,double):>=(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):299:delta1 > delta2 |==> delta1 >= delta2
368:ROR:>(double,double):FALSE(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):299:delta1 > delta2 |==> false
369:ROR:>(double,double):TRUE(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):299:delta1 > delta2 |==> true
370:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):299:10000 |==> 0
371:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):299:10000 |==> -10000
372:ROR:<=(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 <= 10000 |==> denom2 != 10000
373:ROR:<=(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 <= 10000 |==> denom2 < 10000
374:ROR:<=(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 <= 10000 |==> denom2 == 10000
375:ROR:<=(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 <= 10000 |==> denom2 > 10000
376:ROR:<=(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 <= 10000 |==> denom2 >= 10000
377:ROR:<=(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 <= 10000 |==> false
378:ROR:<=(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 <= 10000 |==> true
379:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) |==> (delta1 > delta2) != (denom2 <= 10000)
380:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) |==> (delta1 > delta2) == (denom2 <= 10000)
381:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) |==> false
382:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) |==> (delta1 > delta2)
383:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) |==> (denom2 <= 10000)
384:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) |==> true
385:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) |==> (delta1 > delta2) || (denom2 <= 10000)
386:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):299:0 |==> 1
387:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):299:0 |==> -1
388:ROR:>(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 > 0 |==> denom2 != 0
389:ROR:>(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 > 0 |==> denom2 < 0
390:ROR:>(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 > 0 |==> denom2 <= 0
391:ROR:>(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 > 0 |==> denom2 == 0
392:ROR:>(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 > 0 |==> denom2 >= 0
393:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 > 0 |==> false
394:ROR:>(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 > 0 |==> true
395:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> ((delta1 > delta2) && (denom2 <= 10000)) != (denom2 > 0)
396:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> ((delta1 > delta2) && (denom2 <= 10000)) == (denom2 > 0)
397:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> false
398:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> (delta1 > delta2) && (denom2 <= 10000)
399:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> (denom2 > 0)
400:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> true
401:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> (delta1 > delta2) && (denom2 <= 10000) || (denom2 > 0)
402:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):299:25 |==> 0
403:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):299:25 |==> -25
404:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:i < 25 |==> i != 25
405:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:i < 25 |==> i <= 25
406:ROR:<(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:i < 25 |==> i == 25
407:ROR:<(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:i < 25 |==> i > 25
408:ROR:<(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:i < 25 |==> i >= 25
409:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:i < 25 |==> false
410:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:i < 25 |==> true
411:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> ((delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0)) != (i < 25)
412:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> ((delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0)) == (i < 25)
413:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> false
414:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> (delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0)
415:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> (i < 25)
416:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> true
417:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> (delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) || (i < 25)
418:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):300:25 |==> 0
419:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):300:25 |==> -25
420:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):300:i == 25 |==> i != 25
421:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):300:i == 25 |==> i < 25
422:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):300:i == 25 |==> i <= 25
423:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):300:i == 25 |==> i > 25
424:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):300:i == 25 |==> i >= 25
425:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):300:i == 25 |==> false
426:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):300:i == 25 |==> true
427:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:wholeNumber * denom0 |==> wholeNumber % denom0
428:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:wholeNumber * denom0 |==> wholeNumber + denom0
429:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:wholeNumber * denom0 |==> wholeNumber - denom0
430:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:wholeNumber * denom0 |==> wholeNumber / denom0
431:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:numer0 + wholeNumber * denom0 |==> numer0 % (wholeNumber * denom0)
432:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:numer0 + wholeNumber * denom0 |==> numer0 * (wholeNumber * denom0)
433:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:numer0 + wholeNumber * denom0 |==> numer0 - wholeNumber * denom0
434:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:numer0 + wholeNumber * denom0 |==> numer0 / (wholeNumber * denom0)
435:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) % sign
436:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) + sign
437:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) - sign
438:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) / sign
439:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):325:str == null |==> str != null
440:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):325:str == null |==> false
441:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):325:str == null |==> true
442:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):330:0 |==> 1
443:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):330:0 |==> -1
444:ROR:>=(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):330:pos >= 0 |==> pos != 0
445:ROR:>=(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):330:pos >= 0 |==> pos < 0
446:ROR:>=(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):330:pos >= 0 |==> pos <= 0
447:ROR:>=(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):330:pos >= 0 |==> pos == 0
448:ROR:>=(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):330:pos >= 0 |==> pos > 0
449:ROR:>=(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):330:pos >= 0 |==> false
450:ROR:>=(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):330:pos >= 0 |==> true
451:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):335:pos = str.indexOf(' ') |==> <NO-OP>
452:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):336:0 |==> 1
453:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):336:0 |==> -1
454:ROR:>(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):336:pos > 0 |==> pos != 0
455:ROR:>(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):336:pos > 0 |==> pos < 0
456:ROR:>(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):336:pos > 0 |==> pos <= 0
457:ROR:>(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):336:pos > 0 |==> pos == 0
458:ROR:>(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):336:pos > 0 |==> pos >= 0
459:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):336:pos > 0 |==> false
460:ROR:>(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):336:pos > 0 |==> true
461:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):337:0 |==> 1
462:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):337:0 |==> -1
463:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):338:1 |==> 0
464:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):338:1 |==> -1
465:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):338:pos + 1 |==> pos % 1
466:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):338:pos + 1 |==> pos * 1
467:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):338:pos + 1 |==> pos - 1
468:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):338:pos + 1 |==> pos / 1
469:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):338:str = str.substring(pos + 1) |==> <NO-OP>
470:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):339:pos = str.indexOf('/') |==> <NO-OP>
471:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):340:0 |==> 1
472:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):340:0 |==> -1
473:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):340:pos < 0 |==> pos != 0
474:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):340:pos < 0 |==> pos <= 0
475:ROR:<(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):340:pos < 0 |==> pos == 0
476:ROR:<(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):340:pos < 0 |==> pos > 0
477:ROR:<(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):340:pos < 0 |==> pos >= 0
478:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):340:pos < 0 |==> false
479:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):340:pos < 0 |==> true
480:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):343:0 |==> 1
481:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):343:0 |==> -1
482:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):344:1 |==> 0
483:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):344:1 |==> -1
484:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):344:pos + 1 |==> pos % 1
485:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):344:pos + 1 |==> pos * 1
486:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):344:pos + 1 |==> pos - 1
487:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):344:pos + 1 |==> pos / 1
488:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):350:pos = str.indexOf('/') |==> <NO-OP>
489:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):351:0 |==> 1
490:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):351:0 |==> -1
491:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):351:pos < 0 |==> pos != 0
492:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):351:pos < 0 |==> pos <= 0
493:ROR:<(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):351:pos < 0 |==> pos == 0
494:ROR:<(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):351:pos < 0 |==> pos > 0
495:ROR:<(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):351:pos < 0 |==> pos >= 0
496:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):351:pos < 0 |==> false
497:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):351:pos < 0 |==> true
498:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):353:1 |==> 0
499:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):353:1 |==> -1
500:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):355:0 |==> 1
501:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):355:0 |==> -1
502:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):356:1 |==> 0
503:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):356:1 |==> -1
504:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):356:pos + 1 |==> pos % 1
505:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):356:pos + 1 |==> pos * 1
506:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):356:pos + 1 |==> pos - 1
507:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):356:pos + 1 |==> pos / 1
508:AOR:%(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getProperNumerator():397:numerator % denominator |==> numerator * denominator
509:AOR:%(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@getProperNumerator():397:numerator % denominator |==> numerator + denominator
510:AOR:%(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getProperNumerator():397:numerator % denominator |==> numerator - denominator
511:AOR:%(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getProperNumerator():397:numerator % denominator |==> numerator / denominator
512:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getProperWhole():412:numerator / denominator |==> numerator % denominator
513:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getProperWhole():412:numerator / denominator |==> numerator * denominator
514:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@getProperWhole():412:numerator / denominator |==> numerator + denominator
515:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getProperWhole():412:numerator / denominator |==> numerator - denominator
516:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@intValue():426:numerator / denominator |==> numerator % denominator
517:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@intValue():426:numerator / denominator |==> numerator * denominator
518:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@intValue():426:numerator / denominator |==> numerator + denominator
519:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@intValue():426:numerator / denominator |==> numerator - denominator
520:AOR:/(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@longValue():437:(long)numerator / denominator |==> (long)numerator % denominator
521:AOR:/(long,long):*(long,long):org.apache.commons.lang3.math.Fraction@longValue():437:(long)numerator / denominator |==> (long)numerator * denominator
522:AOR:/(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@longValue():437:(long)numerator / denominator |==> (long)numerator + denominator
523:AOR:/(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@longValue():437:(long)numerator / denominator |==> (long)numerator - denominator
524:AOR:/(float,float):%(float,float):org.apache.commons.lang3.math.Fraction@floatValue():448:((float)numerator) / ((float)denominator) |==> ((float)numerator) % ((float)denominator)
525:AOR:/(float,float):*(float,float):org.apache.commons.lang3.math.Fraction@floatValue():448:((float)numerator) / ((float)denominator) |==> ((float)numerator) * ((float)denominator)
526:AOR:/(float,float):+(float,float):org.apache.commons.lang3.math.Fraction@floatValue():448:((float)numerator) / ((float)denominator) |==> ((float)numerator) + ((float)denominator)
527:AOR:/(float,float):-(float,float):org.apache.commons.lang3.math.Fraction@floatValue():448:((float)numerator) / ((float)denominator) |==> ((float)numerator) - ((float)denominator)
528:AOR:/(double,double):%(double,double):org.apache.commons.lang3.math.Fraction@doubleValue():459:((double)numerator) / ((double)denominator) |==> ((double)numerator) % ((double)denominator)
529:AOR:/(double,double):*(double,double):org.apache.commons.lang3.math.Fraction@doubleValue():459:((double)numerator) / ((double)denominator) |==> ((double)numerator) * ((double)denominator)
530:AOR:/(double,double):+(double,double):org.apache.commons.lang3.math.Fraction@doubleValue():459:((double)numerator) / ((double)denominator) |==> ((double)numerator) + ((double)denominator)
531:AOR:/(double,double):-(double,double):org.apache.commons.lang3.math.Fraction@doubleValue():459:((double)numerator) / ((double)denominator) |==> ((double)numerator) - ((double)denominator)
532:LVR:0:POS:org.apache.commons.lang3.math.Fraction@reduce():475:0 |==> 1
533:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@reduce():475:0 |==> -1
534:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@reduce():475:numerator == 0 |==> numerator != 0
535:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@reduce():475:numerator == 0 |==> numerator < 0
536:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@reduce():475:numerator == 0 |==> numerator <= 0
537:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@reduce():475:numerator == 0 |==> numerator > 0
538:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@reduce():475:numerator == 0 |==> numerator >= 0
539:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@reduce():475:numerator == 0 |==> false
540:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@reduce():475:numerator == 0 |==> true
541:COR:equals(ZERO):TRUE:org.apache.commons.lang3.math.Fraction@reduce():476:equals(ZERO) |==> false
542:COR:equals(ZERO):FALSE:org.apache.commons.lang3.math.Fraction@reduce():476:equals(ZERO) |==> true
543:LVR:POS:0:org.apache.commons.lang3.math.Fraction@reduce():479:1 |==> 0
544:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@reduce():479:1 |==> -1
545:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@reduce():479:gcd == 1 |==> gcd != 1
546:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@reduce():479:gcd == 1 |==> gcd < 1
547:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@reduce():479:gcd == 1 |==> gcd <= 1
548:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@reduce():479:gcd == 1 |==> gcd > 1
549:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@reduce():479:gcd == 1 |==> gcd >= 1
550:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@reduce():479:gcd == 1 |==> false
551:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@reduce():479:gcd == 1 |==> true
552:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:numerator / gcd |==> numerator % gcd
553:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:numerator / gcd |==> numerator * gcd
554:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:numerator / gcd |==> numerator + gcd
555:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:numerator / gcd |==> numerator - gcd
556:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:denominator / gcd |==> denominator % gcd
557:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:denominator / gcd |==> denominator * gcd
558:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:denominator / gcd |==> denominator + gcd
559:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:denominator / gcd |==> denominator - gcd
560:LVR:0:POS:org.apache.commons.lang3.math.Fraction@invert():495:0 |==> 1
561:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@invert():495:0 |==> -1
562:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@invert():495:numerator == 0 |==> numerator != 0
563:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@invert():495:numerator == 0 |==> numerator < 0
564:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@invert():495:numerator == 0 |==> numerator <= 0
565:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@invert():495:numerator == 0 |==> numerator > 0
566:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@invert():495:numerator == 0 |==> numerator >= 0
567:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@invert():495:numerator == 0 |==> false
568:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@invert():495:numerator == 0 |==> true
569:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@invert():498:numerator == Integer.MIN_VALUE |==> numerator != Integer.MIN_VALUE
570:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@invert():498:numerator == Integer.MIN_VALUE |==> numerator < Integer.MIN_VALUE
571:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@invert():498:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
572:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@invert():498:numerator == Integer.MIN_VALUE |==> numerator > Integer.MIN_VALUE
573:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@invert():498:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
574:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@invert():498:numerator == Integer.MIN_VALUE |==> false
575:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@invert():498:numerator == Integer.MIN_VALUE |==> true
576:LVR:0:POS:org.apache.commons.lang3.math.Fraction@invert():501:0 |==> 1
577:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@invert():501:0 |==> -1
578:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@invert():501:numerator < 0 |==> numerator != 0
579:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@invert():501:numerator < 0 |==> numerator <= 0
580:ROR:<(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@invert():501:numerator < 0 |==> numerator == 0
581:ROR:<(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@invert():501:numerator < 0 |==> numerator > 0
582:ROR:<(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@invert():501:numerator < 0 |==> numerator >= 0
583:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@invert():501:numerator < 0 |==> false
584:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@invert():501:numerator < 0 |==> true
585:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@invert():502:-denominator |==> +denominator
586:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@invert():502:-denominator |==> ~denominator
587:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@invert():502:-numerator |==> +numerator
588:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@invert():502:-numerator |==> ~numerator
589:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@negate():517:numerator == Integer.MIN_VALUE |==> numerator != Integer.MIN_VALUE
590:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@negate():517:numerator == Integer.MIN_VALUE |==> numerator < Integer.MIN_VALUE
591:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@negate():517:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
592:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@negate():517:numerator == Integer.MIN_VALUE |==> numerator > Integer.MIN_VALUE
593:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@negate():517:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
594:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@negate():517:numerator == Integer.MIN_VALUE |==> false
595:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@negate():517:numerator == Integer.MIN_VALUE |==> true
596:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@negate():520:-numerator |==> +numerator
597:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@negate():520:-numerator |==> ~numerator
598:LVR:0:POS:org.apache.commons.lang3.math.Fraction@abs():533:0 |==> 1
599:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@abs():533:0 |==> -1
600:ROR:>=(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@abs():533:numerator >= 0 |==> numerator != 0
601:ROR:>=(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@abs():533:numerator >= 0 |==> numerator < 0
602:ROR:>=(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@abs():533:numerator >= 0 |==> numerator <= 0
603:ROR:>=(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@abs():533:numerator >= 0 |==> numerator == 0
604:ROR:>=(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@abs():533:numerator >= 0 |==> numerator > 0
605:ROR:>=(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@abs():533:numerator >= 0 |==> false
606:ROR:>=(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@abs():533:numerator >= 0 |==> true
607:LVR:POS:0:org.apache.commons.lang3.math.Fraction@pow(int):552:1 |==> 0
608:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@pow(int):552:1 |==> -1
609:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):552:power == 1 |==> power != 1
610:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@pow(int):552:power == 1 |==> power < 1
611:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):552:power == 1 |==> power <= 1
612:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@pow(int):552:power == 1 |==> power > 1
613:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):552:power == 1 |==> power >= 1
614:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@pow(int):552:power == 1 |==> false
615:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@pow(int):552:power == 1 |==> true
616:LVR:0:POS:org.apache.commons.lang3.math.Fraction@pow(int):554:0 |==> 1
617:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@pow(int):554:0 |==> -1
618:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):554:power == 0 |==> power != 0
619:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@pow(int):554:power == 0 |==> power < 0
620:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):554:power == 0 |==> power <= 0
621:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@pow(int):554:power == 0 |==> power > 0
622:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):554:power == 0 |==> power >= 0
623:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@pow(int):554:power == 0 |==> false
624:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@pow(int):554:power == 0 |==> true
625:LVR:0:POS:org.apache.commons.lang3.math.Fraction@pow(int):556:0 |==> 1
626:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@pow(int):556:0 |==> -1
627:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):556:power < 0 |==> power != 0
628:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):556:power < 0 |==> power <= 0
629:ROR:<(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@pow(int):556:power < 0 |==> power == 0
630:ROR:<(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@pow(int):556:power < 0 |==> power > 0
631:ROR:<(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):556:power < 0 |==> power >= 0
632:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@pow(int):556:power < 0 |==> false
633:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@pow(int):556:power < 0 |==> true
634:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):557:power == Integer.MIN_VALUE |==> power != Integer.MIN_VALUE
635:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@pow(int):557:power == Integer.MIN_VALUE |==> power < Integer.MIN_VALUE
636:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):557:power == Integer.MIN_VALUE |==> power <= Integer.MIN_VALUE
637:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@pow(int):557:power == Integer.MIN_VALUE |==> power > Integer.MIN_VALUE
638:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):557:power == Integer.MIN_VALUE |==> power >= Integer.MIN_VALUE
639:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@pow(int):557:power == Integer.MIN_VALUE |==> false
640:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@pow(int):557:power == Integer.MIN_VALUE |==> true
641:LVR:POS:0:org.apache.commons.lang3.math.Fraction@pow(int):558:2 |==> 0
642:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@pow(int):558:2 |==> -2
643:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@pow(int):558:-(power / 2) |==> +(power / 2)
644:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@pow(int):558:-(power / 2) |==> ~(power / 2)
645:LVR:POS:0:org.apache.commons.lang3.math.Fraction@pow(int):558:2 |==> 0
646:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@pow(int):558:2 |==> -2
647:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@pow(int):558:power / 2 |==> power % 2
648:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@pow(int):558:power / 2 |==> power * 2
649:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@pow(int):558:power / 2 |==> power + 2
650:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@pow(int):558:power / 2 |==> power - 2
651:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@pow(int):560:-power |==> +power
652:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@pow(int):560:-power |==> ~power
653:LVR:POS:0:org.apache.commons.lang3.math.Fraction@pow(int):563:2 |==> 0
654:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@pow(int):563:2 |==> -2
655:AOR:%(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:power % 2 |==> power * 2
656:AOR:%(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:power % 2 |==> power + 2
657:AOR:%(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:power % 2 |==> power - 2
658:AOR:%(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:power % 2 |==> power / 2
659:LVR:0:POS:org.apache.commons.lang3.math.Fraction@pow(int):563:0 |==> 1
660:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@pow(int):563:0 |==> -1
661:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:(power % 2) == 0 |==> (power % 2) != 0
662:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:(power % 2) == 0 |==> (power % 2) < 0
663:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:(power % 2) == 0 |==> (power % 2) <= 0
664:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:(power % 2) == 0 |==> (power % 2) > 0
665:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:(power % 2) == 0 |==> (power % 2) >= 0
666:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:(power % 2) == 0 |==> false
667:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:(power % 2) == 0 |==> true
668:LVR:POS:0:org.apache.commons.lang3.math.Fraction@pow(int):564:2 |==> 0
669:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@pow(int):564:2 |==> -2
670:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@pow(int):564:power / 2 |==> power % 2
671:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@pow(int):564:power / 2 |==> power * 2
672:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@pow(int):564:power / 2 |==> power + 2
673:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@pow(int):564:power / 2 |==> power - 2
674:LVR:POS:0:org.apache.commons.lang3.math.Fraction@pow(int):566:2 |==> 0
675:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@pow(int):566:2 |==> -2
676:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@pow(int):566:power / 2 |==> power % 2
677:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@pow(int):566:power / 2 |==> power * 2
678:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@pow(int):566:power / 2 |==> power + 2
679:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@pow(int):566:power / 2 |==> power - 2
680:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:0 |==> 1
681:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:0 |==> -1
682:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:u == 0 |==> u != 0
683:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:u == 0 |==> u < 0
684:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:u == 0 |==> u <= 0
685:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:u == 0 |==> u > 0
686:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:u == 0 |==> u >= 0
687:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:u == 0 |==> false
688:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:u == 0 |==> true
689:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:0 |==> 1
690:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:0 |==> -1
691:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:v == 0 |==> v != 0
692:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:v == 0 |==> v < 0
693:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:v == 0 |==> v <= 0
694:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:v == 0 |==> v > 0
695:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:v == 0 |==> v >= 0
696:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:v == 0 |==> false
697:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:v == 0 |==> true
698:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:(u == 0) || (v == 0) |==> (u == 0) != (v == 0)
699:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:(u == 0) || (v == 0) |==> (u == 0) && (v == 0)
700:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:(u == 0) || (v == 0) |==> (u == 0) == (v == 0)
701:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:(u == 0) || (v == 0) |==> false
702:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:(u == 0) || (v == 0) |==> (u == 0)
703:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:(u == 0) || (v == 0) |==> (v == 0)
704:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:(u == 0) || (v == 0) |==> true
705:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:u == Integer.MIN_VALUE |==> u != Integer.MIN_VALUE
706:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:u == Integer.MIN_VALUE |==> u < Integer.MIN_VALUE
707:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:u == Integer.MIN_VALUE |==> u <= Integer.MIN_VALUE
708:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:u == Integer.MIN_VALUE |==> u > Integer.MIN_VALUE
709:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:u == Integer.MIN_VALUE |==> u >= Integer.MIN_VALUE
710:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:u == Integer.MIN_VALUE |==> false
711:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:u == Integer.MIN_VALUE |==> true
712:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:v == Integer.MIN_VALUE |==> v != Integer.MIN_VALUE
713:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:v == Integer.MIN_VALUE |==> v < Integer.MIN_VALUE
714:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:v == Integer.MIN_VALUE |==> v <= Integer.MIN_VALUE
715:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:v == Integer.MIN_VALUE |==> v > Integer.MIN_VALUE
716:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:v == Integer.MIN_VALUE |==> v >= Integer.MIN_VALUE
717:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:v == Integer.MIN_VALUE |==> false
718:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:v == Integer.MIN_VALUE |==> true
719:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:(u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE) |==> (u == Integer.MIN_VALUE) != (v == Integer.MIN_VALUE)
720:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:(u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE) |==> (u == Integer.MIN_VALUE) && (v == Integer.MIN_VALUE)
721:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:(u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE) |==> (u == Integer.MIN_VALUE) == (v == Integer.MIN_VALUE)
722:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:(u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE) |==> false
723:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:(u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE) |==> (u == Integer.MIN_VALUE)
724:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:(u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE) |==> (v == Integer.MIN_VALUE)
725:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:(u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE) |==> true
726:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):587:Math.abs(u) + Math.abs(v) |==> Math.abs(u) % Math.abs(v)
727:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):587:Math.abs(u) + Math.abs(v) |==> Math.abs(u) * Math.abs(v)
728:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):587:Math.abs(u) + Math.abs(v) |==> Math.abs(u) - Math.abs(v)
729:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):587:Math.abs(u) + Math.abs(v) |==> Math.abs(u) / Math.abs(v)
730:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:1 |==> 0
731:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:1 |==> -1
732:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 |==> Math.abs(u) != 1
733:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 |==> Math.abs(u) < 1
734:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 |==> Math.abs(u) <= 1
735:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 |==> Math.abs(u) > 1
736:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 |==> Math.abs(u) >= 1
737:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 |==> false
738:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 |==> true
739:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:1 |==> 0
740:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:1 |==> -1
741:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(v) == 1 |==> Math.abs(v) != 1
742:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(v) == 1 |==> Math.abs(v) < 1
743:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(v) == 1 |==> Math.abs(v) <= 1
744:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(v) == 1 |==> Math.abs(v) > 1
745:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(v) == 1 |==> Math.abs(v) >= 1
746:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(v) == 1 |==> false
747:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(v) == 1 |==> true
748:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 || Math.abs(v) == 1 |==> Math.abs(u) == 1 != (Math.abs(v) == 1)
749:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 || Math.abs(v) == 1 |==> Math.abs(u) == 1 && Math.abs(v) == 1
750:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 || Math.abs(v) == 1 |==> Math.abs(u) == 1 == (Math.abs(v) == 1)
751:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 || Math.abs(v) == 1 |==> false
752:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 || Math.abs(v) == 1 |==> Math.abs(u) == 1
753:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 || Math.abs(v) == 1 |==> Math.abs(v) == 1
754:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 || Math.abs(v) == 1 |==> true
755:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):591:1 |==> 0
756:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):591:1 |==> -1
757:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:0 |==> 1
758:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:0 |==> -1
759:ROR:>(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:u > 0 |==> u != 0
760:ROR:>(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:u > 0 |==> u < 0
761:ROR:>(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:u > 0 |==> u <= 0
762:ROR:>(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:u > 0 |==> u == 0
763:ROR:>(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:u > 0 |==> u >= 0
764:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:u > 0 |==> false
765:ROR:>(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:u > 0 |==> true
766:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:-u |==> +u
767:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:-u |==> ~u
768:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:u = -u |==> <NO-OP>
769:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:0 |==> 1
770:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:0 |==> -1
771:ROR:>(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:v > 0 |==> v != 0
772:ROR:>(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:v > 0 |==> v < 0
773:ROR:>(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:v > 0 |==> v <= 0
774:ROR:>(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:v > 0 |==> v == 0
775:ROR:>(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:v > 0 |==> v >= 0
776:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:v > 0 |==> false
777:ROR:>(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:v > 0 |==> true
778:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:-v |==> +v
779:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:-v |==> ~v
780:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:v = -v |==> <NO-OP>
781:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):600:0 |==> 1
782:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):600:0 |==> -1
783:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:1 |==> 0
784:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:1 |==> -1
785:LOR:&(int,int):^(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:u & 1 |==> u ^ 1
786:LOR:&(int,int):|(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:u & 1 |==> u | 1
787:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:0 |==> 1
788:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:0 |==> -1
789:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 |==> (u & 1) != 0
790:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 |==> (u & 1) < 0
791:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 |==> (u & 1) <= 0
792:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 |==> (u & 1) > 0
793:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 |==> (u & 1) >= 0
794:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 |==> false
795:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 |==> true
796:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:1 |==> 0
797:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:1 |==> -1
798:LOR:&(int,int):^(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:v & 1 |==> v ^ 1
799:LOR:&(int,int):|(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:v & 1 |==> v | 1
800:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:0 |==> 1
801:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:0 |==> -1
802:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(v & 1) == 0 |==> (v & 1) != 0
803:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(v & 1) == 0 |==> (v & 1) < 0
804:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(v & 1) == 0 |==> (v & 1) <= 0
805:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(v & 1) == 0 |==> (v & 1) > 0
806:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(v & 1) == 0 |==> (v & 1) >= 0
807:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(v & 1) == 0 |==> false
808:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(v & 1) == 0 |==> true
809:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 |==> (u & 1) == 0 != ((v & 1) == 0)
810:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 |==> (u & 1) == 0 == ((v & 1) == 0)
811:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 |==> false
812:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 |==> (u & 1) == 0
813:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 |==> (v & 1) == 0
814:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 |==> true
815:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 |==> (u & 1) == 0 || (v & 1) == 0
816:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:31 |==> 0
817:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:31 |==> -31
818:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:k < 31 |==> k != 31
819:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:k < 31 |==> k <= 31
820:ROR:<(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:k < 31 |==> k == 31
821:ROR:<(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:k < 31 |==> k > 31
822:ROR:<(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:k < 31 |==> k >= 31
823:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:k < 31 |==> false
824:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:k < 31 |==> true
825:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> ((u & 1) == 0 && (v & 1) == 0) != k < 31
826:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> ((u & 1) == 0 && (v & 1) == 0) == k < 31
827:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> false
828:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> (u & 1) == 0 && (v & 1) == 0
829:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> k < 31
830:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> true
831:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> (u & 1) == 0 && (v & 1) == 0 || k < 31
832:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):602:2 |==> 0
833:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):602:2 |==> -2
834:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):602:u /= 2 |==> <NO-OP>
835:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):602:2 |==> 0
836:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):602:2 |==> -2
837:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):602:v /= 2 |==> <NO-OP>
838:STD:<INC>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):602:k++ |==> <NO-OP>
839:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):604:31 |==> 0
840:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):604:31 |==> -31
841:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):604:k == 31 |==> k != 31
842:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):604:k == 31 |==> k < 31
843:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):604:k == 31 |==> k <= 31
844:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):604:k == 31 |==> k > 31
845:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):604:k == 31 |==> k >= 31
846:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):604:k == 31 |==> false
847:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):604:k == 31 |==> true
848:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:1 |==> 0
849:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:1 |==> -1
850:LOR:&(int,int):^(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:u & 1 |==> u ^ 1
851:LOR:&(int,int):|(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:u & 1 |==> u | 1
852:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:1 |==> 0
853:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:1 |==> -1
854:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:(u & 1) == 1 |==> (u & 1) != 1
855:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:(u & 1) == 1 |==> (u & 1) < 1
856:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:(u & 1) == 1 |==> (u & 1) <= 1
857:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:(u & 1) == 1 |==> (u & 1) > 1
858:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:(u & 1) == 1 |==> (u & 1) >= 1
859:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:(u & 1) == 1 |==> false
860:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:(u & 1) == 1 |==> true
861:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:-(u / 2) |==> +(u / 2)
862:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:-(u / 2) |==> ~(u / 2)
863:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:2 |==> 0
864:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:2 |==> -2
865:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:u / 2 |==> u % 2
866:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:u / 2 |==> u * 2
867:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:u / 2 |==> u + 2
868:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:u / 2 |==> u - 2
869:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:1 |==> 0
870:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:1 |==> -1
871:LOR:&(int,int):^(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:t & 1 |==> t ^ 1
872:LOR:&(int,int):|(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:t & 1 |==> t | 1
873:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:0 |==> 1
874:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:0 |==> -1
875:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:(t & 1) == 0 |==> (t & 1) != 0
876:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:(t & 1) == 0 |==> (t & 1) < 0
877:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:(t & 1) == 0 |==> (t & 1) <= 0
878:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:(t & 1) == 0 |==> (t & 1) > 0
879:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:(t & 1) == 0 |==> (t & 1) >= 0
880:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:(t & 1) == 0 |==> false
881:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:(t & 1) == 0 |==> true
882:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):616:2 |==> 0
883:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):616:2 |==> -2
884:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):616:t /= 2 |==> <NO-OP>
885:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):619:0 |==> 1
886:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):619:0 |==> -1
887:ROR:>(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):619:t > 0 |==> t != 0
888:ROR:>(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):619:t > 0 |==> t < 0
889:ROR:>(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):619:t > 0 |==> t <= 0
890:ROR:>(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):619:t > 0 |==> t == 0
891:ROR:>(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):619:t > 0 |==> t >= 0
892:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):619:t > 0 |==> false
893:ROR:>(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):619:t > 0 |==> true
894:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):620:-t |==> +t
895:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):620:-t |==> ~t
896:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):620:u = -t |==> <NO-OP>
897:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):622:v = t |==> <NO-OP>
898:AOR:-(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:v - u |==> v % u
899:AOR:-(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:v - u |==> v * u
900:AOR:-(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:v - u |==> v + u
901:AOR:-(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:v - u |==> v / u
902:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:2 |==> 0
903:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:2 |==> -2
904:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:(v - u) / 2 |==> (v - u) % 2
905:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:(v - u) / 2 |==> (v - u) * 2
906:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:(v - u) / 2 |==> (v - u) + 2
907:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:(v - u) / 2 |==> (v - u) - 2
908:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:t = (v - u) / 2 |==> <NO-OP>
909:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):628:0 |==> 1
910:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):628:0 |==> -1
911:ROR:!=(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):628:t != 0 |==> t < 0
912:ROR:!=(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):628:t != 0 |==> t <= 0
913:ROR:!=(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):628:t != 0 |==> t == 0
914:ROR:!=(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):628:t != 0 |==> t > 0
915:ROR:!=(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):628:t != 0 |==> t >= 0
916:ROR:!=(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):628:t != 0 |==> false
917:ROR:!=(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):628:t != 0 |==> true
918:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:-u |==> +u
919:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:-u |==> ~u
920:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:1 |==> 0
921:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:1 |==> -1
922:SOR:<<(int,int):>>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:1 << k |==> 1 >> k
923:SOR:<<(int,int):>>>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:1 << k |==> 1 >>> k
924:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:-u * (1 << k) |==> -u % (1 << k)
925:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:-u * (1 << k) |==> -u + (1 << k)
926:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:-u * (1 << k) |==> -u - (1 << k)
927:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:-u * (1 << k) |==> -u / (1 << k)
928:AOR:*(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):645:((long)x) * ((long)y) |==> ((long)x) % ((long)y)
929:AOR:*(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):645:((long)x) * ((long)y) |==> ((long)x) + ((long)y)
930:AOR:*(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):645:((long)x) * ((long)y) |==> ((long)x) - ((long)y)
931:AOR:*(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):645:((long)x) * ((long)y) |==> ((long)x) / ((long)y)
932:ROR:<(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE |==> m != Integer.MIN_VALUE
933:ROR:<(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE |==> m <= Integer.MIN_VALUE
934:ROR:<(long,long):==(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE |==> m == Integer.MIN_VALUE
935:ROR:<(long,long):>(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE |==> m > Integer.MIN_VALUE
936:ROR:<(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE |==> m >= Integer.MIN_VALUE
937:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE |==> false
938:ROR:<(long,long):TRUE(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE |==> true
939:ROR:>(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):647:m > Integer.MAX_VALUE |==> m != Integer.MAX_VALUE
940:ROR:>(long,long):<(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):647:m > Integer.MAX_VALUE |==> m < Integer.MAX_VALUE
941:ROR:>(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):647:m > Integer.MAX_VALUE |==> m <= Integer.MAX_VALUE
942:ROR:>(long,long):==(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):647:m > Integer.MAX_VALUE |==> m == Integer.MAX_VALUE
943:ROR:>(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):647:m > Integer.MAX_VALUE |==> m >= Integer.MAX_VALUE
944:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):647:m > Integer.MAX_VALUE |==> false
945:ROR:>(long,long):TRUE(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):647:m > Integer.MAX_VALUE |==> true
946:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m < Integer.MIN_VALUE != m > Integer.MAX_VALUE
947:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m < Integer.MIN_VALUE && m > Integer.MAX_VALUE
948:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m < Integer.MIN_VALUE == m > Integer.MAX_VALUE
949:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> false
950:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m < Integer.MIN_VALUE
951:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):647:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m > Integer.MAX_VALUE
952:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> true
953:AOR:*(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):664:((long)x) * ((long)y) |==> ((long)x) % ((long)y)
954:AOR:*(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):664:((long)x) * ((long)y) |==> ((long)x) + ((long)y)
955:AOR:*(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):664:((long)x) * ((long)y) |==> ((long)x) - ((long)y)
956:AOR:*(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):664:((long)x) * ((long)y) |==> ((long)x) / ((long)y)
957:ROR:>(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):665:m > Integer.MAX_VALUE |==> m != Integer.MAX_VALUE
958:ROR:>(long,long):<(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):665:m > Integer.MAX_VALUE |==> m < Integer.MAX_VALUE
959:ROR:>(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):665:m > Integer.MAX_VALUE |==> m <= Integer.MAX_VALUE
960:ROR:>(long,long):==(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):665:m > Integer.MAX_VALUE |==> m == Integer.MAX_VALUE
961:ROR:>(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):665:m > Integer.MAX_VALUE |==> m >= Integer.MAX_VALUE
962:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):665:m > Integer.MAX_VALUE |==> false
963:ROR:>(long,long):TRUE(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):665:m > Integer.MAX_VALUE |==> true
964:AOR:+(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):681:(long)x + (long)y |==> (long)x % (long)y
965:AOR:+(long,long):*(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):681:(long)x + (long)y |==> (long)x * (long)y
966:AOR:+(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):681:(long)x + (long)y |==> (long)x - (long)y
967:AOR:+(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):681:(long)x + (long)y |==> (long)x / (long)y
968:ROR:<(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE |==> s != Integer.MIN_VALUE
969:ROR:<(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE |==> s <= Integer.MIN_VALUE
970:ROR:<(long,long):==(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE |==> s == Integer.MIN_VALUE
971:ROR:<(long,long):>(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE |==> s > Integer.MIN_VALUE
972:ROR:<(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE |==> s >= Integer.MIN_VALUE
973:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE |==> false
974:ROR:<(long,long):TRUE(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE |==> true
975:ROR:>(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):683:s > Integer.MAX_VALUE |==> s != Integer.MAX_VALUE
976:ROR:>(long,long):<(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):683:s > Integer.MAX_VALUE |==> s < Integer.MAX_VALUE
977:ROR:>(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):683:s > Integer.MAX_VALUE |==> s <= Integer.MAX_VALUE
978:ROR:>(long,long):==(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):683:s > Integer.MAX_VALUE |==> s == Integer.MAX_VALUE
979:ROR:>(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):683:s > Integer.MAX_VALUE |==> s >= Integer.MAX_VALUE
980:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):683:s > Integer.MAX_VALUE |==> false
981:ROR:>(long,long):TRUE(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):683:s > Integer.MAX_VALUE |==> true
982:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE != s > Integer.MAX_VALUE
983:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE && s > Integer.MAX_VALUE
984:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE == s > Integer.MAX_VALUE
985:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> false
986:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE
987:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):683:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s > Integer.MAX_VALUE
988:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> true
989:AOR:-(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):699:(long)x - (long)y |==> (long)x % (long)y
990:AOR:-(long,long):*(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):699:(long)x - (long)y |==> (long)x * (long)y
991:AOR:-(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):699:(long)x - (long)y |==> (long)x + (long)y
992:AOR:-(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):699:(long)x - (long)y |==> (long)x / (long)y
993:ROR:<(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE |==> s != Integer.MIN_VALUE
994:ROR:<(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE |==> s <= Integer.MIN_VALUE
995:ROR:<(long,long):==(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE |==> s == Integer.MIN_VALUE
996:ROR:<(long,long):>(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE |==> s > Integer.MIN_VALUE
997:ROR:<(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE |==> s >= Integer.MIN_VALUE
998:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE |==> false
999:ROR:<(long,long):TRUE(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE |==> true
1000:ROR:>(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):701:s > Integer.MAX_VALUE |==> s != Integer.MAX_VALUE
1001:ROR:>(long,long):<(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):701:s > Integer.MAX_VALUE |==> s < Integer.MAX_VALUE
1002:ROR:>(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):701:s > Integer.MAX_VALUE |==> s <= Integer.MAX_VALUE
1003:ROR:>(long,long):==(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):701:s > Integer.MAX_VALUE |==> s == Integer.MAX_VALUE
1004:ROR:>(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):701:s > Integer.MAX_VALUE |==> s >= Integer.MAX_VALUE
1005:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):701:s > Integer.MAX_VALUE |==> false
1006:ROR:>(long,long):TRUE(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):701:s > Integer.MAX_VALUE |==> true
1007:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE != s > Integer.MAX_VALUE
1008:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE && s > Integer.MAX_VALUE
1009:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE == s > Integer.MAX_VALUE
1010:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> false
1011:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE
1012:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):701:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s > Integer.MAX_VALUE
1013:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> true
1014:LVR:TRUE:FALSE:org.apache.commons.lang3.math.Fraction@add(org.apache.commons.lang3.math.Fraction):718:true |==> false
1015:LVR:FALSE:TRUE:org.apache.commons.lang3.math.Fraction@subtract(org.apache.commons.lang3.math.Fraction):732:false |==> true
1016:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):746:fraction == null |==> fraction != null
1017:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):746:fraction == null |==> false
1018:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):746:fraction == null |==> true
1019:LVR:0:POS:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):750:0 |==> 1
1020:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):750:0 |==> -1
1021:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):750:numerator == 0 |==> numerator != 0
1022:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):750:numerator == 0 |==> numerator < 0
1023:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):750:numerator == 0 |==> numerator <= 0
1024:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):750:numerator == 0 |==> numerator > 0
1025:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):750:numerator == 0 |==> numerator >= 0
1026:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):750:numerator == 0 |==> false
1027:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):750:numerator == 0 |==> true
1028:COR:isAdd:TRUE:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):751:isAdd |==> false
1029:COR:isAdd:FALSE:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):751:isAdd |==> true
1030:LVR:0:POS:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):753:0 |==> 1
1031:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):753:0 |==> -1
1032:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):753:fraction.numerator == 0 |==> fraction.numerator != 0
1033:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):753:fraction.numerator == 0 |==> fraction.numerator < 0
1034:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):753:fraction.numerator == 0 |==> fraction.numerator <= 0
1035:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):753:fraction.numerator == 0 |==> fraction.numerator > 0
1036:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):753:fraction.numerator == 0 |==> fraction.numerator >= 0
1037:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):753:fraction.numerator == 0 |==> false
1038:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):753:fraction.numerator == 0 |==> true
1039:LVR:POS:0:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):759:1 |==> 0
1040:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):759:1 |==> -1
1041:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):759:d1 == 1 |==> d1 != 1
1042:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):759:d1 == 1 |==> d1 < 1
1043:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):759:d1 == 1 |==> d1 <= 1
1044:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):759:d1 == 1 |==> d1 > 1
1045:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):759:d1 == 1 |==> d1 >= 1
1046:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):759:d1 == 1 |==> false
1047:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):759:d1 == 1 |==> true
1048:COR:isAdd:TRUE:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):764:isAdd |==> false
1049:COR:isAdd:FALSE:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):764:isAdd |==> true
1050:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):771:fraction.denominator / d1 |==> fraction.denominator % d1
1051:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):771:fraction.denominator / d1 |==> fraction.denominator * d1
1052:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):771:fraction.denominator / d1 |==> fraction.denominator + d1
1053:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):771:fraction.denominator / d1 |==> fraction.denominator - d1
1054:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):773:denominator / d1 |==> denominator % d1
1055:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):773:denominator / d1 |==> denominator * d1
1056:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):773:denominator / d1 |==> denominator + d1
1057:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):773:denominator / d1 |==> denominator - d1
1058:COR:isAdd:TRUE:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):774:isAdd |==> false
1059:COR:isAdd:FALSE:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):774:isAdd |==> true
1060:LVR:0:POS:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):778:0 |==> 1
1061:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):778:0 |==> -1
1062:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):778:tmodd1 == 0 |==> tmodd1 != 0
1063:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):778:tmodd1 == 0 |==> tmodd1 < 0
1064:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):778:tmodd1 == 0 |==> tmodd1 <= 0
1065:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):778:tmodd1 == 0 |==> tmodd1 > 0
1066:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):778:tmodd1 == 0 |==> tmodd1 >= 0
1067:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):778:tmodd1 == 0 |==> false
1068:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):778:tmodd1 == 0 |==> true
1069:LVR:POS:0:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):782:31 |==> 0
1070:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):782:31 |==> -31
1071:ROR:>(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):782:w.bitLength() > 31 |==> w.bitLength() != 31
1072:ROR:>(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):782:w.bitLength() > 31 |==> w.bitLength() < 31
1073:ROR:>(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):782:w.bitLength() > 31 |==> w.bitLength() <= 31
1074:ROR:>(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):782:w.bitLength() > 31 |==> w.bitLength() == 31
1075:ROR:>(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):782:w.bitLength() > 31 |==> w.bitLength() >= 31
1076:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):782:w.bitLength() > 31 |==> false
1077:ROR:>(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):782:w.bitLength() > 31 |==> true
1078:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:denominator / d1 |==> denominator % d1
1079:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:denominator / d1 |==> denominator * d1
1080:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:denominator / d1 |==> denominator + d1
1081:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:denominator / d1 |==> denominator - d1
1082:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:fraction.denominator / d2 |==> fraction.denominator % d2
1083:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:fraction.denominator / d2 |==> fraction.denominator * d2
1084:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:fraction.denominator / d2 |==> fraction.denominator + d2
1085:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:fraction.denominator / d2 |==> fraction.denominator - d2
1086:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):802:fraction == null |==> fraction != null
1087:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):802:fraction == null |==> false
1088:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):802:fraction == null |==> true
1089:LVR:0:POS:org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:0 |==> 1
1090:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:0 |==> -1
1091:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 |==> numerator != 0
1092:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 |==> numerator < 0
1093:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 |==> numerator <= 0
1094:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 |==> numerator > 0
1095:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 |==> numerator >= 0
1096:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 |==> false
1097:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 |==> true
1098:LVR:0:POS:org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:0 |==> 1
1099:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:0 |==> -1
1100:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:fraction.numerator == 0 |==> fraction.numerator != 0
1101:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:fraction.numerator == 0 |==> fraction.numerator < 0
1102:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:fraction.numerator == 0 |==> fraction.numerator <= 0
1103:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:fraction.numerator == 0 |==> fraction.numerator > 0
1104:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:fraction.numerator == 0 |==> fraction.numerator >= 0
1105:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:fraction.numerator == 0 |==> false
1106:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:fraction.numerator == 0 |==> true
1107:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 || fraction.numerator == 0 |==> numerator == 0 != (fraction.numerator == 0)
1108:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 || fraction.numerator == 0 |==> numerator == 0 && fraction.numerator == 0
1109:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 || fraction.numerator == 0 |==> numerator == 0 == (fraction.numerator == 0)
1110:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 || fraction.numerator == 0 |==> false
1111:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 || fraction.numerator == 0 |==> numerator == 0
1112:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 || fraction.numerator == 0 |==> fraction.numerator == 0
1113:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 || fraction.numerator == 0 |==> true
1114:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:numerator / d1 |==> numerator % d1
1115:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:numerator / d1 |==> numerator * d1
1116:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:numerator / d1 |==> numerator + d1
1117:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:numerator / d1 |==> numerator - d1
1118:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:fraction.numerator / d2 |==> fraction.numerator % d2
1119:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:fraction.numerator / d2 |==> fraction.numerator * d2
1120:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:fraction.numerator / d2 |==> fraction.numerator + d2
1121:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:fraction.numerator / d2 |==> fraction.numerator - d2
1122:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:denominator / d2 |==> denominator % d2
1123:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:denominator / d2 |==> denominator * d2
1124:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:denominator / d2 |==> denominator + d2
1125:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:denominator / d2 |==> denominator - d2
1126:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:fraction.denominator / d1 |==> fraction.denominator % d1
1127:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:fraction.denominator / d1 |==> fraction.denominator * d1
1128:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:fraction.denominator / d1 |==> fraction.denominator + d1
1129:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:fraction.denominator / d1 |==> fraction.denominator - d1
1130:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):828:fraction == null |==> fraction != null
1131:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):828:fraction == null |==> false
1132:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):828:fraction == null |==> true
1133:LVR:0:POS:org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):831:0 |==> 1
1134:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):831:0 |==> -1
1135:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):831:fraction.numerator == 0 |==> fraction.numerator != 0
1136:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):831:fraction.numerator == 0 |==> fraction.numerator < 0
1137:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):831:fraction.numerator == 0 |==> fraction.numerator <= 0
1138:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):831:fraction.numerator == 0 |==> fraction.numerator > 0
1139:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):831:fraction.numerator == 0 |==> fraction.numerator >= 0
1140:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):831:fraction.numerator == 0 |==> false
1141:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):831:fraction.numerator == 0 |==> true
1142:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):850:obj == this |==> obj != this
1143:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):850:obj == this |==> false
1144:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):850:obj == this |==> true
1145:LVR:TRUE:FALSE:org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):851:true |==> false
1146:LVR:FALSE:TRUE:org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):853:false |==> true
1147:ROR:==(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):853:obj instanceof Fraction == false |==> obj instanceof Fraction != false
1148:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):853:obj instanceof Fraction == false |==> false
1149:ROR:==(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):853:obj instanceof Fraction == false |==> obj instanceof Fraction
1150:ROR:==(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):853:obj instanceof Fraction == false |==> false
1151:ROR:==(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):853:obj instanceof Fraction == false |==> true
1152:LVR:FALSE:TRUE:org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):854:false |==> true
1153:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() |==> getNumerator() != other.getNumerator()
1154:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() |==> getNumerator() < other.getNumerator()
1155:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() |==> getNumerator() <= other.getNumerator()
1156:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() |==> getNumerator() > other.getNumerator()
1157:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() |==> getNumerator() >= other.getNumerator()
1158:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() |==> false
1159:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() |==> true
1160:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):858:getDenominator() == other.getDenominator() |==> getDenominator() != other.getDenominator()
1161:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):858:getDenominator() == other.getDenominator() |==> getDenominator() < other.getDenominator()
1162:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):858:getDenominator() == other.getDenominator() |==> getDenominator() <= other.getDenominator()
1163:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):858:getDenominator() == other.getDenominator() |==> getDenominator() > other.getDenominator()
1164:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):858:getDenominator() == other.getDenominator() |==> getDenominator() >= other.getDenominator()
1165:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):858:getDenominator() == other.getDenominator() |==> false
1166:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):858:getDenominator() == other.getDenominator() |==> true
1167:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getNumerator() == other.getNumerator() != (getDenominator() == other.getDenominator())
1168:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getNumerator() == other.getNumerator() == (getDenominator() == other.getDenominator())
1169:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> false
1170:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getNumerator() == other.getNumerator()
1171:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):858:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getDenominator() == other.getDenominator()
1172:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> true
1173:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getNumerator() == other.getNumerator() || getDenominator() == other.getDenominator()
1174:LVR:0:POS:org.apache.commons.lang3.math.Fraction@hashCode():868:0 |==> 1
1175:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@hashCode():868:0 |==> -1
1176:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@hashCode():868:hashCode == 0 |==> hashCode != 0
1177:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@hashCode():868:hashCode == 0 |==> hashCode < 0
1178:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@hashCode():868:hashCode == 0 |==> hashCode <= 0
1179:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@hashCode():868:hashCode == 0 |==> hashCode > 0
1180:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@hashCode():868:hashCode == 0 |==> hashCode >= 0
1181:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@hashCode():868:hashCode == 0 |==> false
1182:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@hashCode():868:hashCode == 0 |==> true
1183:LVR:POS:0:org.apache.commons.lang3.math.Fraction@hashCode():870:37 |==> 0
1184:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@hashCode():870:37 |==> -37
1185:LVR:POS:0:org.apache.commons.lang3.math.Fraction@hashCode():870:37 |==> 0
1186:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@hashCode():870:37 |==> -37
1187:LVR:POS:0:org.apache.commons.lang3.math.Fraction@hashCode():870:17 |==> 0
1188:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@hashCode():870:17 |==> -17
1189:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 |==> 37 % 17
1190:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 |==> 37 + 17
1191:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 |==> 37 - 17
1192:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 |==> 37 / 17
1193:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 + getNumerator() |==> 37 * 17 % getNumerator()
1194:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 + getNumerator() |==> 37 * 17 * getNumerator()
1195:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 + getNumerator() |==> 37 * 17 - getNumerator()
1196:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 + getNumerator() |==> 37 * 17 / getNumerator()
1197:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) |==> 37 % (37 * 17 + getNumerator())
1198:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) |==> 37 + (37 * 17 + getNumerator())
1199:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) |==> 37 - (37 * 17 + getNumerator())
1200:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) |==> 37 / (37 * 17 + getNumerator())
1201:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) % getDenominator()
1202:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) * getDenominator()
1203:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) - getDenominator()
1204:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) / getDenominator()
1205:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@hashCode():870:hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator() |==> <NO-OP>
1206:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):888:this == other |==> this != other
1207:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):888:this == other |==> false
1208:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):888:this == other |==> true
1209:LVR:0:POS:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):889:0 |==> 1
1210:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):889:0 |==> -1
1211:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator |==> numerator != other.numerator
1212:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator |==> numerator < other.numerator
1213:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator |==> numerator <= other.numerator
1214:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator |==> numerator > other.numerator
1215:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator |==> numerator >= other.numerator
1216:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator |==> false
1217:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator |==> true
1218:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:denominator == other.denominator |==> denominator != other.denominator
1219:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:denominator == other.denominator |==> denominator < other.denominator
1220:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:denominator == other.denominator |==> denominator <= other.denominator
1221:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:denominator == other.denominator |==> denominator > other.denominator
1222:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:denominator == other.denominator |==> denominator >= other.denominator
1223:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:denominator == other.denominator |==> false
1224:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:denominator == other.denominator |==> true
1225:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator && denominator == other.denominator |==> numerator == other.numerator != (denominator == other.denominator)
1226:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator && denominator == other.denominator |==> numerator == other.numerator == (denominator == other.denominator)
1227:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator && denominator == other.denominator |==> false
1228:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator && denominator == other.denominator |==> numerator == other.numerator
1229:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator && denominator == other.denominator |==> denominator == other.denominator
1230:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator && denominator == other.denominator |==> true
1231:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator && denominator == other.denominator |==> numerator == other.numerator || denominator == other.denominator
1232:LVR:0:POS:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):892:0 |==> 1
1233:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):892:0 |==> -1
1234:AOR:*(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):896:(long)numerator * (long)other.denominator |==> (long)numerator % (long)other.denominator
1235:AOR:*(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):896:(long)numerator * (long)other.denominator |==> (long)numerator + (long)other.denominator
1236:AOR:*(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):896:(long)numerator * (long)other.denominator |==> (long)numerator - (long)other.denominator
1237:AOR:*(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):896:(long)numerator * (long)other.denominator |==> (long)numerator / (long)other.denominator
1238:AOR:*(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):897:(long)other.numerator * (long)denominator |==> (long)other.numerator % (long)denominator
1239:AOR:*(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):897:(long)other.numerator * (long)denominator |==> (long)other.numerator + (long)denominator
1240:AOR:*(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):897:(long)other.numerator * (long)denominator |==> (long)other.numerator - (long)denominator
1241:AOR:*(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):897:(long)other.numerator * (long)denominator |==> (long)other.numerator / (long)denominator
1242:ROR:==(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):898:first == second |==> first != second
1243:ROR:==(long,long):<(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):898:first == second |==> first < second
1244:ROR:==(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):898:first == second |==> first <= second
1245:ROR:==(long,long):>(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):898:first == second |==> first > second
1246:ROR:==(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):898:first == second |==> first >= second
1247:ROR:==(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):898:first == second |==> false
1248:ROR:==(long,long):TRUE(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):898:first == second |==> true
1249:LVR:0:POS:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):899:0 |==> 1
1250:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):899:0 |==> -1
1251:ROR:<(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):900:first < second |==> first != second
1252:ROR:<(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):900:first < second |==> first <= second
1253:ROR:<(long,long):==(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):900:first < second |==> first == second
1254:ROR:<(long,long):>(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):900:first < second |==> first > second
1255:ROR:<(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):900:first < second |==> first >= second
1256:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):900:first < second |==> false
1257:ROR:<(long,long):TRUE(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):900:first < second |==> true
1258:LVR:NEG:0:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):901:-1 |==> 0
1259:LVR:NEG:POS:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):901:-1 |==> 1
1260:LVR:POS:0:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):903:1 |==> 0
1261:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):903:1 |==> -1
1262:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@toString():916:toString == null |==> toString != null
1263:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@toString():916:toString == null |==> false
1264:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@toString():916:toString == null |==> true
1265:LVR:POS:0:org.apache.commons.lang3.math.Fraction@toString():917:32 |==> 0
1266:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@toString():917:32 |==> -32
1267:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@toString():917:toString = new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString() |==> <NO-OP>
1268:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@toProperString():935:toProperString == null |==> toProperString != null
1269:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@toProperString():935:toProperString == null |==> false
1270:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@toProperString():935:toProperString == null |==> true
1271:LVR:0:POS:org.apache.commons.lang3.math.Fraction@toProperString():936:0 |==> 1
1272:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@toProperString():936:0 |==> -1
1273:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():936:numerator == 0 |==> numerator != 0
1274:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@toProperString():936:numerator == 0 |==> numerator < 0
1275:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():936:numerator == 0 |==> numerator <= 0
1276:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@toProperString():936:numerator == 0 |==> numerator > 0
1277:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():936:numerator == 0 |==> numerator >= 0
1278:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():936:numerator == 0 |==> false
1279:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():936:numerator == 0 |==> true
1280:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@toProperString():937:toProperString = "0" |==> <NO-OP>
1281:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():938:numerator == denominator |==> numerator != denominator
1282:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@toProperString():938:numerator == denominator |==> numerator < denominator
1283:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():938:numerator == denominator |==> numerator <= denominator
1284:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@toProperString():938:numerator == denominator |==> numerator > denominator
1285:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():938:numerator == denominator |==> numerator >= denominator
1286:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():938:numerator == denominator |==> false
1287:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():938:numerator == denominator |==> true
1288:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@toProperString():939:toProperString = "1" |==> <NO-OP>
1289:LVR:NEG:0:org.apache.commons.lang3.math.Fraction@toProperString():940:-1 |==> 0
1290:LVR:NEG:POS:org.apache.commons.lang3.math.Fraction@toProperString():940:-1 |==> 1
1291:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:-1 * denominator |==> -1 % denominator
1292:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:-1 * denominator |==> -1 + denominator
1293:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:-1 * denominator |==> -1 - denominator
1294:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:-1 * denominator |==> -1 / denominator
1295:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:numerator == -1 * denominator |==> numerator != -1 * denominator
1296:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:numerator == -1 * denominator |==> numerator < -1 * denominator
1297:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:numerator == -1 * denominator |==> numerator <= -1 * denominator
1298:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:numerator == -1 * denominator |==> numerator > -1 * denominator
1299:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:numerator == -1 * denominator |==> numerator >= -1 * denominator
1300:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:numerator == -1 * denominator |==> false
1301:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:numerator == -1 * denominator |==> true
1302:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@toProperString():941:toProperString = "-1" |==> <NO-OP>
1303:LVR:0:POS:org.apache.commons.lang3.math.Fraction@toProperString():942:0 |==> 1
1304:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@toProperString():942:0 |==> -1
1305:ROR:>(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:numerator > 0 |==> numerator != 0
1306:ROR:>(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:numerator > 0 |==> numerator < 0
1307:ROR:>(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:numerator > 0 |==> numerator <= 0
1308:ROR:>(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:numerator > 0 |==> numerator == 0
1309:ROR:>(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:numerator > 0 |==> numerator >= 0
1310:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:numerator > 0 |==> false
1311:ROR:>(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:numerator > 0 |==> true
1312:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@toProperString():942:-numerator |==> +numerator
1313:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@toProperString():942:-numerator |==> ~numerator
1314:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@toProperString():942:-denominator |==> +denominator
1315:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@toProperString():942:-denominator |==> ~denominator
1316:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:(numerator > 0 ? -numerator : numerator) < -denominator |==> (numerator > 0 ? -numerator : numerator) != -denominator
1317:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:(numerator > 0 ? -numerator : numerator) < -denominator |==> (numerator > 0 ? -numerator : numerator) <= -denominator
1318:ROR:<(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:(numerator > 0 ? -numerator : numerator) < -denominator |==> (numerator > 0 ? -numerator : numerator) == -denominator
1319:ROR:<(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:(numerator > 0 ? -numerator : numerator) < -denominator |==> (numerator > 0 ? -numerator : numerator) > -denominator
1320:ROR:<(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:(numerator > 0 ? -numerator : numerator) < -denominator |==> (numerator > 0 ? -numerator : numerator) >= -denominator
1321:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:(numerator > 0 ? -numerator : numerator) < -denominator |==> false
1322:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:(numerator > 0 ? -numerator : numerator) < -denominator |==> true
1323:LVR:0:POS:org.apache.commons.lang3.math.Fraction@toProperString():948:0 |==> 1
1324:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@toProperString():948:0 |==> -1
1325:ROR:==(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():948:properNumerator == 0 |==> properNumerator != 0
1326:ROR:==(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@toProperString():948:properNumerator == 0 |==> properNumerator < 0
1327:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():948:properNumerator == 0 |==> properNumerator <= 0
1328:ROR:==(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@toProperString():948:properNumerator == 0 |==> properNumerator > 0
1329:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():948:properNumerator == 0 |==> properNumerator >= 0
1330:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():948:properNumerator == 0 |==> false
1331:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():948:properNumerator == 0 |==> true
1332:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@toProperString():949:toProperString = Integer.toString(getProperWhole()) |==> <NO-OP>
1333:LVR:POS:0:org.apache.commons.lang3.math.Fraction@toProperString():951:32 |==> 0
1334:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@toProperString():951:32 |==> -32
1335:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@toProperString():951:toProperString = new StringBuilder(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString() |==> <NO-OP>
1336:LVR:POS:0:org.apache.commons.lang3.math.Fraction@toProperString():957:32 |==> 0
1337:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@toProperString():957:32 |==> -32
1338:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@toProperString():957:toProperString = new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString() |==> <NO-OP>