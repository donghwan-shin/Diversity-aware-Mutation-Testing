1:LVR:0:POS:org.apache.commons.lang.math.Fraction:48:0 |==> 1
2:LVR:0:NEG:org.apache.commons.lang.math.Fraction:48:0 |==> -1
3:LVR:POS:0:org.apache.commons.lang.math.Fraction:48:1 |==> 0
4:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:48:1 |==> -1
5:LVR:POS:0:org.apache.commons.lang.math.Fraction:52:1 |==> 0
6:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:52:1 |==> -1
7:LVR:POS:0:org.apache.commons.lang.math.Fraction:52:1 |==> 0
8:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:52:1 |==> -1
9:LVR:POS:0:org.apache.commons.lang.math.Fraction:56:1 |==> 0
10:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:56:1 |==> -1
11:LVR:POS:0:org.apache.commons.lang.math.Fraction:56:2 |==> 0
12:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:56:2 |==> -2
13:LVR:POS:0:org.apache.commons.lang.math.Fraction:60:1 |==> 0
14:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:60:1 |==> -1
15:LVR:POS:0:org.apache.commons.lang.math.Fraction:60:3 |==> 0
16:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:60:3 |==> -3
17:LVR:POS:0:org.apache.commons.lang.math.Fraction:64:2 |==> 0
18:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:64:2 |==> -2
19:LVR:POS:0:org.apache.commons.lang.math.Fraction:64:3 |==> 0
20:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:64:3 |==> -3
21:LVR:POS:0:org.apache.commons.lang.math.Fraction:68:1 |==> 0
22:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:68:1 |==> -1
23:LVR:POS:0:org.apache.commons.lang.math.Fraction:68:4 |==> 0
24:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:68:4 |==> -4
25:LVR:POS:0:org.apache.commons.lang.math.Fraction:72:2 |==> 0
26:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:72:2 |==> -2
27:LVR:POS:0:org.apache.commons.lang.math.Fraction:72:4 |==> 0
28:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:72:4 |==> -4
29:LVR:POS:0:org.apache.commons.lang.math.Fraction:76:3 |==> 0
30:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:76:3 |==> -3
31:LVR:POS:0:org.apache.commons.lang.math.Fraction:76:4 |==> 0
32:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:76:4 |==> -4
33:LVR:POS:0:org.apache.commons.lang.math.Fraction:80:1 |==> 0
34:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:80:1 |==> -1
35:LVR:POS:0:org.apache.commons.lang.math.Fraction:80:5 |==> 0
36:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:80:5 |==> -5
37:LVR:POS:0:org.apache.commons.lang.math.Fraction:84:2 |==> 0
38:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:84:2 |==> -2
39:LVR:POS:0:org.apache.commons.lang.math.Fraction:84:5 |==> 0
40:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:84:5 |==> -5
41:LVR:POS:0:org.apache.commons.lang.math.Fraction:88:3 |==> 0
42:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:88:3 |==> -3
43:LVR:POS:0:org.apache.commons.lang.math.Fraction:88:5 |==> 0
44:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:88:5 |==> -5
45:LVR:POS:0:org.apache.commons.lang.math.Fraction:92:4 |==> 0
46:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:92:4 |==> -4
47:LVR:POS:0:org.apache.commons.lang.math.Fraction:92:5 |==> 0
48:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:92:5 |==> -5
49:LVR:0:POS:org.apache.commons.lang.math.Fraction:107:0 |==> 1
50:LVR:0:NEG:org.apache.commons.lang.math.Fraction:107:0 |==> -1
51:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(int,int):142:0 |==> 1
52:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(int,int):142:0 |==> -1
53:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):142:denominator == 0 |==> denominator != 0
54:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):142:denominator == 0 |==> denominator < 0
55:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):142:denominator == 0 |==> denominator <= 0
56:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):142:denominator == 0 |==> denominator > 0
57:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):142:denominator == 0 |==> denominator >= 0
58:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):142:denominator == 0 |==> false
59:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):142:denominator == 0 |==> true
60:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(int,int):145:0 |==> 1
61:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(int,int):145:0 |==> -1
62:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):145:denominator < 0 |==> denominator != 0
63:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):145:denominator < 0 |==> denominator <= 0
64:ROR:<(int,int):==(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):145:denominator < 0 |==> denominator == 0
65:ROR:<(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):145:denominator < 0 |==> denominator > 0
66:ROR:<(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):145:denominator < 0 |==> denominator >= 0
67:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):145:denominator < 0 |==> false
68:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):145:denominator < 0 |==> true
69:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE |==> numerator != Integer.MIN_VALUE
70:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE |==> numerator < Integer.MIN_VALUE
71:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
72:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE |==> numerator > Integer.MIN_VALUE
73:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
74:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE |==> false
75:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE |==> true
76:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):147:denominator == Integer.MIN_VALUE |==> denominator != Integer.MIN_VALUE
77:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):147:denominator == Integer.MIN_VALUE |==> denominator < Integer.MIN_VALUE
78:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):147:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
79:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):147:denominator == Integer.MIN_VALUE |==> denominator > Integer.MIN_VALUE
80:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):147:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
81:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):147:denominator == Integer.MIN_VALUE |==> false
82:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):147:denominator == Integer.MIN_VALUE |==> true
83:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE != (denominator == Integer.MIN_VALUE)
84:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE && denominator == Integer.MIN_VALUE
85:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE == (denominator == Integer.MIN_VALUE)
86:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> false
87:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE
88:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int):147:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> denominator == Integer.MIN_VALUE
89:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> true
90:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@getFraction(int,int):150:-numerator |==> +numerator
91:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@getFraction(int,int):150:-numerator |==> ~numerator
92:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(int,int):150:numerator = -numerator |==> <NO-OP>
93:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@getFraction(int,int):151:-denominator |==> +denominator
94:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@getFraction(int,int):151:-denominator |==> ~denominator
95:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(int,int):151:denominator = -denominator |==> <NO-OP>
96:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):173:0 |==> 1
97:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):173:0 |==> -1
98:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):173:denominator == 0 |==> denominator != 0
99:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):173:denominator == 0 |==> denominator < 0
100:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):173:denominator == 0 |==> denominator <= 0
101:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):173:denominator == 0 |==> denominator > 0
102:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):173:denominator == 0 |==> denominator >= 0
103:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):173:denominator == 0 |==> false
104:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):173:denominator == 0 |==> true
105:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):176:0 |==> 1
106:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):176:0 |==> -1
107:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):176:denominator < 0 |==> denominator != 0
108:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):176:denominator < 0 |==> denominator <= 0
109:ROR:<(int,int):==(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):176:denominator < 0 |==> denominator == 0
110:ROR:<(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):176:denominator < 0 |==> denominator > 0
111:ROR:<(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):176:denominator < 0 |==> denominator >= 0
112:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):176:denominator < 0 |==> false
113:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):176:denominator < 0 |==> true
114:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):179:0 |==> 1
115:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):179:0 |==> -1
116:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):179:numerator < 0 |==> numerator != 0
117:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):179:numerator < 0 |==> numerator <= 0
118:ROR:<(int,int):==(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):179:numerator < 0 |==> numerator == 0
119:ROR:<(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):179:numerator < 0 |==> numerator > 0
120:ROR:<(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):179:numerator < 0 |==> numerator >= 0
121:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):179:numerator < 0 |==> false
122:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):179:numerator < 0 |==> true
123:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):183:0 |==> 1
124:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):183:0 |==> -1
125:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):183:whole < 0 |==> whole != 0
126:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):183:whole < 0 |==> whole <= 0
127:ROR:<(int,int):==(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):183:whole < 0 |==> whole == 0
128:ROR:<(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):183:whole < 0 |==> whole > 0
129:ROR:<(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):183:whole < 0 |==> whole >= 0
130:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):183:whole < 0 |==> false
131:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):183:whole < 0 |==> true
132:AOR:*(long,long):%(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator |==> whole % (long)denominator
133:AOR:*(long,long):+(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator |==> whole + (long)denominator
134:AOR:*(long,long):-(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator |==> whole - (long)denominator
135:AOR:*(long,long):/(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator |==> whole / (long)denominator
136:AOR:-(long,long):%(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator - numerator |==> whole * (long)denominator % numerator
137:AOR:-(long,long):*(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator - numerator |==> whole * (long)denominator * numerator
138:AOR:-(long,long):+(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator - numerator |==> whole * (long)denominator + numerator
139:AOR:-(long,long):/(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator - numerator |==> whole * (long)denominator / numerator
140:AOR:*(long,long):%(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator |==> whole % (long)denominator
141:AOR:*(long,long):+(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator |==> whole + (long)denominator
142:AOR:*(long,long):-(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator |==> whole - (long)denominator
143:AOR:*(long,long):/(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator |==> whole / (long)denominator
144:AOR:+(long,long):%(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator + numerator |==> whole * (long)denominator % numerator
145:AOR:+(long,long):*(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator + numerator |==> whole * (long)denominator * numerator
146:AOR:+(long,long):-(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator + numerator |==> whole * (long)denominator - numerator
147:AOR:+(long,long):/(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator + numerator |==> whole * (long)denominator / numerator
148:ROR:<(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE |==> numeratorValue != Integer.MIN_VALUE
149:ROR:<(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE |==> numeratorValue <= Integer.MIN_VALUE
150:ROR:<(long,long):==(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE |==> numeratorValue == Integer.MIN_VALUE
151:ROR:<(long,long):>(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE |==> numeratorValue > Integer.MIN_VALUE
152:ROR:<(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE |==> numeratorValue >= Integer.MIN_VALUE
153:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE |==> false
154:ROR:<(long,long):TRUE(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE |==> true
155:ROR:>(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):189:numeratorValue > Integer.MAX_VALUE |==> numeratorValue != Integer.MAX_VALUE
156:ROR:>(long,long):<(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):189:numeratorValue > Integer.MAX_VALUE |==> numeratorValue < Integer.MAX_VALUE
157:ROR:>(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):189:numeratorValue > Integer.MAX_VALUE |==> numeratorValue <= Integer.MAX_VALUE
158:ROR:>(long,long):==(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):189:numeratorValue > Integer.MAX_VALUE |==> numeratorValue == Integer.MAX_VALUE
159:ROR:>(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):189:numeratorValue > Integer.MAX_VALUE |==> numeratorValue >= Integer.MAX_VALUE
160:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):189:numeratorValue > Integer.MAX_VALUE |==> false
161:ROR:>(long,long):TRUE(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):189:numeratorValue > Integer.MAX_VALUE |==> true
162:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue < Integer.MIN_VALUE != numeratorValue > Integer.MAX_VALUE
163:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue < Integer.MIN_VALUE && numeratorValue > Integer.MAX_VALUE
164:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue < Integer.MIN_VALUE == numeratorValue > Integer.MAX_VALUE
165:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> false
166:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue < Integer.MIN_VALUE
167:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):189:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue > Integer.MAX_VALUE
168:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> true
169:LVR:0:POS:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):210:0 |==> 1
170:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):210:0 |==> -1
171:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):210:denominator == 0 |==> denominator != 0
172:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):210:denominator == 0 |==> denominator < 0
173:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):210:denominator == 0 |==> denominator <= 0
174:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):210:denominator == 0 |==> denominator > 0
175:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):210:denominator == 0 |==> denominator >= 0
176:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):210:denominator == 0 |==> false
177:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):210:denominator == 0 |==> true
178:LVR:0:POS:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):213:0 |==> 1
179:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):213:0 |==> -1
180:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):213:numerator == 0 |==> numerator != 0
181:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):213:numerator == 0 |==> numerator < 0
182:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):213:numerator == 0 |==> numerator <= 0
183:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):213:numerator == 0 |==> numerator > 0
184:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):213:numerator == 0 |==> numerator >= 0
185:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):213:numerator == 0 |==> false
186:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):213:numerator == 0 |==> true
187:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE |==> denominator != Integer.MIN_VALUE
188:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE |==> denominator < Integer.MIN_VALUE
189:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
190:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE |==> denominator > Integer.MIN_VALUE
191:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
192:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE |==> false
193:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE |==> true
194:LVR:POS:0:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:1 |==> 0
195:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:1 |==> -1
196:LOR:&(int,int):^(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:numerator & 1 |==> numerator ^ 1
197:LOR:&(int,int):|(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:numerator & 1 |==> numerator | 1
198:LVR:0:POS:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:0 |==> 1
199:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:0 |==> -1
200:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:(numerator & 1) == 0 |==> (numerator & 1) != 0
201:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:(numerator & 1) == 0 |==> (numerator & 1) < 0
202:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:(numerator & 1) == 0 |==> (numerator & 1) <= 0
203:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:(numerator & 1) == 0 |==> (numerator & 1) > 0
204:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:(numerator & 1) == 0 |==> (numerator & 1) >= 0
205:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:(numerator & 1) == 0 |==> false
206:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:(numerator & 1) == 0 |==> true
207:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE != ((numerator & 1) == 0)
208:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE == ((numerator & 1) == 0)
209:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> false
210:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE
211:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> (numerator & 1) == 0
212:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> true
213:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE || (numerator & 1) == 0
214:LVR:POS:0:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):218:2 |==> 0
215:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):218:2 |==> -2
216:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):218:numerator /= 2 |==> <NO-OP>
217:LVR:POS:0:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):218:2 |==> 0
218:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):218:2 |==> -2
219:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):218:denominator /= 2 |==> <NO-OP>
220:LVR:0:POS:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):220:0 |==> 1
221:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):220:0 |==> -1
222:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):220:denominator < 0 |==> denominator != 0
223:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):220:denominator < 0 |==> denominator <= 0
224:ROR:<(int,int):==(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):220:denominator < 0 |==> denominator == 0
225:ROR:<(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):220:denominator < 0 |==> denominator > 0
226:ROR:<(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):220:denominator < 0 |==> denominator >= 0
227:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):220:denominator < 0 |==> false
228:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):220:denominator < 0 |==> true
229:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE |==> numerator != Integer.MIN_VALUE
230:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE |==> numerator < Integer.MIN_VALUE
231:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
232:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE |==> numerator > Integer.MIN_VALUE
233:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
234:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE |==> false
235:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE |==> true
236:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> denominator != Integer.MIN_VALUE
237:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> denominator < Integer.MIN_VALUE
238:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
239:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> denominator > Integer.MIN_VALUE
240:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
241:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> false
242:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> true
243:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE != (denominator == Integer.MIN_VALUE)
244:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE && denominator == Integer.MIN_VALUE
245:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE == (denominator == Integer.MIN_VALUE)
246:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> false
247:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE
248:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):222:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> denominator == Integer.MIN_VALUE
249:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> true
250:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):225:-numerator |==> +numerator
251:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):225:-numerator |==> ~numerator
252:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):225:numerator = -numerator |==> <NO-OP>
253:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):226:-denominator |==> +denominator
254:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):226:-denominator |==> ~denominator
255:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):226:denominator = -denominator |==> <NO-OP>
256:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):230:numerator /= gcd |==> <NO-OP>
257:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):231:denominator /= gcd |==> <NO-OP>
258:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):250:0 |==> 1
259:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):250:0 |==> -1
260:ROR:<(double,double):!=(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):250:value < 0 |==> value != 0
261:ROR:<(double,double):<=(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):250:value < 0 |==> value <= 0
262:ROR:<(double,double):==(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):250:value < 0 |==> value == 0
263:ROR:<(double,double):>(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):250:value < 0 |==> value > 0
264:ROR:<(double,double):>=(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):250:value < 0 |==> value >= 0
265:ROR:<(double,double):FALSE(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):250:value < 0 |==> false
266:ROR:<(double,double):TRUE(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):250:value < 0 |==> true
267:LVR:NEG:0:org.apache.commons.lang.math.Fraction@getFraction(double):250:-1 |==> 0
268:LVR:NEG:POS:org.apache.commons.lang.math.Fraction@getFraction(double):250:-1 |==> 1
269:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):250:1 |==> 0
270:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):250:1 |==> -1
271:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):251:value = Math.abs(value) |==> <NO-OP>
272:ROR:>(double,double):!=(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE |==> value != Integer.MAX_VALUE
273:ROR:>(double,double):<(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE |==> value < Integer.MAX_VALUE
274:ROR:>(double,double):<=(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE |==> value <= Integer.MAX_VALUE
275:ROR:>(double,double):==(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE |==> value == Integer.MAX_VALUE
276:ROR:>(double,double):>=(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE |==> value >= Integer.MAX_VALUE
277:ROR:>(double,double):FALSE(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE |==> false
278:ROR:>(double,double):TRUE(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE |==> true
279:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE || Double.isNaN(value) |==> value > Integer.MAX_VALUE != Double.isNaN(value)
280:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE || Double.isNaN(value) |==> value > Integer.MAX_VALUE && Double.isNaN(value)
281:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE || Double.isNaN(value) |==> value > Integer.MAX_VALUE == Double.isNaN(value)
282:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE || Double.isNaN(value) |==> false
283:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE || Double.isNaN(value) |==> value > Integer.MAX_VALUE
284:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE || Double.isNaN(value) |==> Double.isNaN(value)
285:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE || Double.isNaN(value) |==> true
286:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):257:value -= wholeNumber |==> <NO-OP>
287:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):259:0 |==> 1
288:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):259:0 |==> -1
289:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):260:1 |==> 0
290:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):260:1 |==> -1
291:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):261:1 |==> 0
292:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):261:1 |==> -1
293:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):262:0 |==> 1
294:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):262:0 |==> -1
295:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):263:0 |==> 1
296:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):263:0 |==> -1
297:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):264:0 |==> 1
298:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):264:0 |==> -1
299:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):266:0 |==> 1
300:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):266:0 |==> -1
301:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):267:1 |==> 0
302:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):267:1 |==> -1
303:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):268:0 |==> 1
304:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):268:0 |==> -1
305:AOR:-(double,double):%(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):269:value - a1 |==> value % a1
306:AOR:-(double,double):*(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):269:value - a1 |==> value * a1
307:AOR:-(double,double):+(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):269:value - a1 |==> value + a1
308:AOR:-(double,double):/(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):269:value - a1 |==> value / a1
309:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):270:0 |==> 1
310:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):270:0 |==> -1
311:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):273:1 |==> 0
312:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):273:1 |==> -1
313:AOR:/(double,double):%(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):277:x1 / y1 |==> x1 % y1
314:AOR:/(double,double):*(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):277:x1 / y1 |==> x1 * y1
315:AOR:/(double,double):+(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):277:x1 / y1 |==> x1 + y1
316:AOR:/(double,double):-(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):277:x1 / y1 |==> x1 - y1
317:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):277:a2 = (int)(x1 / y1) |==> <NO-OP>
318:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):278:x2 = y1 |==> <NO-OP>
319:AOR:*(double,double):%(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:a2 * y1 |==> a2 % y1
320:AOR:*(double,double):+(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:a2 * y1 |==> a2 + y1
321:AOR:*(double,double):-(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:a2 * y1 |==> a2 - y1
322:AOR:*(double,double):/(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:a2 * y1 |==> a2 / y1
323:AOR:-(double,double):%(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:x1 - a2 * y1 |==> x1 % (a2 * y1)
324:AOR:-(double,double):*(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:x1 - a2 * y1 |==> x1 * (a2 * y1)
325:AOR:-(double,double):+(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:x1 - a2 * y1 |==> x1 + a2 * y1
326:AOR:-(double,double):/(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:x1 - a2 * y1 |==> x1 / (a2 * y1)
327:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):279:y2 = x1 - a2 * y1 |==> <NO-OP>
328:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 |==> a1 % numer1
329:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 |==> a1 + numer1
330:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 |==> a1 - numer1
331:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 |==> a1 / numer1
332:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 + numer0 |==> a1 * numer1 % numer0
333:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 + numer0 |==> a1 * numer1 * numer0
334:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 + numer0 |==> a1 * numer1 - numer0
335:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 + numer0 |==> a1 * numer1 / numer0
336:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):280:numer2 = a1 * numer1 + numer0 |==> <NO-OP>
337:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 |==> a1 % denom1
338:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 |==> a1 + denom1
339:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 |==> a1 - denom1
340:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 |==> a1 / denom1
341:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 + denom0 |==> a1 * denom1 % denom0
342:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 + denom0 |==> a1 * denom1 * denom0
343:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 + denom0 |==> a1 * denom1 - denom0
344:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 + denom0 |==> a1 * denom1 / denom0
345:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):281:denom2 = a1 * denom1 + denom0 |==> <NO-OP>
346:AOR:/(double,double):%(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):282:(double)numer2 / (double)denom2 |==> (double)numer2 % (double)denom2
347:AOR:/(double,double):*(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):282:(double)numer2 / (double)denom2 |==> (double)numer2 * (double)denom2
348:AOR:/(double,double):+(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):282:(double)numer2 / (double)denom2 |==> (double)numer2 + (double)denom2
349:AOR:/(double,double):-(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):282:(double)numer2 / (double)denom2 |==> (double)numer2 - (double)denom2
350:AOR:-(double,double):%(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):283:value - fraction |==> value % fraction
351:AOR:-(double,double):*(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):283:value - fraction |==> value * fraction
352:AOR:-(double,double):+(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):283:value - fraction |==> value + fraction
353:AOR:-(double,double):/(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):283:value - fraction |==> value / fraction
354:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):283:delta2 = Math.abs(value - fraction) |==> <NO-OP>
355:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):285:a1 = a2 |==> <NO-OP>
356:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):286:x1 = x2 |==> <NO-OP>
357:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):287:y1 = y2 |==> <NO-OP>
358:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):288:numer0 = numer1 |==> <NO-OP>
359:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):289:denom0 = denom1 |==> <NO-OP>
360:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):290:numer1 = numer2 |==> <NO-OP>
361:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):291:denom1 = denom2 |==> <NO-OP>
362:STD:<INC>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):292:i++ |==> <NO-OP>
363:ROR:>(double,double):!=(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):294:delta1 > delta2 |==> delta1 != delta2
364:ROR:>(double,double):<(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):294:delta1 > delta2 |==> delta1 < delta2
365:ROR:>(double,double):<=(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):294:delta1 > delta2 |==> delta1 <= delta2
366:ROR:>(double,double):==(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):294:delta1 > delta2 |==> delta1 == delta2
367:ROR:>(double,double):>=(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):294:delta1 > delta2 |==> delta1 >= delta2
368:ROR:>(double,double):FALSE(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):294:delta1 > delta2 |==> false
369:ROR:>(double,double):TRUE(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):294:delta1 > delta2 |==> true
370:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):294:10000 |==> 0
371:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):294:10000 |==> -10000
372:ROR:<=(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 <= 10000 |==> denom2 != 10000
373:ROR:<=(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 <= 10000 |==> denom2 < 10000
374:ROR:<=(int,int):==(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 <= 10000 |==> denom2 == 10000
375:ROR:<=(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 <= 10000 |==> denom2 > 10000
376:ROR:<=(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 <= 10000 |==> denom2 >= 10000
377:ROR:<=(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 <= 10000 |==> false
378:ROR:<=(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 <= 10000 |==> true
379:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) |==> (delta1 > delta2) != (denom2 <= 10000)
380:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) |==> (delta1 > delta2) == (denom2 <= 10000)
381:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) |==> false
382:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) |==> (delta1 > delta2)
383:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) |==> (denom2 <= 10000)
384:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) |==> true
385:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) |==> (delta1 > delta2) || (denom2 <= 10000)
386:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):294:0 |==> 1
387:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):294:0 |==> -1
388:ROR:>(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 > 0 |==> denom2 != 0
389:ROR:>(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 > 0 |==> denom2 < 0
390:ROR:>(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 > 0 |==> denom2 <= 0
391:ROR:>(int,int):==(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 > 0 |==> denom2 == 0
392:ROR:>(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 > 0 |==> denom2 >= 0
393:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 > 0 |==> false
394:ROR:>(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 > 0 |==> true
395:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> ((delta1 > delta2) && (denom2 <= 10000)) != (denom2 > 0)
396:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> ((delta1 > delta2) && (denom2 <= 10000)) == (denom2 > 0)
397:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> false
398:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> (delta1 > delta2) && (denom2 <= 10000)
399:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> (denom2 > 0)
400:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> true
401:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> (delta1 > delta2) && (denom2 <= 10000) || (denom2 > 0)
402:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):294:25 |==> 0
403:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):294:25 |==> -25
404:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:i < 25 |==> i != 25
405:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:i < 25 |==> i <= 25
406:ROR:<(int,int):==(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:i < 25 |==> i == 25
407:ROR:<(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:i < 25 |==> i > 25
408:ROR:<(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:i < 25 |==> i >= 25
409:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:i < 25 |==> false
410:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:i < 25 |==> true
411:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> ((delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0)) != (i < 25)
412:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> ((delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0)) == (i < 25)
413:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> false
414:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> (delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0)
415:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> (i < 25)
416:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> true
417:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> (delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) || (i < 25)
418:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):295:25 |==> 0
419:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):295:25 |==> -25
420:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):295:i == 25 |==> i != 25
421:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):295:i == 25 |==> i < 25
422:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):295:i == 25 |==> i <= 25
423:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):295:i == 25 |==> i > 25
424:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):295:i == 25 |==> i >= 25
425:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):295:i == 25 |==> false
426:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):295:i == 25 |==> true
427:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:wholeNumber * denom0 |==> wholeNumber % denom0
428:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:wholeNumber * denom0 |==> wholeNumber + denom0
429:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:wholeNumber * denom0 |==> wholeNumber - denom0
430:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:wholeNumber * denom0 |==> wholeNumber / denom0
431:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:numer0 + wholeNumber * denom0 |==> numer0 % (wholeNumber * denom0)
432:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:numer0 + wholeNumber * denom0 |==> numer0 * (wholeNumber * denom0)
433:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:numer0 + wholeNumber * denom0 |==> numer0 - wholeNumber * denom0
434:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:numer0 + wholeNumber * denom0 |==> numer0 / (wholeNumber * denom0)
435:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) % sign
436:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) + sign
437:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) - sign
438:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) / sign
439:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):320:str == null |==> str != null
440:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):320:str == null |==> false
441:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):320:str == null |==> true
442:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):325:0 |==> 1
443:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):325:0 |==> -1
444:ROR:>=(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):325:pos >= 0 |==> pos != 0
445:ROR:>=(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):325:pos >= 0 |==> pos < 0
446:ROR:>=(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):325:pos >= 0 |==> pos <= 0
447:ROR:>=(int,int):==(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):325:pos >= 0 |==> pos == 0
448:ROR:>=(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):325:pos >= 0 |==> pos > 0
449:ROR:>=(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):325:pos >= 0 |==> false
450:ROR:>=(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):325:pos >= 0 |==> true
451:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):330:pos = str.indexOf(' ') |==> <NO-OP>
452:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):331:0 |==> 1
453:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):331:0 |==> -1
454:ROR:>(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):331:pos > 0 |==> pos != 0
455:ROR:>(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):331:pos > 0 |==> pos < 0
456:ROR:>(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):331:pos > 0 |==> pos <= 0
457:ROR:>(int,int):==(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):331:pos > 0 |==> pos == 0
458:ROR:>(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):331:pos > 0 |==> pos >= 0
459:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):331:pos > 0 |==> false
460:ROR:>(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):331:pos > 0 |==> true
461:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):332:0 |==> 1
462:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):332:0 |==> -1
463:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):333:1 |==> 0
464:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):333:1 |==> -1
465:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):333:pos + 1 |==> pos % 1
466:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):333:pos + 1 |==> pos * 1
467:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):333:pos + 1 |==> pos - 1
468:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):333:pos + 1 |==> pos / 1
469:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):333:str = str.substring(pos + 1) |==> <NO-OP>
470:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):334:pos = str.indexOf('/') |==> <NO-OP>
471:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):335:0 |==> 1
472:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):335:0 |==> -1
473:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):335:pos < 0 |==> pos != 0
474:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):335:pos < 0 |==> pos <= 0
475:ROR:<(int,int):==(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):335:pos < 0 |==> pos == 0
476:ROR:<(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):335:pos < 0 |==> pos > 0
477:ROR:<(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):335:pos < 0 |==> pos >= 0
478:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):335:pos < 0 |==> false
479:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):335:pos < 0 |==> true
480:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):338:0 |==> 1
481:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):338:0 |==> -1
482:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):339:1 |==> 0
483:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):339:1 |==> -1
484:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):339:pos + 1 |==> pos % 1
485:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):339:pos + 1 |==> pos * 1
486:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):339:pos + 1 |==> pos - 1
487:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):339:pos + 1 |==> pos / 1
488:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):345:pos = str.indexOf('/') |==> <NO-OP>
489:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):346:0 |==> 1
490:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):346:0 |==> -1
491:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):346:pos < 0 |==> pos != 0
492:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):346:pos < 0 |==> pos <= 0
493:ROR:<(int,int):==(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):346:pos < 0 |==> pos == 0
494:ROR:<(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):346:pos < 0 |==> pos > 0
495:ROR:<(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):346:pos < 0 |==> pos >= 0
496:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):346:pos < 0 |==> false
497:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):346:pos < 0 |==> true
498:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):348:1 |==> 0
499:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):348:1 |==> -1
500:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):350:0 |==> 1
501:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):350:0 |==> -1
502:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):351:1 |==> 0
503:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):351:1 |==> -1
504:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):351:pos + 1 |==> pos % 1
505:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):351:pos + 1 |==> pos * 1
506:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):351:pos + 1 |==> pos - 1
507:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):351:pos + 1 |==> pos / 1
508:AOR:%(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getProperNumerator():392:numerator % denominator |==> numerator * denominator
509:AOR:%(int,int):+(int,int):org.apache.commons.lang.math.Fraction@getProperNumerator():392:numerator % denominator |==> numerator + denominator
510:AOR:%(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getProperNumerator():392:numerator % denominator |==> numerator - denominator
511:AOR:%(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getProperNumerator():392:numerator % denominator |==> numerator / denominator
512:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getProperWhole():407:numerator / denominator |==> numerator % denominator
513:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getProperWhole():407:numerator / denominator |==> numerator * denominator
514:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@getProperWhole():407:numerator / denominator |==> numerator + denominator
515:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getProperWhole():407:numerator / denominator |==> numerator - denominator
516:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@intValue():420:numerator / denominator |==> numerator % denominator
517:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@intValue():420:numerator / denominator |==> numerator * denominator
518:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@intValue():420:numerator / denominator |==> numerator + denominator
519:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@intValue():420:numerator / denominator |==> numerator - denominator
520:AOR:/(long,long):%(long,long):org.apache.commons.lang.math.Fraction@longValue():430:(long)numerator / denominator |==> (long)numerator % denominator
521:AOR:/(long,long):*(long,long):org.apache.commons.lang.math.Fraction@longValue():430:(long)numerator / denominator |==> (long)numerator * denominator
522:AOR:/(long,long):+(long,long):org.apache.commons.lang.math.Fraction@longValue():430:(long)numerator / denominator |==> (long)numerator + denominator
523:AOR:/(long,long):-(long,long):org.apache.commons.lang.math.Fraction@longValue():430:(long)numerator / denominator |==> (long)numerator - denominator
524:AOR:/(float,float):%(float,float):org.apache.commons.lang.math.Fraction@floatValue():440:((float)numerator) / ((float)denominator) |==> ((float)numerator) % ((float)denominator)
525:AOR:/(float,float):*(float,float):org.apache.commons.lang.math.Fraction@floatValue():440:((float)numerator) / ((float)denominator) |==> ((float)numerator) * ((float)denominator)
526:AOR:/(float,float):+(float,float):org.apache.commons.lang.math.Fraction@floatValue():440:((float)numerator) / ((float)denominator) |==> ((float)numerator) + ((float)denominator)
527:AOR:/(float,float):-(float,float):org.apache.commons.lang.math.Fraction@floatValue():440:((float)numerator) / ((float)denominator) |==> ((float)numerator) - ((float)denominator)
528:AOR:/(double,double):%(double,double):org.apache.commons.lang.math.Fraction@doubleValue():450:((double)numerator) / ((double)denominator) |==> ((double)numerator) % ((double)denominator)
529:AOR:/(double,double):*(double,double):org.apache.commons.lang.math.Fraction@doubleValue():450:((double)numerator) / ((double)denominator) |==> ((double)numerator) * ((double)denominator)
530:AOR:/(double,double):+(double,double):org.apache.commons.lang.math.Fraction@doubleValue():450:((double)numerator) / ((double)denominator) |==> ((double)numerator) + ((double)denominator)
531:AOR:/(double,double):-(double,double):org.apache.commons.lang.math.Fraction@doubleValue():450:((double)numerator) / ((double)denominator) |==> ((double)numerator) - ((double)denominator)
532:LVR:0:POS:org.apache.commons.lang.math.Fraction@reduce():466:0 |==> 1
533:LVR:0:NEG:org.apache.commons.lang.math.Fraction@reduce():466:0 |==> -1
534:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@reduce():466:numerator == 0 |==> numerator != 0
535:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@reduce():466:numerator == 0 |==> numerator < 0
536:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@reduce():466:numerator == 0 |==> numerator <= 0
537:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@reduce():466:numerator == 0 |==> numerator > 0
538:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@reduce():466:numerator == 0 |==> numerator >= 0
539:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@reduce():466:numerator == 0 |==> false
540:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@reduce():466:numerator == 0 |==> true
541:COR:equals(ZERO):TRUE:org.apache.commons.lang.math.Fraction@reduce():467:equals(ZERO) |==> false
542:COR:equals(ZERO):FALSE:org.apache.commons.lang.math.Fraction@reduce():467:equals(ZERO) |==> true
543:LVR:POS:0:org.apache.commons.lang.math.Fraction@reduce():470:1 |==> 0
544:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@reduce():470:1 |==> -1
545:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@reduce():470:gcd == 1 |==> gcd != 1
546:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@reduce():470:gcd == 1 |==> gcd < 1
547:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@reduce():470:gcd == 1 |==> gcd <= 1
548:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@reduce():470:gcd == 1 |==> gcd > 1
549:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@reduce():470:gcd == 1 |==> gcd >= 1
550:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@reduce():470:gcd == 1 |==> false
551:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@reduce():470:gcd == 1 |==> true
552:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@reduce():473:numerator / gcd |==> numerator % gcd
553:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@reduce():473:numerator / gcd |==> numerator * gcd
554:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@reduce():473:numerator / gcd |==> numerator + gcd
555:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@reduce():473:numerator / gcd |==> numerator - gcd
556:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@reduce():473:denominator / gcd |==> denominator % gcd
557:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@reduce():473:denominator / gcd |==> denominator * gcd
558:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@reduce():473:denominator / gcd |==> denominator + gcd
559:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@reduce():473:denominator / gcd |==> denominator - gcd
560:LVR:0:POS:org.apache.commons.lang.math.Fraction@invert():486:0 |==> 1
561:LVR:0:NEG:org.apache.commons.lang.math.Fraction@invert():486:0 |==> -1
562:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@invert():486:numerator == 0 |==> numerator != 0
563:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@invert():486:numerator == 0 |==> numerator < 0
564:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@invert():486:numerator == 0 |==> numerator <= 0
565:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@invert():486:numerator == 0 |==> numerator > 0
566:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@invert():486:numerator == 0 |==> numerator >= 0
567:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@invert():486:numerator == 0 |==> false
568:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@invert():486:numerator == 0 |==> true
569:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@invert():489:numerator == Integer.MIN_VALUE |==> numerator != Integer.MIN_VALUE
570:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@invert():489:numerator == Integer.MIN_VALUE |==> numerator < Integer.MIN_VALUE
571:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@invert():489:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
572:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@invert():489:numerator == Integer.MIN_VALUE |==> numerator > Integer.MIN_VALUE
573:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@invert():489:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
574:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@invert():489:numerator == Integer.MIN_VALUE |==> false
575:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@invert():489:numerator == Integer.MIN_VALUE |==> true
576:LVR:0:POS:org.apache.commons.lang.math.Fraction@invert():492:0 |==> 1
577:LVR:0:NEG:org.apache.commons.lang.math.Fraction@invert():492:0 |==> -1
578:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@invert():492:numerator < 0 |==> numerator != 0
579:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@invert():492:numerator < 0 |==> numerator <= 0
580:ROR:<(int,int):==(int,int):org.apache.commons.lang.math.Fraction@invert():492:numerator < 0 |==> numerator == 0
581:ROR:<(int,int):>(int,int):org.apache.commons.lang.math.Fraction@invert():492:numerator < 0 |==> numerator > 0
582:ROR:<(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@invert():492:numerator < 0 |==> numerator >= 0
583:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@invert():492:numerator < 0 |==> false
584:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@invert():492:numerator < 0 |==> true
585:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@invert():493:-denominator |==> +denominator
586:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@invert():493:-denominator |==> ~denominator
587:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@invert():493:-numerator |==> +numerator
588:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@invert():493:-numerator |==> ~numerator
589:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@negate():508:numerator == Integer.MIN_VALUE |==> numerator != Integer.MIN_VALUE
590:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@negate():508:numerator == Integer.MIN_VALUE |==> numerator < Integer.MIN_VALUE
591:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@negate():508:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
592:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@negate():508:numerator == Integer.MIN_VALUE |==> numerator > Integer.MIN_VALUE
593:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@negate():508:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
594:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@negate():508:numerator == Integer.MIN_VALUE |==> false
595:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@negate():508:numerator == Integer.MIN_VALUE |==> true
596:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@negate():511:-numerator |==> +numerator
597:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@negate():511:-numerator |==> ~numerator
598:LVR:0:POS:org.apache.commons.lang.math.Fraction@abs():524:0 |==> 1
599:LVR:0:NEG:org.apache.commons.lang.math.Fraction@abs():524:0 |==> -1
600:ROR:>=(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@abs():524:numerator >= 0 |==> numerator != 0
601:ROR:>=(int,int):<(int,int):org.apache.commons.lang.math.Fraction@abs():524:numerator >= 0 |==> numerator < 0
602:ROR:>=(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@abs():524:numerator >= 0 |==> numerator <= 0
603:ROR:>=(int,int):==(int,int):org.apache.commons.lang.math.Fraction@abs():524:numerator >= 0 |==> numerator == 0
604:ROR:>=(int,int):>(int,int):org.apache.commons.lang.math.Fraction@abs():524:numerator >= 0 |==> numerator > 0
605:ROR:>=(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@abs():524:numerator >= 0 |==> false
606:ROR:>=(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@abs():524:numerator >= 0 |==> true
607:LVR:POS:0:org.apache.commons.lang.math.Fraction@pow(int):543:1 |==> 0
608:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@pow(int):543:1 |==> -1
609:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@pow(int):543:power == 1 |==> power != 1
610:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@pow(int):543:power == 1 |==> power < 1
611:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@pow(int):543:power == 1 |==> power <= 1
612:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@pow(int):543:power == 1 |==> power > 1
613:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@pow(int):543:power == 1 |==> power >= 1
614:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@pow(int):543:power == 1 |==> false
615:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@pow(int):543:power == 1 |==> true
616:LVR:0:POS:org.apache.commons.lang.math.Fraction@pow(int):545:0 |==> 1
617:LVR:0:NEG:org.apache.commons.lang.math.Fraction@pow(int):545:0 |==> -1
618:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@pow(int):545:power == 0 |==> power != 0
619:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@pow(int):545:power == 0 |==> power < 0
620:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@pow(int):545:power == 0 |==> power <= 0
621:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@pow(int):545:power == 0 |==> power > 0
622:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@pow(int):545:power == 0 |==> power >= 0
623:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@pow(int):545:power == 0 |==> false
624:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@pow(int):545:power == 0 |==> true
625:LVR:0:POS:org.apache.commons.lang.math.Fraction@pow(int):547:0 |==> 1
626:LVR:0:NEG:org.apache.commons.lang.math.Fraction@pow(int):547:0 |==> -1
627:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@pow(int):547:power < 0 |==> power != 0
628:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@pow(int):547:power < 0 |==> power <= 0
629:ROR:<(int,int):==(int,int):org.apache.commons.lang.math.Fraction@pow(int):547:power < 0 |==> power == 0
630:ROR:<(int,int):>(int,int):org.apache.commons.lang.math.Fraction@pow(int):547:power < 0 |==> power > 0
631:ROR:<(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@pow(int):547:power < 0 |==> power >= 0
632:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@pow(int):547:power < 0 |==> false
633:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@pow(int):547:power < 0 |==> true
634:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@pow(int):548:power == Integer.MIN_VALUE |==> power != Integer.MIN_VALUE
635:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@pow(int):548:power == Integer.MIN_VALUE |==> power < Integer.MIN_VALUE
636:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@pow(int):548:power == Integer.MIN_VALUE |==> power <= Integer.MIN_VALUE
637:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@pow(int):548:power == Integer.MIN_VALUE |==> power > Integer.MIN_VALUE
638:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@pow(int):548:power == Integer.MIN_VALUE |==> power >= Integer.MIN_VALUE
639:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@pow(int):548:power == Integer.MIN_VALUE |==> false
640:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@pow(int):548:power == Integer.MIN_VALUE |==> true
641:LVR:POS:0:org.apache.commons.lang.math.Fraction@pow(int):549:2 |==> 0
642:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@pow(int):549:2 |==> -2
643:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@pow(int):549:-(power / 2) |==> +(power / 2)
644:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@pow(int):549:-(power / 2) |==> ~(power / 2)
645:LVR:POS:0:org.apache.commons.lang.math.Fraction@pow(int):549:2 |==> 0
646:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@pow(int):549:2 |==> -2
647:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@pow(int):549:power / 2 |==> power % 2
648:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@pow(int):549:power / 2 |==> power * 2
649:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@pow(int):549:power / 2 |==> power + 2
650:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@pow(int):549:power / 2 |==> power - 2
651:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@pow(int):551:-power |==> +power
652:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@pow(int):551:-power |==> ~power
653:LVR:POS:0:org.apache.commons.lang.math.Fraction@pow(int):554:2 |==> 0
654:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@pow(int):554:2 |==> -2
655:AOR:%(int,int):*(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:power % 2 |==> power * 2
656:AOR:%(int,int):+(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:power % 2 |==> power + 2
657:AOR:%(int,int):-(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:power % 2 |==> power - 2
658:AOR:%(int,int):/(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:power % 2 |==> power / 2
659:LVR:0:POS:org.apache.commons.lang.math.Fraction@pow(int):554:0 |==> 1
660:LVR:0:NEG:org.apache.commons.lang.math.Fraction@pow(int):554:0 |==> -1
661:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:(power % 2) == 0 |==> (power % 2) != 0
662:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:(power % 2) == 0 |==> (power % 2) < 0
663:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:(power % 2) == 0 |==> (power % 2) <= 0
664:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:(power % 2) == 0 |==> (power % 2) > 0
665:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:(power % 2) == 0 |==> (power % 2) >= 0
666:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:(power % 2) == 0 |==> false
667:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:(power % 2) == 0 |==> true
668:LVR:POS:0:org.apache.commons.lang.math.Fraction@pow(int):555:2 |==> 0
669:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@pow(int):555:2 |==> -2
670:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@pow(int):555:power / 2 |==> power % 2
671:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@pow(int):555:power / 2 |==> power * 2
672:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@pow(int):555:power / 2 |==> power + 2
673:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@pow(int):555:power / 2 |==> power - 2
674:LVR:POS:0:org.apache.commons.lang.math.Fraction@pow(int):557:2 |==> 0
675:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@pow(int):557:2 |==> -2
676:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@pow(int):557:power / 2 |==> power % 2
677:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@pow(int):557:power / 2 |==> power * 2
678:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@pow(int):557:power / 2 |==> power + 2
679:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@pow(int):557:power / 2 |==> power - 2
680:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:1 |==> 0
681:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:1 |==> -1
682:ROR:<=(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 |==> Math.abs(u) != 1
683:ROR:<=(int,int):<(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 |==> Math.abs(u) < 1
684:ROR:<=(int,int):==(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 |==> Math.abs(u) == 1
685:ROR:<=(int,int):>(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 |==> Math.abs(u) > 1
686:ROR:<=(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 |==> Math.abs(u) >= 1
687:ROR:<=(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 |==> false
688:ROR:<=(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 |==> true
689:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:1 |==> 0
690:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:1 |==> -1
691:ROR:<=(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(v) <= 1 |==> Math.abs(v) != 1
692:ROR:<=(int,int):<(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(v) <= 1 |==> Math.abs(v) < 1
693:ROR:<=(int,int):==(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(v) <= 1 |==> Math.abs(v) == 1
694:ROR:<=(int,int):>(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(v) <= 1 |==> Math.abs(v) > 1
695:ROR:<=(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(v) <= 1 |==> Math.abs(v) >= 1
696:ROR:<=(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(v) <= 1 |==> false
697:ROR:<=(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(v) <= 1 |==> true
698:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 || Math.abs(v) <= 1 |==> Math.abs(u) <= 1 != Math.abs(v) <= 1
699:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 || Math.abs(v) <= 1 |==> Math.abs(u) <= 1 && Math.abs(v) <= 1
700:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 || Math.abs(v) <= 1 |==> Math.abs(u) <= 1 == Math.abs(v) <= 1
701:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 || Math.abs(v) <= 1 |==> false
702:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 || Math.abs(v) <= 1 |==> Math.abs(u) <= 1
703:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 || Math.abs(v) <= 1 |==> Math.abs(v) <= 1
704:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 || Math.abs(v) <= 1 |==> true
705:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):575:1 |==> 0
706:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):575:1 |==> -1
707:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:0 |==> 1
708:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:0 |==> -1
709:ROR:>(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:u > 0 |==> u != 0
710:ROR:>(int,int):<(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:u > 0 |==> u < 0
711:ROR:>(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:u > 0 |==> u <= 0
712:ROR:>(int,int):==(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:u > 0 |==> u == 0
713:ROR:>(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:u > 0 |==> u >= 0
714:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:u > 0 |==> false
715:ROR:>(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:u > 0 |==> true
716:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:-u |==> +u
717:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:-u |==> ~u
718:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:u = -u |==> <NO-OP>
719:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:0 |==> 1
720:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:0 |==> -1
721:ROR:>(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:v > 0 |==> v != 0
722:ROR:>(int,int):<(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:v > 0 |==> v < 0
723:ROR:>(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:v > 0 |==> v <= 0
724:ROR:>(int,int):==(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:v > 0 |==> v == 0
725:ROR:>(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:v > 0 |==> v >= 0
726:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:v > 0 |==> false
727:ROR:>(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:v > 0 |==> true
728:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:-v |==> +v
729:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:-v |==> ~v
730:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:v = -v |==> <NO-OP>
731:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):584:0 |==> 1
732:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):584:0 |==> -1
733:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:1 |==> 0
734:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:1 |==> -1
735:LOR:&(int,int):^(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:u & 1 |==> u ^ 1
736:LOR:&(int,int):|(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:u & 1 |==> u | 1
737:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:0 |==> 1
738:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:0 |==> -1
739:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 |==> (u & 1) != 0
740:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 |==> (u & 1) < 0
741:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 |==> (u & 1) <= 0
742:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 |==> (u & 1) > 0
743:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 |==> (u & 1) >= 0
744:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 |==> false
745:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 |==> true
746:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:1 |==> 0
747:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:1 |==> -1
748:LOR:&(int,int):^(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:v & 1 |==> v ^ 1
749:LOR:&(int,int):|(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:v & 1 |==> v | 1
750:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:0 |==> 1
751:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:0 |==> -1
752:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(v & 1) == 0 |==> (v & 1) != 0
753:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(v & 1) == 0 |==> (v & 1) < 0
754:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(v & 1) == 0 |==> (v & 1) <= 0
755:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(v & 1) == 0 |==> (v & 1) > 0
756:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(v & 1) == 0 |==> (v & 1) >= 0
757:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(v & 1) == 0 |==> false
758:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(v & 1) == 0 |==> true
759:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 |==> (u & 1) == 0 != ((v & 1) == 0)
760:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 |==> (u & 1) == 0 == ((v & 1) == 0)
761:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 |==> false
762:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 |==> (u & 1) == 0
763:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 |==> (v & 1) == 0
764:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 |==> true
765:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 |==> (u & 1) == 0 || (v & 1) == 0
766:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:31 |==> 0
767:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:31 |==> -31
768:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:k < 31 |==> k != 31
769:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:k < 31 |==> k <= 31
770:ROR:<(int,int):==(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:k < 31 |==> k == 31
771:ROR:<(int,int):>(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:k < 31 |==> k > 31
772:ROR:<(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:k < 31 |==> k >= 31
773:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:k < 31 |==> false
774:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:k < 31 |==> true
775:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> ((u & 1) == 0 && (v & 1) == 0) != k < 31
776:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> ((u & 1) == 0 && (v & 1) == 0) == k < 31
777:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> false
778:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> (u & 1) == 0 && (v & 1) == 0
779:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> k < 31
780:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> true
781:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> (u & 1) == 0 && (v & 1) == 0 || k < 31
782:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):586:2 |==> 0
783:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):586:2 |==> -2
784:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):586:u /= 2 |==> <NO-OP>
785:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):586:2 |==> 0
786:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):586:2 |==> -2
787:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):586:v /= 2 |==> <NO-OP>
788:STD:<INC>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):586:k++ |==> <NO-OP>
789:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):588:31 |==> 0
790:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):588:31 |==> -31
791:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):588:k == 31 |==> k != 31
792:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):588:k == 31 |==> k < 31
793:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):588:k == 31 |==> k <= 31
794:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):588:k == 31 |==> k > 31
795:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):588:k == 31 |==> k >= 31
796:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):588:k == 31 |==> false
797:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):588:k == 31 |==> true
798:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:1 |==> 0
799:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:1 |==> -1
800:LOR:&(int,int):^(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:u & 1 |==> u ^ 1
801:LOR:&(int,int):|(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:u & 1 |==> u | 1
802:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:1 |==> 0
803:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:1 |==> -1
804:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:(u & 1) == 1 |==> (u & 1) != 1
805:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:(u & 1) == 1 |==> (u & 1) < 1
806:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:(u & 1) == 1 |==> (u & 1) <= 1
807:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:(u & 1) == 1 |==> (u & 1) > 1
808:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:(u & 1) == 1 |==> (u & 1) >= 1
809:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:(u & 1) == 1 |==> false
810:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:(u & 1) == 1 |==> true
811:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:-(u / 2) |==> +(u / 2)
812:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:-(u / 2) |==> ~(u / 2)
813:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:2 |==> 0
814:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:2 |==> -2
815:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:u / 2 |==> u % 2
816:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:u / 2 |==> u * 2
817:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:u / 2 |==> u + 2
818:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:u / 2 |==> u - 2
819:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:1 |==> 0
820:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:1 |==> -1
821:LOR:&(int,int):^(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:t & 1 |==> t ^ 1
822:LOR:&(int,int):|(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:t & 1 |==> t | 1
823:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:0 |==> 1
824:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:0 |==> -1
825:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:(t & 1) == 0 |==> (t & 1) != 0
826:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:(t & 1) == 0 |==> (t & 1) < 0
827:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:(t & 1) == 0 |==> (t & 1) <= 0
828:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:(t & 1) == 0 |==> (t & 1) > 0
829:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:(t & 1) == 0 |==> (t & 1) >= 0
830:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:(t & 1) == 0 |==> false
831:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:(t & 1) == 0 |==> true
832:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):600:2 |==> 0
833:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):600:2 |==> -2
834:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):600:t /= 2 |==> <NO-OP>
835:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):603:0 |==> 1
836:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):603:0 |==> -1
837:ROR:>(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):603:t > 0 |==> t != 0
838:ROR:>(int,int):<(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):603:t > 0 |==> t < 0
839:ROR:>(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):603:t > 0 |==> t <= 0
840:ROR:>(int,int):==(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):603:t > 0 |==> t == 0
841:ROR:>(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):603:t > 0 |==> t >= 0
842:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):603:t > 0 |==> false
843:ROR:>(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):603:t > 0 |==> true
844:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):604:-t |==> +t
845:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):604:-t |==> ~t
846:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):604:u = -t |==> <NO-OP>
847:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):606:v = t |==> <NO-OP>
848:AOR:-(int,int):%(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:v - u |==> v % u
849:AOR:-(int,int):*(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:v - u |==> v * u
850:AOR:-(int,int):+(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:v - u |==> v + u
851:AOR:-(int,int):/(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:v - u |==> v / u
852:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:2 |==> 0
853:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:2 |==> -2
854:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:(v - u) / 2 |==> (v - u) % 2
855:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:(v - u) / 2 |==> (v - u) * 2
856:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:(v - u) / 2 |==> (v - u) + 2
857:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:(v - u) / 2 |==> (v - u) - 2
858:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:t = (v - u) / 2 |==> <NO-OP>
859:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):612:0 |==> 1
860:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):612:0 |==> -1
861:ROR:!=(int,int):<(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):612:t != 0 |==> t < 0
862:ROR:!=(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):612:t != 0 |==> t <= 0
863:ROR:!=(int,int):==(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):612:t != 0 |==> t == 0
864:ROR:!=(int,int):>(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):612:t != 0 |==> t > 0
865:ROR:!=(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):612:t != 0 |==> t >= 0
866:ROR:!=(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):612:t != 0 |==> false
867:ROR:!=(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):612:t != 0 |==> true
868:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:-u |==> +u
869:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:-u |==> ~u
870:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:1 |==> 0
871:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:1 |==> -1
872:SOR:<<(int,int):>>(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:1 << k |==> 1 >> k
873:SOR:<<(int,int):>>>(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:1 << k |==> 1 >>> k
874:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:-u * (1 << k) |==> -u % (1 << k)
875:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:-u * (1 << k) |==> -u + (1 << k)
876:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:-u * (1 << k) |==> -u - (1 << k)
877:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:-u * (1 << k) |==> -u / (1 << k)
878:AOR:*(long,long):%(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):629:((long)x) * ((long)y) |==> ((long)x) % ((long)y)
879:AOR:*(long,long):+(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):629:((long)x) * ((long)y) |==> ((long)x) + ((long)y)
880:AOR:*(long,long):-(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):629:((long)x) * ((long)y) |==> ((long)x) - ((long)y)
881:AOR:*(long,long):/(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):629:((long)x) * ((long)y) |==> ((long)x) / ((long)y)
882:ROR:<(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE |==> m != Integer.MIN_VALUE
883:ROR:<(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE |==> m <= Integer.MIN_VALUE
884:ROR:<(long,long):==(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE |==> m == Integer.MIN_VALUE
885:ROR:<(long,long):>(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE |==> m > Integer.MIN_VALUE
886:ROR:<(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE |==> m >= Integer.MIN_VALUE
887:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE |==> false
888:ROR:<(long,long):TRUE(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE |==> true
889:ROR:>(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):631:m > Integer.MAX_VALUE |==> m != Integer.MAX_VALUE
890:ROR:>(long,long):<(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):631:m > Integer.MAX_VALUE |==> m < Integer.MAX_VALUE
891:ROR:>(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):631:m > Integer.MAX_VALUE |==> m <= Integer.MAX_VALUE
892:ROR:>(long,long):==(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):631:m > Integer.MAX_VALUE |==> m == Integer.MAX_VALUE
893:ROR:>(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):631:m > Integer.MAX_VALUE |==> m >= Integer.MAX_VALUE
894:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):631:m > Integer.MAX_VALUE |==> false
895:ROR:>(long,long):TRUE(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):631:m > Integer.MAX_VALUE |==> true
896:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m < Integer.MIN_VALUE != m > Integer.MAX_VALUE
897:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m < Integer.MIN_VALUE && m > Integer.MAX_VALUE
898:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m < Integer.MIN_VALUE == m > Integer.MAX_VALUE
899:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> false
900:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m < Integer.MIN_VALUE
901:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):631:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m > Integer.MAX_VALUE
902:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> true
903:AOR:*(long,long):%(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):648:((long)x) * ((long)y) |==> ((long)x) % ((long)y)
904:AOR:*(long,long):+(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):648:((long)x) * ((long)y) |==> ((long)x) + ((long)y)
905:AOR:*(long,long):-(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):648:((long)x) * ((long)y) |==> ((long)x) - ((long)y)
906:AOR:*(long,long):/(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):648:((long)x) * ((long)y) |==> ((long)x) / ((long)y)
907:ROR:>(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):649:m > Integer.MAX_VALUE |==> m != Integer.MAX_VALUE
908:ROR:>(long,long):<(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):649:m > Integer.MAX_VALUE |==> m < Integer.MAX_VALUE
909:ROR:>(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):649:m > Integer.MAX_VALUE |==> m <= Integer.MAX_VALUE
910:ROR:>(long,long):==(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):649:m > Integer.MAX_VALUE |==> m == Integer.MAX_VALUE
911:ROR:>(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):649:m > Integer.MAX_VALUE |==> m >= Integer.MAX_VALUE
912:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):649:m > Integer.MAX_VALUE |==> false
913:ROR:>(long,long):TRUE(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):649:m > Integer.MAX_VALUE |==> true
914:AOR:+(long,long):%(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):665:(long)x + (long)y |==> (long)x % (long)y
915:AOR:+(long,long):*(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):665:(long)x + (long)y |==> (long)x * (long)y
916:AOR:+(long,long):-(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):665:(long)x + (long)y |==> (long)x - (long)y
917:AOR:+(long,long):/(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):665:(long)x + (long)y |==> (long)x / (long)y
918:ROR:<(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE |==> s != Integer.MIN_VALUE
919:ROR:<(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE |==> s <= Integer.MIN_VALUE
920:ROR:<(long,long):==(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE |==> s == Integer.MIN_VALUE
921:ROR:<(long,long):>(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE |==> s > Integer.MIN_VALUE
922:ROR:<(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE |==> s >= Integer.MIN_VALUE
923:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE |==> false
924:ROR:<(long,long):TRUE(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE |==> true
925:ROR:>(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):667:s > Integer.MAX_VALUE |==> s != Integer.MAX_VALUE
926:ROR:>(long,long):<(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):667:s > Integer.MAX_VALUE |==> s < Integer.MAX_VALUE
927:ROR:>(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):667:s > Integer.MAX_VALUE |==> s <= Integer.MAX_VALUE
928:ROR:>(long,long):==(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):667:s > Integer.MAX_VALUE |==> s == Integer.MAX_VALUE
929:ROR:>(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):667:s > Integer.MAX_VALUE |==> s >= Integer.MAX_VALUE
930:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):667:s > Integer.MAX_VALUE |==> false
931:ROR:>(long,long):TRUE(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):667:s > Integer.MAX_VALUE |==> true
932:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE != s > Integer.MAX_VALUE
933:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE && s > Integer.MAX_VALUE
934:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE == s > Integer.MAX_VALUE
935:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> false
936:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE
937:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):667:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s > Integer.MAX_VALUE
938:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> true
939:AOR:-(long,long):%(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):683:(long)x - (long)y |==> (long)x % (long)y
940:AOR:-(long,long):*(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):683:(long)x - (long)y |==> (long)x * (long)y
941:AOR:-(long,long):+(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):683:(long)x - (long)y |==> (long)x + (long)y
942:AOR:-(long,long):/(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):683:(long)x - (long)y |==> (long)x / (long)y
943:ROR:<(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE |==> s != Integer.MIN_VALUE
944:ROR:<(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE |==> s <= Integer.MIN_VALUE
945:ROR:<(long,long):==(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE |==> s == Integer.MIN_VALUE
946:ROR:<(long,long):>(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE |==> s > Integer.MIN_VALUE
947:ROR:<(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE |==> s >= Integer.MIN_VALUE
948:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE |==> false
949:ROR:<(long,long):TRUE(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE |==> true
950:ROR:>(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):685:s > Integer.MAX_VALUE |==> s != Integer.MAX_VALUE
951:ROR:>(long,long):<(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):685:s > Integer.MAX_VALUE |==> s < Integer.MAX_VALUE
952:ROR:>(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):685:s > Integer.MAX_VALUE |==> s <= Integer.MAX_VALUE
953:ROR:>(long,long):==(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):685:s > Integer.MAX_VALUE |==> s == Integer.MAX_VALUE
954:ROR:>(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):685:s > Integer.MAX_VALUE |==> s >= Integer.MAX_VALUE
955:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):685:s > Integer.MAX_VALUE |==> false
956:ROR:>(long,long):TRUE(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):685:s > Integer.MAX_VALUE |==> true
957:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE != s > Integer.MAX_VALUE
958:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE && s > Integer.MAX_VALUE
959:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE == s > Integer.MAX_VALUE
960:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> false
961:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE
962:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):685:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s > Integer.MAX_VALUE
963:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> true
964:LVR:TRUE:FALSE:org.apache.commons.lang.math.Fraction@add(org.apache.commons.lang.math.Fraction):702:true |==> false
965:LVR:FALSE:TRUE:org.apache.commons.lang.math.Fraction@subtract(org.apache.commons.lang.math.Fraction):716:false |==> true
966:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):730:fraction == null |==> fraction != null
967:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):730:fraction == null |==> false
968:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):730:fraction == null |==> true
969:LVR:0:POS:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):734:0 |==> 1
970:LVR:0:NEG:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):734:0 |==> -1
971:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):734:numerator == 0 |==> numerator != 0
972:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):734:numerator == 0 |==> numerator < 0
973:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):734:numerator == 0 |==> numerator <= 0
974:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):734:numerator == 0 |==> numerator > 0
975:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):734:numerator == 0 |==> numerator >= 0
976:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):734:numerator == 0 |==> false
977:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):734:numerator == 0 |==> true
978:COR:isAdd:TRUE:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):735:isAdd |==> false
979:COR:isAdd:FALSE:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):735:isAdd |==> true
980:LVR:0:POS:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):737:0 |==> 1
981:LVR:0:NEG:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):737:0 |==> -1
982:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):737:fraction.numerator == 0 |==> fraction.numerator != 0
983:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):737:fraction.numerator == 0 |==> fraction.numerator < 0
984:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):737:fraction.numerator == 0 |==> fraction.numerator <= 0
985:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):737:fraction.numerator == 0 |==> fraction.numerator > 0
986:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):737:fraction.numerator == 0 |==> fraction.numerator >= 0
987:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):737:fraction.numerator == 0 |==> false
988:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):737:fraction.numerator == 0 |==> true
989:LVR:POS:0:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):743:1 |==> 0
990:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):743:1 |==> -1
991:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):743:d1 == 1 |==> d1 != 1
992:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):743:d1 == 1 |==> d1 < 1
993:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):743:d1 == 1 |==> d1 <= 1
994:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):743:d1 == 1 |==> d1 > 1
995:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):743:d1 == 1 |==> d1 >= 1
996:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):743:d1 == 1 |==> false
997:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):743:d1 == 1 |==> true
998:COR:isAdd:TRUE:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):748:isAdd |==> false
999:COR:isAdd:FALSE:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):748:isAdd |==> true
1000:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):755:fraction.denominator / d1 |==> fraction.denominator % d1
1001:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):755:fraction.denominator / d1 |==> fraction.denominator * d1
1002:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):755:fraction.denominator / d1 |==> fraction.denominator + d1
1003:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):755:fraction.denominator / d1 |==> fraction.denominator - d1
1004:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):757:denominator / d1 |==> denominator % d1
1005:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):757:denominator / d1 |==> denominator * d1
1006:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):757:denominator / d1 |==> denominator + d1
1007:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):757:denominator / d1 |==> denominator - d1
1008:COR:isAdd:TRUE:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):758:isAdd |==> false
1009:COR:isAdd:FALSE:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):758:isAdd |==> true
1010:LVR:0:POS:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):762:0 |==> 1
1011:LVR:0:NEG:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):762:0 |==> -1
1012:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):762:tmodd1 == 0 |==> tmodd1 != 0
1013:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):762:tmodd1 == 0 |==> tmodd1 < 0
1014:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):762:tmodd1 == 0 |==> tmodd1 <= 0
1015:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):762:tmodd1 == 0 |==> tmodd1 > 0
1016:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):762:tmodd1 == 0 |==> tmodd1 >= 0
1017:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):762:tmodd1 == 0 |==> false
1018:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):762:tmodd1 == 0 |==> true
1019:LVR:POS:0:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):766:31 |==> 0
1020:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):766:31 |==> -31
1021:ROR:>(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):766:w.bitLength() > 31 |==> w.bitLength() != 31
1022:ROR:>(int,int):<(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):766:w.bitLength() > 31 |==> w.bitLength() < 31
1023:ROR:>(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):766:w.bitLength() > 31 |==> w.bitLength() <= 31
1024:ROR:>(int,int):==(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):766:w.bitLength() > 31 |==> w.bitLength() == 31
1025:ROR:>(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):766:w.bitLength() > 31 |==> w.bitLength() >= 31
1026:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):766:w.bitLength() > 31 |==> false
1027:ROR:>(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):766:w.bitLength() > 31 |==> true
1028:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:denominator / d1 |==> denominator % d1
1029:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:denominator / d1 |==> denominator * d1
1030:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:denominator / d1 |==> denominator + d1
1031:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:denominator / d1 |==> denominator - d1
1032:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:fraction.denominator / d2 |==> fraction.denominator % d2
1033:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:fraction.denominator / d2 |==> fraction.denominator * d2
1034:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:fraction.denominator / d2 |==> fraction.denominator + d2
1035:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:fraction.denominator / d2 |==> fraction.denominator - d2
1036:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):786:fraction == null |==> fraction != null
1037:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):786:fraction == null |==> false
1038:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):786:fraction == null |==> true
1039:LVR:0:POS:org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:0 |==> 1
1040:LVR:0:NEG:org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:0 |==> -1
1041:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 |==> numerator != 0
1042:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 |==> numerator < 0
1043:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 |==> numerator <= 0
1044:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 |==> numerator > 0
1045:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 |==> numerator >= 0
1046:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 |==> false
1047:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 |==> true
1048:LVR:0:POS:org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:0 |==> 1
1049:LVR:0:NEG:org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:0 |==> -1
1050:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:fraction.numerator == 0 |==> fraction.numerator != 0
1051:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:fraction.numerator == 0 |==> fraction.numerator < 0
1052:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:fraction.numerator == 0 |==> fraction.numerator <= 0
1053:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:fraction.numerator == 0 |==> fraction.numerator > 0
1054:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:fraction.numerator == 0 |==> fraction.numerator >= 0
1055:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:fraction.numerator == 0 |==> false
1056:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:fraction.numerator == 0 |==> true
1057:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 || fraction.numerator == 0 |==> numerator == 0 != (fraction.numerator == 0)
1058:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 || fraction.numerator == 0 |==> numerator == 0 && fraction.numerator == 0
1059:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 || fraction.numerator == 0 |==> numerator == 0 == (fraction.numerator == 0)
1060:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 || fraction.numerator == 0 |==> false
1061:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 || fraction.numerator == 0 |==> numerator == 0
1062:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 || fraction.numerator == 0 |==> fraction.numerator == 0
1063:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 || fraction.numerator == 0 |==> true
1064:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:numerator / d1 |==> numerator % d1
1065:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:numerator / d1 |==> numerator * d1
1066:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:numerator / d1 |==> numerator + d1
1067:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:numerator / d1 |==> numerator - d1
1068:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:fraction.numerator / d2 |==> fraction.numerator % d2
1069:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:fraction.numerator / d2 |==> fraction.numerator * d2
1070:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:fraction.numerator / d2 |==> fraction.numerator + d2
1071:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:fraction.numerator / d2 |==> fraction.numerator - d2
1072:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:denominator / d2 |==> denominator % d2
1073:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:denominator / d2 |==> denominator * d2
1074:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:denominator / d2 |==> denominator + d2
1075:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:denominator / d2 |==> denominator - d2
1076:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:fraction.denominator / d1 |==> fraction.denominator % d1
1077:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:fraction.denominator / d1 |==> fraction.denominator * d1
1078:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:fraction.denominator / d1 |==> fraction.denominator + d1
1079:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:fraction.denominator / d1 |==> fraction.denominator - d1
1080:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):812:fraction == null |==> fraction != null
1081:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):812:fraction == null |==> false
1082:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):812:fraction == null |==> true
1083:LVR:0:POS:org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):815:0 |==> 1
1084:LVR:0:NEG:org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):815:0 |==> -1
1085:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):815:fraction.numerator == 0 |==> fraction.numerator != 0
1086:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):815:fraction.numerator == 0 |==> fraction.numerator < 0
1087:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):815:fraction.numerator == 0 |==> fraction.numerator <= 0
1088:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):815:fraction.numerator == 0 |==> fraction.numerator > 0
1089:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):815:fraction.numerator == 0 |==> fraction.numerator >= 0
1090:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):815:fraction.numerator == 0 |==> false
1091:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):815:fraction.numerator == 0 |==> true
1092:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):833:obj == this |==> obj != this
1093:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):833:obj == this |==> false
1094:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):833:obj == this |==> true
1095:LVR:TRUE:FALSE:org.apache.commons.lang.math.Fraction@equals(java.lang.Object):834:true |==> false
1096:LVR:FALSE:TRUE:org.apache.commons.lang.math.Fraction@equals(java.lang.Object):836:false |==> true
1097:ROR:==(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):836:obj instanceof Fraction == false |==> obj instanceof Fraction != false
1098:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):836:obj instanceof Fraction == false |==> false
1099:ROR:==(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):836:obj instanceof Fraction == false |==> obj instanceof Fraction
1100:ROR:==(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):836:obj instanceof Fraction == false |==> false
1101:ROR:==(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):836:obj instanceof Fraction == false |==> true
1102:LVR:FALSE:TRUE:org.apache.commons.lang.math.Fraction@equals(java.lang.Object):837:false |==> true
1103:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() |==> getNumerator() != other.getNumerator()
1104:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() |==> getNumerator() < other.getNumerator()
1105:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() |==> getNumerator() <= other.getNumerator()
1106:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() |==> getNumerator() > other.getNumerator()
1107:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() |==> getNumerator() >= other.getNumerator()
1108:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() |==> false
1109:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() |==> true
1110:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):841:getDenominator() == other.getDenominator() |==> getDenominator() != other.getDenominator()
1111:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):841:getDenominator() == other.getDenominator() |==> getDenominator() < other.getDenominator()
1112:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):841:getDenominator() == other.getDenominator() |==> getDenominator() <= other.getDenominator()
1113:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):841:getDenominator() == other.getDenominator() |==> getDenominator() > other.getDenominator()
1114:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):841:getDenominator() == other.getDenominator() |==> getDenominator() >= other.getDenominator()
1115:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):841:getDenominator() == other.getDenominator() |==> false
1116:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):841:getDenominator() == other.getDenominator() |==> true
1117:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getNumerator() == other.getNumerator() != (getDenominator() == other.getDenominator())
1118:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getNumerator() == other.getNumerator() == (getDenominator() == other.getDenominator())
1119:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> false
1120:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getNumerator() == other.getNumerator()
1121:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):841:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getDenominator() == other.getDenominator()
1122:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> true
1123:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getNumerator() == other.getNumerator() || getDenominator() == other.getDenominator()
1124:LVR:0:POS:org.apache.commons.lang.math.Fraction@hashCode():850:0 |==> 1
1125:LVR:0:NEG:org.apache.commons.lang.math.Fraction@hashCode():850:0 |==> -1
1126:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@hashCode():850:hashCode == 0 |==> hashCode != 0
1127:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@hashCode():850:hashCode == 0 |==> hashCode < 0
1128:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@hashCode():850:hashCode == 0 |==> hashCode <= 0
1129:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@hashCode():850:hashCode == 0 |==> hashCode > 0
1130:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@hashCode():850:hashCode == 0 |==> hashCode >= 0
1131:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@hashCode():850:hashCode == 0 |==> false
1132:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@hashCode():850:hashCode == 0 |==> true
1133:LVR:POS:0:org.apache.commons.lang.math.Fraction@hashCode():852:37 |==> 0
1134:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@hashCode():852:37 |==> -37
1135:LVR:POS:0:org.apache.commons.lang.math.Fraction@hashCode():852:37 |==> 0
1136:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@hashCode():852:37 |==> -37
1137:LVR:POS:0:org.apache.commons.lang.math.Fraction@hashCode():852:17 |==> 0
1138:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@hashCode():852:17 |==> -17
1139:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 |==> 37 % 17
1140:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 |==> 37 + 17
1141:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 |==> 37 - 17
1142:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 |==> 37 / 17
1143:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 + getNumerator() |==> 37 * 17 % getNumerator()
1144:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 + getNumerator() |==> 37 * 17 * getNumerator()
1145:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 + getNumerator() |==> 37 * 17 - getNumerator()
1146:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 + getNumerator() |==> 37 * 17 / getNumerator()
1147:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) |==> 37 % (37 * 17 + getNumerator())
1148:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) |==> 37 + (37 * 17 + getNumerator())
1149:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) |==> 37 - (37 * 17 + getNumerator())
1150:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) |==> 37 / (37 * 17 + getNumerator())
1151:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) % getDenominator()
1152:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) * getDenominator()
1153:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) - getDenominator()
1154:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) / getDenominator()
1155:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@hashCode():852:hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator() |==> <NO-OP>
1156:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):871:this == other |==> this != other
1157:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):871:this == other |==> false
1158:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):871:this == other |==> true
1159:LVR:0:POS:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):872:0 |==> 1
1160:LVR:0:NEG:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):872:0 |==> -1
1161:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator |==> numerator != other.numerator
1162:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator |==> numerator < other.numerator
1163:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator |==> numerator <= other.numerator
1164:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator |==> numerator > other.numerator
1165:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator |==> numerator >= other.numerator
1166:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator |==> false
1167:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator |==> true
1168:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:denominator == other.denominator |==> denominator != other.denominator
1169:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:denominator == other.denominator |==> denominator < other.denominator
1170:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:denominator == other.denominator |==> denominator <= other.denominator
1171:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:denominator == other.denominator |==> denominator > other.denominator
1172:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:denominator == other.denominator |==> denominator >= other.denominator
1173:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:denominator == other.denominator |==> false
1174:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:denominator == other.denominator |==> true
1175:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator && denominator == other.denominator |==> numerator == other.numerator != (denominator == other.denominator)
1176:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator && denominator == other.denominator |==> numerator == other.numerator == (denominator == other.denominator)
1177:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator && denominator == other.denominator |==> false
1178:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator && denominator == other.denominator |==> numerator == other.numerator
1179:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator && denominator == other.denominator |==> denominator == other.denominator
1180:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator && denominator == other.denominator |==> true
1181:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator && denominator == other.denominator |==> numerator == other.numerator || denominator == other.denominator
1182:LVR:0:POS:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):875:0 |==> 1
1183:LVR:0:NEG:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):875:0 |==> -1
1184:AOR:*(long,long):%(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):879:(long)numerator * (long)other.denominator |==> (long)numerator % (long)other.denominator
1185:AOR:*(long,long):+(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):879:(long)numerator * (long)other.denominator |==> (long)numerator + (long)other.denominator
1186:AOR:*(long,long):-(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):879:(long)numerator * (long)other.denominator |==> (long)numerator - (long)other.denominator
1187:AOR:*(long,long):/(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):879:(long)numerator * (long)other.denominator |==> (long)numerator / (long)other.denominator
1188:AOR:*(long,long):%(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):880:(long)other.numerator * (long)denominator |==> (long)other.numerator % (long)denominator
1189:AOR:*(long,long):+(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):880:(long)other.numerator * (long)denominator |==> (long)other.numerator + (long)denominator
1190:AOR:*(long,long):-(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):880:(long)other.numerator * (long)denominator |==> (long)other.numerator - (long)denominator
1191:AOR:*(long,long):/(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):880:(long)other.numerator * (long)denominator |==> (long)other.numerator / (long)denominator
1192:ROR:==(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):881:first == second |==> first != second
1193:ROR:==(long,long):<(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):881:first == second |==> first < second
1194:ROR:==(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):881:first == second |==> first <= second
1195:ROR:==(long,long):>(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):881:first == second |==> first > second
1196:ROR:==(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):881:first == second |==> first >= second
1197:ROR:==(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):881:first == second |==> false
1198:ROR:==(long,long):TRUE(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):881:first == second |==> true
1199:LVR:0:POS:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):882:0 |==> 1
1200:LVR:0:NEG:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):882:0 |==> -1
1201:ROR:<(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):883:first < second |==> first != second
1202:ROR:<(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):883:first < second |==> first <= second
1203:ROR:<(long,long):==(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):883:first < second |==> first == second
1204:ROR:<(long,long):>(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):883:first < second |==> first > second
1205:ROR:<(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):883:first < second |==> first >= second
1206:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):883:first < second |==> false
1207:ROR:<(long,long):TRUE(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):883:first < second |==> true
1208:LVR:NEG:0:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):884:-1 |==> 0
1209:LVR:NEG:POS:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):884:-1 |==> 1
1210:LVR:POS:0:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):886:1 |==> 0
1211:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):886:1 |==> -1
1212:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@toString():898:toString == null |==> toString != null
1213:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@toString():898:toString == null |==> false
1214:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@toString():898:toString == null |==> true
1215:LVR:POS:0:org.apache.commons.lang.math.Fraction@toString():899:32 |==> 0
1216:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@toString():899:32 |==> -32
1217:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@toString():899:toString = new StringBuffer(32).append(getNumerator()).append('/').append(getDenominator()).toString() |==> <NO-OP>
1218:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@toProperString():917:toProperString == null |==> toProperString != null
1219:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@toProperString():917:toProperString == null |==> false
1220:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@toProperString():917:toProperString == null |==> true
1221:LVR:0:POS:org.apache.commons.lang.math.Fraction@toProperString():918:0 |==> 1
1222:LVR:0:NEG:org.apache.commons.lang.math.Fraction@toProperString():918:0 |==> -1
1223:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@toProperString():918:numerator == 0 |==> numerator != 0
1224:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@toProperString():918:numerator == 0 |==> numerator < 0
1225:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@toProperString():918:numerator == 0 |==> numerator <= 0
1226:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@toProperString():918:numerator == 0 |==> numerator > 0
1227:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@toProperString():918:numerator == 0 |==> numerator >= 0
1228:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@toProperString():918:numerator == 0 |==> false
1229:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@toProperString():918:numerator == 0 |==> true
1230:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@toProperString():919:toProperString = "0" |==> <NO-OP>
1231:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@toProperString():920:numerator == denominator |==> numerator != denominator
1232:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@toProperString():920:numerator == denominator |==> numerator < denominator
1233:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@toProperString():920:numerator == denominator |==> numerator <= denominator
1234:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@toProperString():920:numerator == denominator |==> numerator > denominator
1235:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@toProperString():920:numerator == denominator |==> numerator >= denominator
1236:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@toProperString():920:numerator == denominator |==> false
1237:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@toProperString():920:numerator == denominator |==> true
1238:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@toProperString():921:toProperString = "1" |==> <NO-OP>
1239:LVR:NEG:0:org.apache.commons.lang.math.Fraction@toProperString():922:-1 |==> 0
1240:LVR:NEG:POS:org.apache.commons.lang.math.Fraction@toProperString():922:-1 |==> 1
1241:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:-1 * denominator |==> -1 % denominator
1242:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:-1 * denominator |==> -1 + denominator
1243:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:-1 * denominator |==> -1 - denominator
1244:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:-1 * denominator |==> -1 / denominator
1245:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:numerator == -1 * denominator |==> numerator != -1 * denominator
1246:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:numerator == -1 * denominator |==> numerator < -1 * denominator
1247:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:numerator == -1 * denominator |==> numerator <= -1 * denominator
1248:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:numerator == -1 * denominator |==> numerator > -1 * denominator
1249:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:numerator == -1 * denominator |==> numerator >= -1 * denominator
1250:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:numerator == -1 * denominator |==> false
1251:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:numerator == -1 * denominator |==> true
1252:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@toProperString():923:toProperString = "-1" |==> <NO-OP>
1253:LVR:0:POS:org.apache.commons.lang.math.Fraction@toProperString():924:0 |==> 1
1254:LVR:0:NEG:org.apache.commons.lang.math.Fraction@toProperString():924:0 |==> -1
1255:ROR:>(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:numerator > 0 |==> numerator != 0
1256:ROR:>(int,int):<(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:numerator > 0 |==> numerator < 0
1257:ROR:>(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:numerator > 0 |==> numerator <= 0
1258:ROR:>(int,int):==(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:numerator > 0 |==> numerator == 0
1259:ROR:>(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:numerator > 0 |==> numerator >= 0
1260:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:numerator > 0 |==> false
1261:ROR:>(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:numerator > 0 |==> true
1262:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@toProperString():924:-numerator |==> +numerator
1263:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@toProperString():924:-numerator |==> ~numerator
1264:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@toProperString():924:-denominator |==> +denominator
1265:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@toProperString():924:-denominator |==> ~denominator
1266:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:(numerator > 0 ? -numerator : numerator) < -denominator |==> (numerator > 0 ? -numerator : numerator) != -denominator
1267:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:(numerator > 0 ? -numerator : numerator) < -denominator |==> (numerator > 0 ? -numerator : numerator) <= -denominator
1268:ROR:<(int,int):==(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:(numerator > 0 ? -numerator : numerator) < -denominator |==> (numerator > 0 ? -numerator : numerator) == -denominator
1269:ROR:<(int,int):>(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:(numerator > 0 ? -numerator : numerator) < -denominator |==> (numerator > 0 ? -numerator : numerator) > -denominator
1270:ROR:<(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:(numerator > 0 ? -numerator : numerator) < -denominator |==> (numerator > 0 ? -numerator : numerator) >= -denominator
1271:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:(numerator > 0 ? -numerator : numerator) < -denominator |==> false
1272:ROR:<(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:(numerator > 0 ? -numerator : numerator) < -denominator |==> true
1273:LVR:0:POS:org.apache.commons.lang.math.Fraction@toProperString():930:0 |==> 1
1274:LVR:0:NEG:org.apache.commons.lang.math.Fraction@toProperString():930:0 |==> -1
1275:ROR:==(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@toProperString():930:properNumerator == 0 |==> properNumerator != 0
1276:ROR:==(int,int):<(int,int):org.apache.commons.lang.math.Fraction@toProperString():930:properNumerator == 0 |==> properNumerator < 0
1277:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@toProperString():930:properNumerator == 0 |==> properNumerator <= 0
1278:ROR:==(int,int):>(int,int):org.apache.commons.lang.math.Fraction@toProperString():930:properNumerator == 0 |==> properNumerator > 0
1279:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@toProperString():930:properNumerator == 0 |==> properNumerator >= 0
1280:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@toProperString():930:properNumerator == 0 |==> false
1281:ROR:==(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@toProperString():930:properNumerator == 0 |==> true
1282:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@toProperString():931:toProperString = Integer.toString(getProperWhole()) |==> <NO-OP>
1283:LVR:POS:0:org.apache.commons.lang.math.Fraction@toProperString():933:32 |==> 0
1284:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@toProperString():933:32 |==> -32
1285:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@toProperString():933:toProperString = new StringBuffer(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString() |==> <NO-OP>
1286:LVR:POS:0:org.apache.commons.lang.math.Fraction@toProperString():939:32 |==> 0
1287:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@toProperString():939:32 |==> -32
1288:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@toProperString():939:toProperString = new StringBuffer(32).append(getNumerator()).append('/').append(getDenominator()).toString() |==> <NO-OP>