1:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@<init>(com.google.javascript.jscomp.AbstractCompiler,com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>,com.google.javascript.jscomp.type.ReverseAbstractInterpreter,com.google.javascript.jscomp.Scope,java.util.Map<java.lang.String,com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec>):98:inferArguments(functionScope) |==> <NO-OP>
2:COR:isUnflowable(var):TRUE:com.google.javascript.jscomp.TypeInference@<init>(com.google.javascript.jscomp.AbstractCompiler,com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>,com.google.javascript.jscomp.type.ReverseAbstractInterpreter,com.google.javascript.jscomp.Scope,java.util.Map<java.lang.String,com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec>):109:isUnflowable(var) |==> false
3:COR:isUnflowable(var):FALSE:com.google.javascript.jscomp.TypeInference@<init>(com.google.javascript.jscomp.AbstractCompiler,com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>,com.google.javascript.jscomp.type.ReverseAbstractInterpreter,com.google.javascript.jscomp.Scope,java.util.Map<java.lang.String,com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec>):109:isUnflowable(var) |==> true
4:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@<init>(com.google.javascript.jscomp.AbstractCompiler,com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>,com.google.javascript.jscomp.type.ReverseAbstractInterpreter,com.google.javascript.jscomp.Scope,java.util.Map<java.lang.String,com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec>):113:this.functionScope.inferSlotType(var.getName(), getNativeType(VOID_TYPE)) |==> <NO-OP>
5:COR:NodeUtil.isCallOrNewTarget(functionNode):TRUE:com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):129:NodeUtil.isCallOrNewTarget(functionNode) |==> false
6:COR:NodeUtil.isCallOrNewTarget(functionNode):FALSE:com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):129:NodeUtil.isCallOrNewTarget(functionNode) |==> true
7:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):130:iifeArgumentNode = functionNode.getNext() |==> <NO-OP>
8:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):135:functionType != null |==> functionType == null
9:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):135:functionType != null |==> false
10:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):135:functionType != null |==> true
11:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):137:parameterTypes != null |==> parameterTypes == null
12:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):137:parameterTypes != null |==> false
13:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):137:parameterTypes != null |==> true
14:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):141:Preconditions.checkNotNull(var) |==> <NO-OP>
15:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):143:var.getType() == unknownType |==> var.getType() != unknownType
16:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):143:var.getType() == unknownType |==> false
17:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):143:var.getType() == unknownType |==> true
18:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):142:var.isTypeInferred() && var.getType() == unknownType |==> var.isTypeInferred() != (var.getType() == unknownType)
19:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):142:var.isTypeInferred() && var.getType() == unknownType |==> var.isTypeInferred() == (var.getType() == unknownType)
20:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):142:var.isTypeInferred() && var.getType() == unknownType |==> false
21:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):142:var.isTypeInferred() && var.getType() == unknownType |==> var.isTypeInferred()
22:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):143:var.isTypeInferred() && var.getType() == unknownType |==> var.getType() == unknownType
23:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):142:var.isTypeInferred() && var.getType() == unknownType |==> true
24:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):142:var.isTypeInferred() && var.getType() == unknownType |==> var.isTypeInferred() || var.getType() == unknownType
25:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):146:iifeArgumentNode != null |==> iifeArgumentNode == null
26:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):146:iifeArgumentNode != null |==> false
27:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):146:iifeArgumentNode != null |==> true
28:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):147:newType = iifeArgumentNode.getJSType() |==> <NO-OP>
29:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):148:parameterTypeNode != null |==> parameterTypeNode == null
30:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):148:parameterTypeNode != null |==> false
31:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):148:parameterTypeNode != null |==> true
32:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):149:newType = parameterTypeNode.getJSType() |==> <NO-OP>
33:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):152:newType != null |==> newType == null
34:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):152:newType != null |==> false
35:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):152:newType != null |==> true
36:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):153:var.setType(newType) |==> <NO-OP>
37:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):154:astParameter.setJSType(newType) |==> <NO-OP>
38:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):158:parameterTypeNode != null |==> parameterTypeNode == null
39:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):158:parameterTypeNode != null |==> false
40:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):158:parameterTypeNode != null |==> true
41:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):159:parameterTypeNode = parameterTypeNode.getNext() |==> <NO-OP>
42:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):161:iifeArgumentNode != null |==> iifeArgumentNode == null
43:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):161:iifeArgumentNode != null |==> false
44:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):161:iifeArgumentNode != null |==> true
45:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@inferArguments(com.google.javascript.jscomp.Scope):162:iifeArgumentNode = iifeArgumentNode.getNext() |==> <NO-OP>
46:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@flowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):183:input == bottomScope |==> input != bottomScope
47:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@flowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):183:input == bottomScope |==> false
48:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@flowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):183:input == bottomScope |==> true
49:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@flowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):188:output = traverse(n, output) |==> <NO-OP>
50:COR:NodeUtil.isForIn(source):TRUE:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):213:NodeUtil.isForIn(source) |==> false
51:COR:NodeUtil.isForIn(source):FALSE:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):213:NodeUtil.isForIn(source) |==> true
52:COR:item.isVar():TRUE:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):220:item.isVar() |==> false
53:COR:item.isVar():FALSE:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):220:item.isVar() |==> true
54:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):221:item = item.getFirstChild() |==> <NO-OP>
55:COR:item.isName():TRUE:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):223:item.isName() |==> false
56:COR:item.isName():FALSE:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):223:item.isName() |==> true
57:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):226:objType == null |==> objType != null
58:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):226:objType == null |==> false
59:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):226:objType == null |==> true
60:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):229:objIndexType != null |==> objIndexType == null
61:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):229:objIndexType != null |==> false
62:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):229:objIndexType != null |==> true
63:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):229:objIndexType != null && !objIndexType.isUnknownType() |==> objIndexType != null != !objIndexType.isUnknownType()
64:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):229:objIndexType != null && !objIndexType.isUnknownType() |==> objIndexType != null == !objIndexType.isUnknownType()
65:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):229:objIndexType != null && !objIndexType.isUnknownType() |==> false
66:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):229:objIndexType != null && !objIndexType.isUnknownType() |==> objIndexType != null
67:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):229:objIndexType != null && !objIndexType.isUnknownType() |==> !objIndexType.isUnknownType()
68:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):229:objIndexType != null && !objIndexType.isUnknownType() |==> true
69:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):229:objIndexType != null && !objIndexType.isUnknownType() |==> objIndexType != null || !objIndexType.isUnknownType()
70:COR:narrowedKeyType.isEmptyType():TRUE:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):232:narrowedKeyType.isEmptyType() |==> false
71:COR:narrowedKeyType.isEmptyType():FALSE:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):232:narrowedKeyType.isEmptyType() |==> true
72:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):233:iterKeyType = narrowedKeyType |==> <NO-OP>
73:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):236:redeclareSimpleVar(informed, item, iterKeyType) |==> <NO-OP>
74:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):238:newScope = informed |==> <NO-OP>
75:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):245:condition == null |==> condition != null
76:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):245:condition == null |==> false
77:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):245:condition == null |==> true
78:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):246:condition = NodeUtil.getConditionExpression(source) |==> <NO-OP>
79:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):247:condition == null |==> condition != null
80:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):247:condition == null |==> false
81:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):247:condition == null |==> true
82:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):247:condition == null && source.isCase() |==> condition == null != source.isCase()
83:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):247:condition == null && source.isCase() |==> condition == null == source.isCase()
84:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):247:condition == null && source.isCase() |==> false
85:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):247:condition == null && source.isCase() |==> condition == null
86:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):247:condition == null && source.isCase() |==> source.isCase()
87:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):247:condition == null && source.isCase() |==> true
88:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):247:condition == null && source.isCase() |==> condition == null || source.isCase()
89:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):248:condition = source |==> <NO-OP>
90:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):252:conditionFlowScope == null |==> conditionFlowScope != null
91:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):252:conditionFlowScope == null |==> false
92:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):252:conditionFlowScope == null |==> true
93:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):253:conditionFlowScope = traverse(condition.getFirstChild(), output.createChildFlowScope()) |==> <NO-OP>
94:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):259:condition != null |==> condition == null
95:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):259:condition != null |==> false
96:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):259:condition != null |==> true
97:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):260:condition.isAnd() || condition.isOr() |==> condition.isAnd() != condition.isOr()
98:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):260:condition.isAnd() || condition.isOr() |==> condition.isAnd() && condition.isOr()
99:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):260:condition.isAnd() || condition.isOr() |==> condition.isAnd() == condition.isOr()
100:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):260:condition.isAnd() || condition.isOr() |==> false
101:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):260:condition.isAnd() || condition.isOr() |==> condition.isAnd()
102:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):261:condition.isAnd() || condition.isOr() |==> condition.isOr()
103:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):260:condition.isAnd() || condition.isOr() |==> true
104:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):276:conditionOutcomes == null |==> conditionOutcomes != null
105:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):276:conditionOutcomes == null |==> false
106:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):276:conditionOutcomes == null |==> true
107:COR:condition.isAnd():TRUE:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):277:condition.isAnd() |==> false
108:COR:condition.isAnd():FALSE:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):277:condition.isAnd() |==> true
109:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):277:conditionOutcomes = condition.isAnd() ? traverseAnd(condition, output.createChildFlowScope()) : traverseOr(condition, output.createChildFlowScope()) |==> <NO-OP>
110:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):285:branch == Branch.ON_TRUE |==> branch != Branch.ON_TRUE
111:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):285:branch == Branch.ON_TRUE |==> false
112:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):285:branch == Branch.ON_TRUE |==> true
113:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):286:branch == Branch.ON_TRUE |==> branch != Branch.ON_TRUE
114:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):286:branch == Branch.ON_TRUE |==> false
115:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):286:branch == Branch.ON_TRUE |==> true
116:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):281:newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(condition, conditionOutcomes.getOutcomeFlowScope(condition.getType(), branch == Branch.ON_TRUE), branch == Branch.ON_TRUE) |==> <NO-OP>
117:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):290:conditionFlowScope == null |==> conditionFlowScope != null
118:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):290:conditionFlowScope == null |==> false
119:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):290:conditionFlowScope == null |==> true
120:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):291:conditionFlowScope = traverse(condition, output.createChildFlowScope()) |==> <NO-OP>
121:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):296:branch == Branch.ON_TRUE |==> branch != Branch.ON_TRUE
122:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):296:branch == Branch.ON_TRUE |==> false
123:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):296:branch == Branch.ON_TRUE |==> true
124:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):294:newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(condition, conditionFlowScope, branch == Branch.ON_TRUE) |==> <NO-OP>
125:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@branchedFlowThrough(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):302:result.add(newScope.optimize()) |==> <NO-OP>
126:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):310:scope = traverseAssign(n, scope) |==> <NO-OP>
127:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):314:scope = traverseName(n, scope) |==> <NO-OP>
128:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):318:scope = traverseGetProp(n, scope) |==> <NO-OP>
129:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):322:scope = traverseAnd(n, scope).getJoinedFlowScope().createChildFlowScope() |==> <NO-OP>
130:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):327:scope = traverseOr(n, scope).getJoinedFlowScope().createChildFlowScope() |==> <NO-OP>
131:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):332:scope = traverseHook(n, scope) |==> <NO-OP>
132:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):336:scope = traverseObjectLiteral(n, scope) |==> <NO-OP>
133:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):340:scope = traverseCall(n, scope) |==> <NO-OP>
134:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):344:scope = traverseNew(n, scope) |==> <NO-OP>
135:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):349:scope = traverseAdd(n, scope) |==> <NO-OP>
136:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):354:scope = traverse(n.getFirstChild(), scope) |==> <NO-OP>
137:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):355:n.setJSType(getNativeType(NUMBER_TYPE)) |==> <NO-OP>
138:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):359:scope = traverseArrayLiteral(n, scope) |==> <NO-OP>
139:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):363:n.setJSType(scope.getTypeOfThis()) |==> <NO-OP>
140:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):389:scope = traverseChildren(n, scope) |==> <NO-OP>
141:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):390:n.setJSType(getNativeType(NUMBER_TYPE)) |==> <NO-OP>
142:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):394:scope = traverse(n.getFirstChild(), scope) |==> <NO-OP>
143:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):395:n.setJSType(getJSType(n.getFirstChild())) |==> <NO-OP>
144:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):399:scope = traverseChildren(n, scope) |==> <NO-OP>
145:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):400:n.setJSType(getJSType(n.getLastChild())) |==> <NO-OP>
146:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):404:scope = traverseChildren(n, scope) |==> <NO-OP>
147:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):405:n.setJSType(getNativeType(STRING_TYPE)) |==> <NO-OP>
148:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):420:scope = traverseChildren(n, scope) |==> <NO-OP>
149:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):421:n.setJSType(getNativeType(BOOLEAN_TYPE)) |==> <NO-OP>
150:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):425:scope = traverseGetElem(n, scope) |==> <NO-OP>
151:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):429:scope = traverseChildren(n, scope) |==> <NO-OP>
152:COR:n.getFirstChild().isGetProp():TRUE:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):430:n.getFirstChild().isGetProp() |==> false
153:COR:n.getFirstChild().isGetProp():FALSE:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):430:n.getFirstChild().isGetProp() |==> true
154:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):431:ensurePropertyDeclared(n.getFirstChild()) |==> <NO-OP>
155:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):436:scope = traverse(n.getFirstChild(), scope) |==> <NO-OP>
156:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):440:scope = traverseReturn(n, scope) |==> <NO-OP>
157:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):445:scope = traverseChildren(n, scope) |==> <NO-OP>
158:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):449:scope = traverseCatch(n, scope) |==> <NO-OP>
159:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):453:scope = traverseChildren(n, scope) |==> <NO-OP>
160:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):455:info != null |==> info == null
161:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):455:info != null |==> false
162:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):455:info != null |==> true
163:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):455:info != null && info.hasType() |==> info != null != info.hasType()
164:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):455:info != null && info.hasType() |==> info != null == info.hasType()
165:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):455:info != null && info.hasType() |==> false
166:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):455:info != null && info.hasType() |==> info != null
167:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):455:info != null && info.hasType() |==> info.hasType()
168:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):455:info != null && info.hasType() |==> true
169:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):455:info != null && info.hasType() |==> info != null || info.hasType()
170:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverse(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):456:n.setJSType(info.getType().evaluate(syntacticScope, registry)) |==> <NO-OP>
171:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseReturn(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):468:scope = traverseChildren(n, scope) |==> <NO-OP>
172:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseReturn(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):471:retValue != null |==> retValue == null
173:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseReturn(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):471:retValue != null |==> false
174:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseReturn(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):471:retValue != null |==> true
175:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseReturn(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):473:type != null |==> type == null
176:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseReturn(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):473:type != null |==> false
177:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseReturn(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):473:type != null |==> true
178:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseReturn(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):475:fnType != null |==> fnType == null
179:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseReturn(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):475:fnType != null |==> false
180:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseReturn(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):475:fnType != null |==> true
181:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseReturn(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):476:inferPropertyTypesToMatchConstraint(retValue.getJSType(), fnType.getReturnType()) |==> <NO-OP>
182:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseCatch(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):494:info != null |==> info == null
183:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseCatch(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):494:info != null |==> false
184:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseCatch(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):494:info != null |==> true
185:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseCatch(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):494:info != null && info.hasType() |==> info != null != info.hasType()
186:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseCatch(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):494:info != null && info.hasType() |==> info != null == info.hasType()
187:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseCatch(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):494:info != null && info.hasType() |==> false
188:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseCatch(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):494:info != null && info.hasType() |==> info != null
189:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseCatch(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):494:info != null && info.hasType() |==> info.hasType()
190:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseCatch(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):494:info != null && info.hasType() |==> true
191:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseCatch(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):494:info != null && info.hasType() |==> info != null || info.hasType()
192:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseCatch(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):499:redeclareSimpleVar(scope, name, type) |==> <NO-OP>
193:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseCatch(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):500:name.setJSType(type) |==> <NO-OP>
194:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseAssign(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):507:scope = traverseChildren(n, scope) |==> <NO-OP>
195:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseAssign(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):511:n.setJSType(rightType) |==> <NO-OP>
196:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseAssign(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):513:updateScopeForTypeChange(scope, left, leftType, rightType) |==> <NO-OP>
197:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):523:Preconditions.checkNotNull(resultType) |==> <NO-OP>
198:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:var == null |==> var != null
199:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:var == null |==> false
200:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:var == null |==> true
201:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:!isVarDeclaration || var == null |==> !isVarDeclaration != (var == null)
202:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:!isVarDeclaration || var == null |==> !isVarDeclaration && var == null
203:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:!isVarDeclaration || var == null |==> !isVarDeclaration == (var == null)
204:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:!isVarDeclaration || var == null |==> false
205:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:!isVarDeclaration || var == null |==> !isVarDeclaration
206:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:!isVarDeclaration || var == null |==> var == null
207:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:!isVarDeclaration || var == null |==> true
208:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:!isVarDeclaration || var == null || var.isTypeInferred() |==> (!isVarDeclaration || var == null) != var.isTypeInferred()
209:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:!isVarDeclaration || var == null || var.isTypeInferred() |==> (!isVarDeclaration || var == null) && var.isTypeInferred()
210:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:!isVarDeclaration || var == null || var.isTypeInferred() |==> (!isVarDeclaration || var == null) == var.isTypeInferred()
211:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:!isVarDeclaration || var == null || var.isTypeInferred() |==> false
212:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:!isVarDeclaration || var == null || var.isTypeInferred() |==> !isVarDeclaration || var == null
213:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:!isVarDeclaration || var == null || var.isTypeInferred() |==> var.isTypeInferred()
214:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):540:!isVarDeclaration || var == null || var.isTypeInferred() |==> true
215:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):541:redeclareSimpleVar(scope, left, resultType) |==> <NO-OP>
216:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):543:leftType == null |==> leftType != null
217:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):543:leftType == null |==> false
218:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):543:leftType == null |==> true
219:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):543:isVarDeclaration || leftType == null |==> isVarDeclaration != (leftType == null)
220:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):543:isVarDeclaration || leftType == null |==> isVarDeclaration && leftType == null
221:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):543:isVarDeclaration || leftType == null |==> isVarDeclaration == (leftType == null)
222:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):543:isVarDeclaration || leftType == null |==> false
223:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):543:isVarDeclaration || leftType == null |==> isVarDeclaration
224:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):543:isVarDeclaration || leftType == null |==> leftType == null
225:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):543:isVarDeclaration || leftType == null |==> true
226:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):543:left.setJSType(isVarDeclaration || leftType == null ? resultType : null) |==> <NO-OP>
227:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):546:var != null |==> var == null
228:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):546:var != null |==> false
229:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):546:var != null |==> true
230:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):546:var != null && var.isTypeInferred() |==> var != null != var.isTypeInferred()
231:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):546:var != null && var.isTypeInferred() |==> var != null == var.isTypeInferred()
232:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):546:var != null && var.isTypeInferred() |==> false
233:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):546:var != null && var.isTypeInferred() |==> var != null
234:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):546:var != null && var.isTypeInferred() |==> var.isTypeInferred()
235:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):546:var != null && var.isTypeInferred() |==> true
236:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):546:var != null && var.isTypeInferred() |==> var != null || var.isTypeInferred()
237:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):548:oldType == null |==> oldType != null
238:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):548:oldType == null |==> false
239:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):548:oldType == null |==> true
240:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):548:var.setType(oldType == null ? resultType : oldType.getLeastSupertype(resultType)) |==> <NO-OP>
241:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):554:qualifiedName != null |==> qualifiedName == null
242:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):554:qualifiedName != null |==> false
243:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):554:qualifiedName != null |==> true
244:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):556:leftType == null |==> leftType != null
245:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):556:leftType == null |==> false
246:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):556:leftType == null |==> true
247:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):555:scope.inferQualifiedSlot(left, qualifiedName, leftType == null ? unknownType : leftType, resultType) |==> <NO-OP>
248:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):560:left.setJSType(resultType) |==> <NO-OP>
249:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@updateScopeForTypeChange(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):561:ensurePropertyDefined(left, resultType) |==> <NO-OP>
250:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):575:obj.isThis() && getJSType(syntacticScope.getRootNode()).isConstructor() |==> obj.isThis() != getJSType(syntacticScope.getRootNode()).isConstructor()
251:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):575:obj.isThis() && getJSType(syntacticScope.getRootNode()).isConstructor() |==> obj.isThis() == getJSType(syntacticScope.getRootNode()).isConstructor()
252:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):575:obj.isThis() && getJSType(syntacticScope.getRootNode()).isConstructor() |==> false
253:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):575:obj.isThis() && getJSType(syntacticScope.getRootNode()).isConstructor() |==> obj.isThis()
254:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):576:obj.isThis() && getJSType(syntacticScope.getRootNode()).isConstructor() |==> getJSType(syntacticScope.getRootNode()).isConstructor()
255:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):575:obj.isThis() && getJSType(syntacticScope.getRootNode()).isConstructor() |==> true
256:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):575:obj.isThis() && getJSType(syntacticScope.getRootNode()).isConstructor() |==> obj.isThis() || getJSType(syntacticScope.getRootNode()).isConstructor()
257:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):578:objectType == null |==> objectType != null
258:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):578:objectType == null |==> false
259:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):578:objectType == null |==> true
260:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):579:registry.registerPropertyOnType(propName, nodeType) |==> <NO-OP>
261:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):581:nodeType.isStruct() && !objectType.hasProperty(propName) |==> nodeType.isStruct() != !objectType.hasProperty(propName)
262:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):581:nodeType.isStruct() && !objectType.hasProperty(propName) |==> nodeType.isStruct() == !objectType.hasProperty(propName)
263:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):581:nodeType.isStruct() && !objectType.hasProperty(propName) |==> false
264:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):581:nodeType.isStruct() && !objectType.hasProperty(propName) |==> nodeType.isStruct()
265:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):581:nodeType.isStruct() && !objectType.hasProperty(propName) |==> !objectType.hasProperty(propName)
266:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):581:nodeType.isStruct() && !objectType.hasProperty(propName) |==> true
267:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):581:nodeType.isStruct() && !objectType.hasProperty(propName) |==> nodeType.isStruct() || !objectType.hasProperty(propName)
268:LVR:FALSE:TRUE:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):591:false |==> true
269:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):593:syntacticScope.isGlobal() && NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm) |==> syntacticScope.isGlobal() != NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm)
270:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):593:syntacticScope.isGlobal() && NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm) |==> syntacticScope.isGlobal() == NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm)
271:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):593:syntacticScope.isGlobal() && NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm) |==> false
272:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):593:syntacticScope.isGlobal() && NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm) |==> syntacticScope.isGlobal()
273:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):594:syntacticScope.isGlobal() && NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm) |==> NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm)
274:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):593:syntacticScope.isGlobal() && NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm) |==> true
275:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):593:syntacticScope.isGlobal() && NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm) |==> syntacticScope.isGlobal() || NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm)
276:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):597:ctor != null |==> ctor == null
277:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):597:ctor != null |==> false
278:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):597:ctor != null |==> true
279:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):597:ctor != null && ctor.getSourceFileName().equals(propCreationFilename) |==> ctor != null != ctor.getSourceFileName().equals(propCreationFilename)
280:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):597:ctor != null && ctor.getSourceFileName().equals(propCreationFilename) |==> ctor != null == ctor.getSourceFileName().equals(propCreationFilename)
281:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):597:ctor != null && ctor.getSourceFileName().equals(propCreationFilename) |==> false
282:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):597:ctor != null && ctor.getSourceFileName().equals(propCreationFilename) |==> ctor != null
283:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):598:ctor != null && ctor.getSourceFileName().equals(propCreationFilename) |==> ctor.getSourceFileName().equals(propCreationFilename)
284:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):597:ctor != null && ctor.getSourceFileName().equals(propCreationFilename) |==> true
285:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):597:ctor != null && ctor.getSourceFileName().equals(propCreationFilename) |==> ctor != null || ctor.getSourceFileName().equals(propCreationFilename)
286:LVR:TRUE:FALSE:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):599:true |==> false
287:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):599:staticPropCreation = true |==> <NO-OP>
288:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):602:!propCreationInConstructor && !staticPropCreation |==> !propCreationInConstructor != !staticPropCreation
289:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):602:!propCreationInConstructor && !staticPropCreation |==> !propCreationInConstructor == !staticPropCreation
290:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):602:!propCreationInConstructor && !staticPropCreation |==> false
291:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):602:!propCreationInConstructor && !staticPropCreation |==> !propCreationInConstructor
292:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):602:!propCreationInConstructor && !staticPropCreation |==> !staticPropCreation
293:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):602:!propCreationInConstructor && !staticPropCreation |==> true
294:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):602:!propCreationInConstructor && !staticPropCreation |==> !propCreationInConstructor || !staticPropCreation
295:COR:ensurePropertyDeclaredHelper(getprop, objectType):TRUE:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):607:ensurePropertyDeclaredHelper(getprop, objectType) |==> false
296:COR:ensurePropertyDeclaredHelper(getprop, objectType):FALSE:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):607:ensurePropertyDeclaredHelper(getprop, objectType) |==> true
297:COR:objectType.isPropertyTypeDeclared(propName):TRUE:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):611:objectType.isPropertyTypeDeclared(propName) |==> false
298:COR:objectType.isPropertyTypeDeclared(propName):FALSE:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):611:objectType.isPropertyTypeDeclared(propName) |==> true
299:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):624:objectType.hasProperty(propName) || !objectType.isInstanceType() |==> objectType.hasProperty(propName) != !objectType.isInstanceType()
300:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):624:objectType.hasProperty(propName) || !objectType.isInstanceType() |==> objectType.hasProperty(propName) && !objectType.isInstanceType()
301:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):624:objectType.hasProperty(propName) || !objectType.isInstanceType() |==> objectType.hasProperty(propName) == !objectType.isInstanceType()
302:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):624:objectType.hasProperty(propName) || !objectType.isInstanceType() |==> false
303:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):624:objectType.hasProperty(propName) || !objectType.isInstanceType() |==> objectType.hasProperty(propName)
304:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):624:objectType.hasProperty(propName) || !objectType.isInstanceType() |==> !objectType.isInstanceType()
305:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):624:objectType.hasProperty(propName) || !objectType.isInstanceType() |==> true
306:COR:"prototype".equals(propName):TRUE:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):625:"prototype".equals(propName) |==> false
307:COR:"prototype".equals(propName):FALSE:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):625:"prototype".equals(propName) |==> true
308:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):626:objectType.defineDeclaredProperty(propName, rightType, getprop) |==> <NO-OP>
309:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):628:objectType.defineInferredProperty(propName, rightType, getprop) |==> <NO-OP>
310:COR:propCreationInConstructor:TRUE:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):630:propCreationInConstructor |==> false
311:COR:propCreationInConstructor:FALSE:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):630:propCreationInConstructor |==> true
312:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):631:objectType.defineInferredProperty(propName, rightType, getprop) |==> <NO-OP>
313:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@ensurePropertyDefined(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):633:registry.registerPropertyOnType(propName, objectType) |==> <NO-OP>
314:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclared(com.google.javascript.rhino.Node):649:ownerType != null |==> ownerType == null
315:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclared(com.google.javascript.rhino.Node):649:ownerType != null |==> false
316:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclared(com.google.javascript.rhino.Node):649:ownerType != null |==> true
317:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@ensurePropertyDeclared(com.google.javascript.rhino.Node):650:ensurePropertyDeclaredHelper(getprop, ownerType) |==> <NO-OP>
318:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):662:qName != null |==> qName == null
319:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):662:qName != null |==> false
320:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):662:qName != null |==> true
321:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):664:var != null |==> var == null
322:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):664:var != null |==> false
323:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):664:var != null |==> true
324:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):664:var != null && !var.isTypeInferred() |==> var != null != !var.isTypeInferred()
325:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):664:var != null && !var.isTypeInferred() |==> var != null == !var.isTypeInferred()
326:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):664:var != null && !var.isTypeInferred() |==> false
327:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):664:var != null && !var.isTypeInferred() |==> var != null
328:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):664:var != null && !var.isTypeInferred() |==> !var.isTypeInferred()
329:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):664:var != null && !var.isTypeInferred() |==> true
330:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):664:var != null && !var.isTypeInferred() |==> var != null || !var.isTypeInferred()
331:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):670:var.isExtern() && !objectType.isNativeObjectType() |==> var.isExtern() != !objectType.isNativeObjectType()
332:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):670:var.isExtern() && !objectType.isNativeObjectType() |==> var.isExtern() == !objectType.isNativeObjectType()
333:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):670:var.isExtern() && !objectType.isNativeObjectType() |==> false
334:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):670:var.isExtern() && !objectType.isNativeObjectType() |==> var.isExtern()
335:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):670:var.isExtern() && !objectType.isNativeObjectType() |==> !objectType.isNativeObjectType()
336:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):670:var.isExtern() && !objectType.isNativeObjectType() |==> true
337:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):670:var.isExtern() && !objectType.isNativeObjectType() |==> var.isExtern() || !objectType.isNativeObjectType()
338:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):669:!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()) |==> !objectType.isInstanceType() != (var.isExtern() && !objectType.isNativeObjectType())
339:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):669:!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()) |==> !objectType.isInstanceType() && (var.isExtern() && !objectType.isNativeObjectType())
340:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):669:!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()) |==> !objectType.isInstanceType() == (var.isExtern() && !objectType.isNativeObjectType())
341:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):669:!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()) |==> false
342:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):669:!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()) |==> !objectType.isInstanceType()
343:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):670:!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()) |==> (var.isExtern() && !objectType.isNativeObjectType())
344:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):669:!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()) |==> true
345:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):668:!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())) |==> !objectType.hasOwnProperty(propName) != (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()))
346:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):668:!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())) |==> !objectType.hasOwnProperty(propName) == (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()))
347:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):668:!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())) |==> false
348:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):668:!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())) |==> !objectType.hasOwnProperty(propName)
349:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):669:!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())) |==> (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()))
350:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):668:!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())) |==> true
351:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):668:!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())) |==> !objectType.hasOwnProperty(propName) || (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()))
352:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):666:propName.equals("prototype") || (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()))) |==> propName.equals("prototype") != (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())))
353:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):666:propName.equals("prototype") || (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()))) |==> propName.equals("prototype") && (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())))
354:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):666:propName.equals("prototype") || (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()))) |==> propName.equals("prototype") == (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())))
355:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):666:propName.equals("prototype") || (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()))) |==> false
356:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):666:propName.equals("prototype") || (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()))) |==> propName.equals("prototype")
357:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):668:propName.equals("prototype") || (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()))) |==> (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())))
358:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):666:propName.equals("prototype") || (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType()))) |==> true
359:LVR:FALSE:TRUE:com.google.javascript.jscomp.TypeInference@ensurePropertyDeclaredHelper(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.ObjectType):676:false |==> true
360:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):683:value != null |==> value == null
361:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):683:value != null |==> false
362:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):683:value != null |==> true
363:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):684:scope = traverse(value, scope) |==> <NO-OP>
364:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):685:updateScopeForTypeChange(scope, n, n.getJSType(), getJSType(value)) |==> <NO-OP>
365:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):690:var != null |==> var == null
366:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):690:var != null |==> false
367:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):690:var != null |==> true
368:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):697:isInferred && isUnflowable(syntacticScope.getVar(varName)) |==> isInferred != isUnflowable(syntacticScope.getVar(varName))
369:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):697:isInferred && isUnflowable(syntacticScope.getVar(varName)) |==> isInferred == isUnflowable(syntacticScope.getVar(varName))
370:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):697:isInferred && isUnflowable(syntacticScope.getVar(varName)) |==> false
371:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):697:isInferred && isUnflowable(syntacticScope.getVar(varName)) |==> isInferred
372:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):698:isInferred && isUnflowable(syntacticScope.getVar(varName)) |==> isUnflowable(syntacticScope.getVar(varName))
373:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):697:isInferred && isUnflowable(syntacticScope.getVar(varName)) |==> true
374:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):697:isInferred && isUnflowable(syntacticScope.getVar(varName)) |==> isInferred || isUnflowable(syntacticScope.getVar(varName))
375:LVR:FALSE:TRUE:com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):713:false |==> true
376:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):714:isInferred && syntacticScope.isLocal() |==> isInferred != syntacticScope.isLocal()
377:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):714:isInferred && syntacticScope.isLocal() |==> isInferred == syntacticScope.isLocal()
378:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):714:isInferred && syntacticScope.isLocal() |==> false
379:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):714:isInferred && syntacticScope.isLocal() |==> isInferred
380:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):714:isInferred && syntacticScope.isLocal() |==> syntacticScope.isLocal()
381:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):714:isInferred && syntacticScope.isLocal() |==> true
382:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):714:isInferred && syntacticScope.isLocal() |==> isInferred || syntacticScope.isLocal()
383:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):716:var == maybeOuterVar |==> var != maybeOuterVar
384:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):716:var == maybeOuterVar |==> false
385:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):716:var == maybeOuterVar |==> true
386:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):716:var == maybeOuterVar && !maybeOuterVar.isMarkedAssignedExactlyOnce() |==> var == maybeOuterVar != !maybeOuterVar.isMarkedAssignedExactlyOnce()
387:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):716:var == maybeOuterVar && !maybeOuterVar.isMarkedAssignedExactlyOnce() |==> var == maybeOuterVar == !maybeOuterVar.isMarkedAssignedExactlyOnce()
388:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):716:var == maybeOuterVar && !maybeOuterVar.isMarkedAssignedExactlyOnce() |==> false
389:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):716:var == maybeOuterVar && !maybeOuterVar.isMarkedAssignedExactlyOnce() |==> var == maybeOuterVar
390:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):717:var == maybeOuterVar && !maybeOuterVar.isMarkedAssignedExactlyOnce() |==> !maybeOuterVar.isMarkedAssignedExactlyOnce()
391:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):716:var == maybeOuterVar && !maybeOuterVar.isMarkedAssignedExactlyOnce() |==> true
392:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):716:var == maybeOuterVar && !maybeOuterVar.isMarkedAssignedExactlyOnce() |==> var == maybeOuterVar || !maybeOuterVar.isMarkedAssignedExactlyOnce()
393:LVR:TRUE:FALSE:com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):718:true |==> false
394:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):718:nonLocalInferredSlot = true |==> <NO-OP>
395:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):722:!unflowable && !nonLocalInferredSlot |==> !unflowable != !nonLocalInferredSlot
396:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):722:!unflowable && !nonLocalInferredSlot |==> !unflowable == !nonLocalInferredSlot
397:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):722:!unflowable && !nonLocalInferredSlot |==> false
398:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):722:!unflowable && !nonLocalInferredSlot |==> !unflowable
399:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):722:!unflowable && !nonLocalInferredSlot |==> !nonLocalInferredSlot
400:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):722:!unflowable && !nonLocalInferredSlot |==> true
401:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):722:!unflowable && !nonLocalInferredSlot |==> !unflowable || !nonLocalInferredSlot
402:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):723:type = var.getType() |==> <NO-OP>
403:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):724:type == null |==> type != null
404:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):724:type == null |==> false
405:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):724:type == null |==> true
406:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):725:type = unknownType |==> <NO-OP>
407:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseName(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):730:n.setJSType(type) |==> <NO-OP>
408:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseArrayLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):736:scope = traverseChildren(n, scope) |==> <NO-OP>
409:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseArrayLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):737:n.setJSType(getNativeType(ARRAY_TYPE)) |==> <NO-OP>
410:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):743:Preconditions.checkNotNull(type) |==> <NO-OP>
411:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):745:name != null |==> name == null
412:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):745:name != null |==> false
413:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):745:name != null |==> true
414:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):746:scope = traverse(name.getFirstChild(), scope) |==> <NO-OP>
415:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):753:objectType == null |==> objectType != null
416:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):753:objectType == null |==> false
417:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):753:objectType == null |==> true
418:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):753:objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT) |==> objectType == null != n.getBooleanProp(Node.REFLECTED_OBJECT)
419:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):753:objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT) |==> objectType == null && n.getBooleanProp(Node.REFLECTED_OBJECT)
420:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):753:objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT) |==> objectType == null == n.getBooleanProp(Node.REFLECTED_OBJECT)
421:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):754:objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT) |==> false
422:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):753:objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT) |==> objectType == null
423:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):754:objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT) |==> n.getBooleanProp(Node.REFLECTED_OBJECT)
424:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):754:objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT) |==> true
425:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):753:objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT) || objectType.isEnumType() |==> (objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT)) != objectType.isEnumType()
426:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):753:objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT) || objectType.isEnumType() |==> (objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT)) && objectType.isEnumType()
427:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):753:objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT) || objectType.isEnumType() |==> (objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT)) == objectType.isEnumType()
428:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):755:objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT) || objectType.isEnumType() |==> false
429:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):753:objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT) || objectType.isEnumType() |==> objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT)
430:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):755:objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT) || objectType.isEnumType() |==> objectType.isEnumType()
431:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):755:objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT) || objectType.isEnumType() |==> true
432:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):761:name != null |==> name == null
433:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):761:name != null |==> false
434:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):761:name != null |==> true
435:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):764:memberName != null |==> memberName == null
436:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):764:memberName != null |==> false
437:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):764:memberName != null |==> true
438:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):768:valueType == null |==> valueType != null
439:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):768:valueType == null |==> false
440:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):768:valueType == null |==> true
441:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):769:valueType = unknownType |==> <NO-OP>
442:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):771:objectType.defineInferredProperty(memberName, valueType, name) |==> <NO-OP>
443:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):774:qObjName != null |==> qObjName == null
444:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):774:qObjName != null |==> false
445:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):774:qObjName != null |==> true
446:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):774:qObjName != null && name.isStringKey() |==> qObjName != null != name.isStringKey()
447:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):774:qObjName != null && name.isStringKey() |==> qObjName != null == name.isStringKey()
448:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):774:qObjName != null && name.isStringKey() |==> false
449:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):774:qObjName != null && name.isStringKey() |==> qObjName != null
450:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):774:qObjName != null && name.isStringKey() |==> name.isStringKey()
451:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):774:qObjName != null && name.isStringKey() |==> true
452:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):774:qObjName != null && name.isStringKey() |==> qObjName != null || name.isStringKey()
453:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):777:var == null |==> var != null
454:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):777:var == null |==> false
455:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):777:var == null |==> true
456:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):778:var != null |==> var == null
457:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):778:var != null |==> false
458:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):778:var != null |==> true
459:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):778:var != null && var.isTypeInferred() |==> var != null != var.isTypeInferred()
460:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):778:var != null && var.isTypeInferred() |==> var != null == var.isTypeInferred()
461:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):778:var != null && var.isTypeInferred() |==> false
462:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):778:var != null && var.isTypeInferred() |==> var != null
463:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):778:var != null && var.isTypeInferred() |==> var.isTypeInferred()
464:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):778:var != null && var.isTypeInferred() |==> true
465:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):778:var != null && var.isTypeInferred() |==> var != null || var.isTypeInferred()
466:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):779:oldType == null |==> oldType != null
467:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):779:oldType == null |==> false
468:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):779:oldType == null |==> true
469:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):779:var.setType(oldType == null ? valueType : oldType.getLeastSupertype(oldType)) |==> <NO-OP>
470:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):784:oldType == null |==> oldType != null
471:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):784:oldType == null |==> false
472:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):784:oldType == null |==> true
473:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):783:scope.inferQualifiedSlot(name, qKeyName, oldType == null ? unknownType : oldType, valueType) |==> <NO-OP>
474:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseObjectLiteral(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):788:n.setJSType(unknownType) |==> <NO-OP>
475:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):797:scope = traverseChildren(n, scope) |==> <NO-OP>
476:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):803:leftType != null |==> leftType == null
477:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):803:leftType != null |==> false
478:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):803:leftType != null |==> true
479:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):803:rightType != null |==> rightType == null
480:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):803:rightType != null |==> false
481:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):803:rightType != null |==> true
482:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):803:leftType != null && rightType != null |==> leftType != null != (rightType != null)
483:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):803:leftType != null && rightType != null |==> leftType != null == (rightType != null)
484:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):803:leftType != null && rightType != null |==> false
485:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):803:leftType != null && rightType != null |==> leftType != null
486:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):803:leftType != null && rightType != null |==> rightType != null
487:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):803:leftType != null && rightType != null |==> true
488:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):803:leftType != null && rightType != null |==> leftType != null || rightType != null
489:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):806:leftIsUnknown && rightIsUnknown |==> leftIsUnknown != rightIsUnknown
490:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):806:leftIsUnknown && rightIsUnknown |==> leftIsUnknown == rightIsUnknown
491:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):806:leftIsUnknown && rightIsUnknown |==> false
492:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):806:leftIsUnknown && rightIsUnknown |==> leftIsUnknown
493:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):806:leftIsUnknown && rightIsUnknown |==> rightIsUnknown
494:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):806:leftIsUnknown && rightIsUnknown |==> true
495:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):806:leftIsUnknown && rightIsUnknown |==> leftIsUnknown || rightIsUnknown
496:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):807:type = unknownType |==> <NO-OP>
497:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):808:!leftIsUnknown && leftType.isString() |==> !leftIsUnknown != leftType.isString()
498:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):808:!leftIsUnknown && leftType.isString() |==> !leftIsUnknown == leftType.isString()
499:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):808:!leftIsUnknown && leftType.isString() |==> false
500:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):808:!leftIsUnknown && leftType.isString() |==> !leftIsUnknown
501:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):808:!leftIsUnknown && leftType.isString() |==> leftType.isString()
502:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):808:!leftIsUnknown && leftType.isString() |==> true
503:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):808:!leftIsUnknown && leftType.isString() |==> !leftIsUnknown || leftType.isString()
504:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):809:!rightIsUnknown && rightType.isString() |==> !rightIsUnknown != rightType.isString()
505:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):809:!rightIsUnknown && rightType.isString() |==> !rightIsUnknown == rightType.isString()
506:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):809:!rightIsUnknown && rightType.isString() |==> false
507:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):809:!rightIsUnknown && rightType.isString() |==> !rightIsUnknown
508:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):809:!rightIsUnknown && rightType.isString() |==> rightType.isString()
509:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):809:!rightIsUnknown && rightType.isString() |==> true
510:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):809:!rightIsUnknown && rightType.isString() |==> !rightIsUnknown || rightType.isString()
511:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):808:(!leftIsUnknown && leftType.isString()) || (!rightIsUnknown && rightType.isString()) |==> (!leftIsUnknown && leftType.isString()) != (!rightIsUnknown && rightType.isString())
512:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):808:(!leftIsUnknown && leftType.isString()) || (!rightIsUnknown && rightType.isString()) |==> (!leftIsUnknown && leftType.isString()) && (!rightIsUnknown && rightType.isString())
513:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):808:(!leftIsUnknown && leftType.isString()) || (!rightIsUnknown && rightType.isString()) |==> (!leftIsUnknown && leftType.isString()) == (!rightIsUnknown && rightType.isString())
514:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):808:(!leftIsUnknown && leftType.isString()) || (!rightIsUnknown && rightType.isString()) |==> false
515:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):808:(!leftIsUnknown && leftType.isString()) || (!rightIsUnknown && rightType.isString()) |==> (!leftIsUnknown && leftType.isString())
516:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):809:(!leftIsUnknown && leftType.isString()) || (!rightIsUnknown && rightType.isString()) |==> (!rightIsUnknown && rightType.isString())
517:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):808:(!leftIsUnknown && leftType.isString()) || (!rightIsUnknown && rightType.isString()) |==> true
518:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):810:type = getNativeType(STRING_TYPE) |==> <NO-OP>
519:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):811:leftIsUnknown || rightIsUnknown |==> leftIsUnknown != rightIsUnknown
520:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):811:leftIsUnknown || rightIsUnknown |==> leftIsUnknown && rightIsUnknown
521:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):811:leftIsUnknown || rightIsUnknown |==> leftIsUnknown == rightIsUnknown
522:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):811:leftIsUnknown || rightIsUnknown |==> false
523:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):811:leftIsUnknown || rightIsUnknown |==> leftIsUnknown
524:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):811:leftIsUnknown || rightIsUnknown |==> rightIsUnknown
525:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):811:leftIsUnknown || rightIsUnknown |==> true
526:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):812:type = unknownType |==> <NO-OP>
527:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):813:isAddedAsNumber(leftType) && isAddedAsNumber(rightType) |==> isAddedAsNumber(leftType) != isAddedAsNumber(rightType)
528:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):813:isAddedAsNumber(leftType) && isAddedAsNumber(rightType) |==> isAddedAsNumber(leftType) == isAddedAsNumber(rightType)
529:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):813:isAddedAsNumber(leftType) && isAddedAsNumber(rightType) |==> false
530:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):813:isAddedAsNumber(leftType) && isAddedAsNumber(rightType) |==> isAddedAsNumber(leftType)
531:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):813:isAddedAsNumber(leftType) && isAddedAsNumber(rightType) |==> isAddedAsNumber(rightType)
532:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):813:isAddedAsNumber(leftType) && isAddedAsNumber(rightType) |==> true
533:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):813:isAddedAsNumber(leftType) && isAddedAsNumber(rightType) |==> isAddedAsNumber(leftType) || isAddedAsNumber(rightType)
534:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):814:type = getNativeType(NUMBER_TYPE) |==> <NO-OP>
535:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):816:type = registry.createUnionType(STRING_TYPE, NUMBER_TYPE) |==> <NO-OP>
536:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):819:n.setJSType(type) |==> <NO-OP>
537:COR:n.isAssignAdd():TRUE:com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):821:n.isAssignAdd() |==> false
538:COR:n.isAssignAdd():FALSE:com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):821:n.isAssignAdd() |==> true
539:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseAdd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):822:updateScopeForTypeChange(scope, left, leftType, type) |==> <NO-OP>
540:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):839:scope = traverse(condition, scope) |==> <NO-OP>
541:LVR:TRUE:FALSE:com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):844:true |==> false
542:LVR:FALSE:TRUE:com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):847:false |==> true
543:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):850:traverse(trueNode, trueScope.createChildFlowScope()) |==> <NO-OP>
544:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):853:traverse(falseNode, falseScope.createChildFlowScope()) |==> <NO-OP>
545:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):858:trueType != null |==> trueType == null
546:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):858:trueType != null |==> false
547:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):858:trueType != null |==> true
548:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):858:falseType != null |==> falseType == null
549:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):858:falseType != null |==> false
550:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):858:falseType != null |==> true
551:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):858:trueType != null && falseType != null |==> trueType != null != (falseType != null)
552:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):858:trueType != null && falseType != null |==> trueType != null == (falseType != null)
553:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):858:trueType != null && falseType != null |==> false
554:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):858:trueType != null && falseType != null |==> trueType != null
555:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):858:trueType != null && falseType != null |==> falseType != null
556:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):858:trueType != null && falseType != null |==> true
557:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):858:trueType != null && falseType != null |==> trueType != null || falseType != null
558:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):859:n.setJSType(trueType.getLeastSupertype(falseType)) |==> <NO-OP>
559:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseHook(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):861:n.setJSType(null) |==> <NO-OP>
560:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseCall(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):868:scope = traverseChildren(n, scope) |==> <NO-OP>
561:COR:functionType.isFunctionType():TRUE:com.google.javascript.jscomp.TypeInference@traverseCall(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):872:functionType.isFunctionType() |==> false
562:COR:functionType.isFunctionType():FALSE:com.google.javascript.jscomp.TypeInference@traverseCall(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):872:functionType.isFunctionType() |==> true
563:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseCall(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):874:n.setJSType(fnType.getReturnType()) |==> <NO-OP>
564:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseCall(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):875:backwardsInferenceFromCallSite(n, fnType) |==> <NO-OP>
565:COR:functionType.isEquivalentTo(getNativeType(CHECKED_UNKNOWN_TYPE)):TRUE:com.google.javascript.jscomp.TypeInference@traverseCall(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):876:functionType.isEquivalentTo(getNativeType(CHECKED_UNKNOWN_TYPE)) |==> false
566:COR:functionType.isEquivalentTo(getNativeType(CHECKED_UNKNOWN_TYPE)):FALSE:com.google.javascript.jscomp.TypeInference@traverseCall(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):876:functionType.isEquivalentTo(getNativeType(CHECKED_UNKNOWN_TYPE)) |==> true
567:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseCall(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):878:n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE)) |==> <NO-OP>
568:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseCall(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):881:scope = tightenTypesAfterAssertions(scope, n) |==> <NO-OP>
569:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):891:assertionFunctionSpec == null |==> assertionFunctionSpec != null
570:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):891:assertionFunctionSpec == null |==> false
571:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):891:assertionFunctionSpec == null |==> true
572:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):891:firstParam == null |==> firstParam != null
573:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):891:firstParam == null |==> false
574:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):891:firstParam == null |==> true
575:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):891:assertionFunctionSpec == null || firstParam == null |==> assertionFunctionSpec == null != (firstParam == null)
576:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):891:assertionFunctionSpec == null || firstParam == null |==> assertionFunctionSpec == null && firstParam == null
577:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):891:assertionFunctionSpec == null || firstParam == null |==> assertionFunctionSpec == null == (firstParam == null)
578:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):891:assertionFunctionSpec == null || firstParam == null |==> false
579:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):891:assertionFunctionSpec == null || firstParam == null |==> assertionFunctionSpec == null
580:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):891:assertionFunctionSpec == null || firstParam == null |==> firstParam == null
581:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):891:assertionFunctionSpec == null || firstParam == null |==> true
582:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):895:assertedNode == null |==> assertedNode != null
583:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):895:assertedNode == null |==> false
584:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):895:assertedNode == null |==> true
585:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):904:assertedType == null |==> assertedType != null
586:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):904:assertedType == null |==> false
587:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):904:assertedType == null |==> true
588:LVR:TRUE:FALSE:com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):907:true |==> false
589:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):906:scope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(assertedNode, scope, true) |==> <NO-OP>
590:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):914:assertedNodeName != null |==> assertedNodeName == null
591:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):914:assertedNodeName != null |==> false
592:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):914:assertedNodeName != null |==> true
593:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):914:assertedNodeName != null && type.differsFrom(narrowed) |==> assertedNodeName != null != type.differsFrom(narrowed)
594:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):914:assertedNodeName != null && type.differsFrom(narrowed) |==> assertedNodeName != null == type.differsFrom(narrowed)
595:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):914:assertedNodeName != null && type.differsFrom(narrowed) |==> false
596:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):914:assertedNodeName != null && type.differsFrom(narrowed) |==> assertedNodeName != null
597:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):914:assertedNodeName != null && type.differsFrom(narrowed) |==> type.differsFrom(narrowed)
598:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):914:assertedNodeName != null && type.differsFrom(narrowed) |==> true
599:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):914:assertedNodeName != null && type.differsFrom(narrowed) |==> assertedNodeName != null || type.differsFrom(narrowed)
600:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):915:scope = narrowScope(scope, assertedNode, narrowed) |==> <NO-OP>
601:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@tightenTypesAfterAssertions(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node):919:callNode.setJSType(narrowed) |==> <NO-OP>
602:COR:node.isThis():TRUE:com.google.javascript.jscomp.TypeInference@narrowScope(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):924:node.isThis() |==> false
603:COR:node.isThis():FALSE:com.google.javascript.jscomp.TypeInference@narrowScope(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):924:node.isThis() |==> true
604:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@narrowScope(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):929:scope = scope.createChildFlowScope() |==> <NO-OP>
605:COR:node.isGetProp():TRUE:com.google.javascript.jscomp.TypeInference@narrowScope(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):930:node.isGetProp() |==> false
606:COR:node.isGetProp():FALSE:com.google.javascript.jscomp.TypeInference@narrowScope(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):930:node.isGetProp() |==> true
607:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@narrowScope(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):931:scope.inferQualifiedSlot(node, node.getQualifiedName(), getJSType(node), narrowed) |==> <NO-OP>
608:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@narrowScope(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):934:redeclareSimpleVar(scope, node, narrowed) |==> <NO-OP>
609:COR:updatedFnType:TRUE:com.google.javascript.jscomp.TypeInference@backwardsInferenceFromCallSite(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):966:updatedFnType |==> false
610:COR:updatedFnType:FALSE:com.google.javascript.jscomp.TypeInference@backwardsInferenceFromCallSite(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):966:updatedFnType |==> true
611:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@backwardsInferenceFromCallSite(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):967:fnType = n.getFirstChild().getJSType().toMaybeFunctionType() |==> <NO-OP>
612:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@backwardsInferenceFromCallSite(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):969:updateTypeOfParameters(n, fnType) |==> <NO-OP>
613:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@backwardsInferenceFromCallSite(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):970:updateBind(n) |==> <NO-OP>
614:LVR:TRUE:FALSE:com.google.javascript.jscomp.TypeInference@updateBind(com.google.javascript.rhino.Node):979:true |==> false
615:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateBind(com.google.javascript.rhino.Node):980:bind == null |==> bind != null
616:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateBind(com.google.javascript.rhino.Node):980:bind == null |==> false
617:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateBind(com.google.javascript.rhino.Node):980:bind == null |==> true
618:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateBind(com.google.javascript.rhino.Node):986:callTargetFn == null |==> callTargetFn != null
619:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateBind(com.google.javascript.rhino.Node):986:callTargetFn == null |==> false
620:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateBind(com.google.javascript.rhino.Node):986:callTargetFn == null |==> true
621:LVR:POS:0:com.google.javascript.jscomp.TypeInference@updateBind(com.google.javascript.rhino.Node):993:1 |==> 0
622:LVR:POS:NEG:com.google.javascript.jscomp.TypeInference@updateBind(com.google.javascript.rhino.Node):993:1 |==> -1
623:AOR:+(int,int):%(int,int):com.google.javascript.jscomp.TypeInference@updateBind(com.google.javascript.rhino.Node):993:bind.getBoundParameterCount() + 1 |==> bind.getBoundParameterCount() % 1
624:AOR:+(int,int):*(int,int):com.google.javascript.jscomp.TypeInference@updateBind(com.google.javascript.rhino.Node):993:bind.getBoundParameterCount() + 1 |==> bind.getBoundParameterCount() * 1
625:AOR:+(int,int):-(int,int):com.google.javascript.jscomp.TypeInference@updateBind(com.google.javascript.rhino.Node):993:bind.getBoundParameterCount() + 1 |==> bind.getBoundParameterCount() - 1
626:AOR:+(int,int):/(int,int):com.google.javascript.jscomp.TypeInference@updateBind(com.google.javascript.rhino.Node):993:bind.getBoundParameterCount() + 1 |==> bind.getBoundParameterCount() / 1
627:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@updateBind(com.google.javascript.rhino.Node):990:n.setJSType(callTargetFn.getBindReturnType(bind.getBoundParameterCount() + 1)) |==> <NO-OP>
628:LVR:0:POS:com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1001:0 |==> 1
629:LVR:0:NEG:com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1001:0 |==> -1
630:LVR:POS:0:com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1004:1 |==> 0
631:LVR:POS:NEG:com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1004:1 |==> -1
632:AOR:+(int,int):%(int,int):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1004:i + 1 |==> i % 1
633:AOR:+(int,int):*(int,int):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1004:i + 1 |==> i * 1
634:AOR:+(int,int):-(int,int):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1004:i + 1 |==> i - 1
635:AOR:+(int,int):/(int,int):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1004:i + 1 |==> i / 1
636:ROR:>=(int,int):!=(int,int):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1004:i + 1 >= childCount |==> i + 1 != childCount
637:ROR:>=(int,int):<(int,int):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1004:i + 1 >= childCount |==> i + 1 < childCount
638:ROR:>=(int,int):<=(int,int):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1004:i + 1 >= childCount |==> i + 1 <= childCount
639:ROR:>=(int,int):==(int,int):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1004:i + 1 >= childCount |==> i + 1 == childCount
640:ROR:>=(int,int):>(int,int):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1004:i + 1 >= childCount |==> i + 1 > childCount
641:ROR:>=(int,int):FALSE(int,int):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1004:i + 1 >= childCount |==> false
642:ROR:>=(int,int):TRUE(int,int):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1004:i + 1 >= childCount |==> true
643:LVR:POS:0:com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1010:1 |==> 0
644:LVR:POS:NEG:com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1010:1 |==> -1
645:AOR:+(int,int):%(int,int):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1010:i + 1 |==> i % 1
646:AOR:+(int,int):*(int,int):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1010:i + 1 |==> i * 1
647:AOR:+(int,int):-(int,int):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1010:i + 1 |==> i - 1
648:AOR:+(int,int):/(int,int):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1010:i + 1 |==> i / 1
649:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1012:inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType) |==> <NO-OP>
650:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1020:restrictedParameter != null |==> restrictedParameter == null
651:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1020:restrictedParameter != null |==> false
652:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1020:restrictedParameter != null |==> true
653:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1021:iArgument.isFunction() && iArgumentType.isFunctionType() |==> iArgument.isFunction() != iArgumentType.isFunctionType()
654:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1021:iArgument.isFunction() && iArgumentType.isFunctionType() |==> iArgument.isFunction() == iArgumentType.isFunctionType()
655:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1021:iArgument.isFunction() && iArgumentType.isFunctionType() |==> false
656:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1021:iArgument.isFunction() && iArgumentType.isFunctionType() |==> iArgument.isFunction()
657:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1022:iArgument.isFunction() && iArgumentType.isFunctionType() |==> iArgumentType.isFunctionType()
658:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1021:iArgument.isFunction() && iArgumentType.isFunctionType() |==> true
659:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1021:iArgument.isFunction() && iArgumentType.isFunctionType() |==> iArgument.isFunction() || iArgumentType.isFunctionType()
660:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1023:iArgument.getJSDocInfo() == null |==> iArgument.getJSDocInfo() != null
661:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1023:iArgument.getJSDocInfo() == null |==> false
662:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1023:iArgument.getJSDocInfo() == null |==> true
663:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1021:iArgument.isFunction() && iArgumentType.isFunctionType() && iArgument.getJSDocInfo() == null |==> (iArgument.isFunction() && iArgumentType.isFunctionType()) != (iArgument.getJSDocInfo() == null)
664:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1021:iArgument.isFunction() && iArgumentType.isFunctionType() && iArgument.getJSDocInfo() == null |==> (iArgument.isFunction() && iArgumentType.isFunctionType()) == (iArgument.getJSDocInfo() == null)
665:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1022:iArgument.isFunction() && iArgumentType.isFunctionType() && iArgument.getJSDocInfo() == null |==> false
666:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1021:iArgument.isFunction() && iArgumentType.isFunctionType() && iArgument.getJSDocInfo() == null |==> iArgument.isFunction() && iArgumentType.isFunctionType()
667:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1023:iArgument.isFunction() && iArgumentType.isFunctionType() && iArgument.getJSDocInfo() == null |==> iArgument.getJSDocInfo() == null
668:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1022:iArgument.isFunction() && iArgumentType.isFunctionType() && iArgument.getJSDocInfo() == null |==> true
669:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1021:iArgument.isFunction() && iArgumentType.isFunctionType() && iArgument.getJSDocInfo() == null |==> iArgument.isFunction() && iArgumentType.isFunctionType() || iArgument.getJSDocInfo() == null
670:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1024:iArgument.setJSType(restrictedParameter) |==> <NO-OP>
671:STD:<INC>:<NO-OP>:com.google.javascript.jscomp.TypeInference@updateTypeOfParameters(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1027:i++ |==> <NO-OP>
672:COR:fnType.getTemplateTypeMap().getTemplateKeys().isEmpty():TRUE:com.google.javascript.jscomp.TypeInference@inferTemplateTypesFromParameters(com.google.javascript.rhino.jstype.FunctionType,com.google.javascript.rhino.Node):1033:fnType.getTemplateTypeMap().getTemplateKeys().isEmpty() |==> false
673:COR:fnType.getTemplateTypeMap().getTemplateKeys().isEmpty():FALSE:com.google.javascript.jscomp.TypeInference@inferTemplateTypesFromParameters(com.google.javascript.rhino.jstype.FunctionType,com.google.javascript.rhino.Node):1033:fnType.getTemplateTypeMap().getTemplateKeys().isEmpty() |==> true
674:COR:NodeUtil.isGet(callTarget):TRUE:com.google.javascript.jscomp.TypeInference@inferTemplateTypesFromParameters(com.google.javascript.rhino.jstype.FunctionType,com.google.javascript.rhino.Node):1040:NodeUtil.isGet(callTarget) |==> false
675:COR:NodeUtil.isGet(callTarget):FALSE:com.google.javascript.jscomp.TypeInference@inferTemplateTypesFromParameters(com.google.javascript.rhino.jstype.FunctionType,com.google.javascript.rhino.Node):1040:NodeUtil.isGet(callTarget) |==> true
676:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@inferTemplateTypesFromParameters(com.google.javascript.rhino.jstype.FunctionType,com.google.javascript.rhino.Node):1042:maybeResolveTemplatedType(fnType.getTypeOfThis(), getJSType(obj), resolvedTypes) |==> <NO-OP>
677:COR:call.hasMoreThanOneChild():TRUE:com.google.javascript.jscomp.TypeInference@inferTemplateTypesFromParameters(com.google.javascript.rhino.jstype.FunctionType,com.google.javascript.rhino.Node):1048:call.hasMoreThanOneChild() |==> false
678:COR:call.hasMoreThanOneChild():FALSE:com.google.javascript.jscomp.TypeInference@inferTemplateTypesFromParameters(com.google.javascript.rhino.jstype.FunctionType,com.google.javascript.rhino.Node):1048:call.hasMoreThanOneChild() |==> true
679:LVR:POS:0:com.google.javascript.jscomp.TypeInference@inferTemplateTypesFromParameters(com.google.javascript.rhino.jstype.FunctionType,com.google.javascript.rhino.Node):1051:1 |==> 0
680:LVR:POS:NEG:com.google.javascript.jscomp.TypeInference@inferTemplateTypesFromParameters(com.google.javascript.rhino.jstype.FunctionType,com.google.javascript.rhino.Node):1051:1 |==> -1
681:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@inferTemplateTypesFromParameters(com.google.javascript.rhino.jstype.FunctionType,com.google.javascript.rhino.Node):1049:maybeResolveTemplateTypeFromNodes(fnType.getParameters(), call.getChildAtIndex(1).siblings(), resolvedTypes) |==> <NO-OP>
682:COR:paramType.isTemplateType():TRUE:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1061:paramType.isTemplateType() |==> false
683:COR:paramType.isTemplateType():FALSE:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1061:paramType.isTemplateType() |==> true
684:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1063:resolvedTemplateType(resolvedTypes, paramType.toMaybeTemplateType(), argType) |==> <NO-OP>
685:COR:paramType.isUnionType():TRUE:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1065:paramType.isUnionType() |==> false
686:COR:paramType.isUnionType():FALSE:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1065:paramType.isUnionType() |==> true
687:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1069:maybeResolveTemplatedType(alernative, argType, resolvedTypes) |==> <NO-OP>
688:COR:paramType.isFunctionType():TRUE:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1071:paramType.isFunctionType() |==> false
689:COR:paramType.isFunctionType():FALSE:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1071:paramType.isFunctionType() |==> true
690:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1077:argFunctionType != null |==> argFunctionType == null
691:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1077:argFunctionType != null |==> false
692:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1077:argFunctionType != null |==> true
693:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1077:argFunctionType != null && argFunctionType.isSubtype(paramType) |==> argFunctionType != null != argFunctionType.isSubtype(paramType)
694:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1077:argFunctionType != null && argFunctionType.isSubtype(paramType) |==> argFunctionType != null == argFunctionType.isSubtype(paramType)
695:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1077:argFunctionType != null && argFunctionType.isSubtype(paramType) |==> false
696:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1077:argFunctionType != null && argFunctionType.isSubtype(paramType) |==> argFunctionType != null
697:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1077:argFunctionType != null && argFunctionType.isSubtype(paramType) |==> argFunctionType.isSubtype(paramType)
698:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1077:argFunctionType != null && argFunctionType.isSubtype(paramType) |==> true
699:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1077:argFunctionType != null && argFunctionType.isSubtype(paramType) |==> argFunctionType != null || argFunctionType.isSubtype(paramType)
700:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1079:maybeResolveTemplatedType(paramFunctionType.getTypeOfThis(), argFunctionType.getTypeOfThis(), resolvedTypes) |==> <NO-OP>
701:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1083:maybeResolveTemplatedType(paramFunctionType.getReturnType(), argFunctionType.getReturnType(), resolvedTypes) |==> <NO-OP>
702:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1087:maybeResolveTemplateTypeFromNodes(paramFunctionType.getParameters(), argFunctionType.getParameters(), resolvedTypes) |==> <NO-OP>
703:COR:paramType.isTemplatizedType():TRUE:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1091:paramType.isTemplatizedType() |==> false
704:COR:paramType.isTemplatizedType():FALSE:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1091:paramType.isTemplatizedType() |==> true
705:COR:argObjectType.isSubtype(referencedParamType):TRUE:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1100:argObjectType.isSubtype(referencedParamType) |==> false
706:COR:argObjectType.isSubtype(referencedParamType):FALSE:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1100:argObjectType.isSubtype(referencedParamType) |==> true
707:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@maybeResolveTemplatedType(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1106:maybeResolveTemplatedType(paramTypeMap.getTemplateType(key), argTypeMap.getTemplateType(key), resolvedTypes) |==> <NO-OP>
708:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@maybeResolveTemplateTypeFromNodes(java.lang.Iterable<com.google.javascript.rhino.Node>,java.lang.Iterable<com.google.javascript.rhino.Node>,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1119:maybeResolveTemplateTypeFromNodes(declParams.iterator(), callParams.iterator(), resolvedTypes) |==> <NO-OP>
709:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@maybeResolveTemplateTypeFromNodes(java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1127:declParams.hasNext() && callParams.hasNext() |==> declParams.hasNext() != callParams.hasNext()
710:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@maybeResolveTemplateTypeFromNodes(java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1127:declParams.hasNext() && callParams.hasNext() |==> declParams.hasNext() == callParams.hasNext()
711:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@maybeResolveTemplateTypeFromNodes(java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1127:declParams.hasNext() && callParams.hasNext() |==> false
712:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@maybeResolveTemplateTypeFromNodes(java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1127:declParams.hasNext() && callParams.hasNext() |==> declParams.hasNext()
713:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@maybeResolveTemplateTypeFromNodes(java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1127:declParams.hasNext() && callParams.hasNext() |==> callParams.hasNext()
714:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@maybeResolveTemplateTypeFromNodes(java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1127:declParams.hasNext() && callParams.hasNext() |==> true
715:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@maybeResolveTemplateTypeFromNodes(java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1127:declParams.hasNext() && callParams.hasNext() |==> declParams.hasNext() || callParams.hasNext()
716:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@maybeResolveTemplateTypeFromNodes(java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1129:maybeResolveTemplatedType(getJSType(declParam), getJSType(callParams.next()), resolvedTypes) |==> <NO-OP>
717:COR:declParam.isVarArgs():TRUE:com.google.javascript.jscomp.TypeInference@maybeResolveTemplateTypeFromNodes(java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1133:declParam.isVarArgs() |==> false
718:COR:declParam.isVarArgs():FALSE:com.google.javascript.jscomp.TypeInference@maybeResolveTemplateTypeFromNodes(java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1133:declParam.isVarArgs() |==> true
719:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@maybeResolveTemplateTypeFromNodes(java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Iterator<com.google.javascript.rhino.Node>,java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>):1135:maybeResolveTemplatedType(getJSType(declParam), getJSType(callParams.next()), resolvedTypes) |==> <NO-OP>
720:COR:resolved.isUnknownType():TRUE:com.google.javascript.jscomp.TypeInference@resolvedTemplateType(java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>,com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType):1147:resolved.isUnknownType() |==> false
721:COR:resolved.isUnknownType():FALSE:com.google.javascript.jscomp.TypeInference@resolvedTemplateType(java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>,com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType):1147:resolved.isUnknownType() |==> true
722:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@resolvedTemplateType(java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>,com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType):1148:previous == null |==> previous != null
723:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@resolvedTemplateType(java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>,com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType):1148:previous == null |==> false
724:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@resolvedTemplateType(java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>,com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType):1148:previous == null |==> true
725:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@resolvedTemplateType(java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>,com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType):1149:map.put(template, resolved) |==> <NO-OP>
726:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@resolvedTemplateType(java.util.Map<com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType>,com.google.javascript.rhino.jstype.TemplateType,com.google.javascript.rhino.jstype.JSType):1152:map.put(template, join) |==> <NO-OP>
727:LVR:FALSE:TRUE:com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer:1160:false |==> true
728:LVR:TRUE:FALSE:com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer@caseTemplateType(com.google.javascript.rhino.jstype.TemplateType):1171:true |==> false
729:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer@caseTemplateType(com.google.javascript.rhino.jstype.TemplateType):1171:madeChanges = true |==> <NO-OP>
730:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer@caseTemplateType(com.google.javascript.rhino.jstype.TemplateType):1173:replacement != null |==> replacement == null
731:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer@caseTemplateType(com.google.javascript.rhino.jstype.TemplateType):1173:replacement != null |==> false
732:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer@caseTemplateType(com.google.javascript.rhino.jstype.TemplateType):1173:replacement != null |==> true
733:COR:keys.isEmpty():TRUE:com.google.javascript.jscomp.TypeInference@inferTemplatedTypesForCall(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1187:keys.isEmpty() |==> false
734:COR:keys.isEmpty():FALSE:com.google.javascript.jscomp.TypeInference@inferTemplatedTypesForCall(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1187:keys.isEmpty() |==> true
735:LVR:FALSE:TRUE:com.google.javascript.jscomp.TypeInference@inferTemplatedTypesForCall(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1188:false |==> true
736:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@inferTemplatedTypesForCall(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1210:Preconditions.checkNotNull(replacementFnType) |==> <NO-OP>
737:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@inferTemplatedTypesForCall(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1212:callTarget.setJSType(replacementFnType) |==> <NO-OP>
738:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@inferTemplatedTypesForCall(com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.FunctionType):1213:n.setJSType(replacementFnType.getReturnType()) |==> <NO-OP>
739:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1219:scope = traverseChildren(n, scope) |==> <NO-OP>
740:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1224:constructorType != null |==> constructorType == null
741:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1224:constructorType != null |==> false
742:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1224:constructorType != null |==> true
743:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1225:constructorType = constructorType.restrictByNotNullOrUndefined() |==> <NO-OP>
744:COR:constructorType.isUnknownType():TRUE:com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1226:constructorType.isUnknownType() |==> false
745:COR:constructorType.isUnknownType():FALSE:com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1226:constructorType.isUnknownType() |==> true
746:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1227:type = unknownType |==> <NO-OP>
747:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1230:ct == null |==> ct != null
748:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1230:ct == null |==> false
749:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1230:ct == null |==> true
750:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1230:ct == null && constructorType instanceof FunctionType |==> ct == null != constructorType instanceof FunctionType
751:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1230:ct == null && constructorType instanceof FunctionType |==> ct == null == constructorType instanceof FunctionType
752:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1230:ct == null && constructorType instanceof FunctionType |==> false
753:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1230:ct == null && constructorType instanceof FunctionType |==> ct == null
754:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1230:ct == null && constructorType instanceof FunctionType |==> constructorType instanceof FunctionType
755:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1230:ct == null && constructorType instanceof FunctionType |==> true
756:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1230:ct == null && constructorType instanceof FunctionType |==> ct == null || constructorType instanceof FunctionType
757:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1234:ct = (FunctionType)constructorType |==> <NO-OP>
758:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1236:ct != null |==> ct == null
759:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1236:ct != null |==> false
760:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1236:ct != null |==> true
761:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1236:ct != null && ct.isConstructor() |==> ct != null != ct.isConstructor()
762:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1236:ct != null && ct.isConstructor() |==> ct != null == ct.isConstructor()
763:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1236:ct != null && ct.isConstructor() |==> false
764:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1236:ct != null && ct.isConstructor() |==> ct != null
765:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1236:ct != null && ct.isConstructor() |==> ct.isConstructor()
766:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1236:ct != null && ct.isConstructor() |==> true
767:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1236:ct != null && ct.isConstructor() |==> ct != null || ct.isConstructor()
768:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1237:backwardsInferenceFromCallSite(n, ct) |==> <NO-OP>
769:COR:inferredTypes.isEmpty():TRUE:com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1244:inferredTypes.isEmpty() |==> false
770:COR:inferredTypes.isEmpty():FALSE:com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1244:inferredTypes.isEmpty() |==> true
771:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1245:type = instanceType |==> <NO-OP>
772:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1247:type = registry.createTemplatizedType(instanceType, inferredTypes) |==> <NO-OP>
773:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseNew(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1252:n.setJSType(type) |==> <NO-OP>
774:LVR:TRUE:FALSE:com.google.javascript.jscomp.TypeInference@traverseAnd(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1257:true |==> false
775:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseChildren(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1261:el != null |==> el == null
776:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseChildren(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1261:el != null |==> false
777:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseChildren(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1261:el != null |==> true
778:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseChildren(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1262:scope = traverse(el, scope) |==> <NO-OP>
779:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseGetElem(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1268:scope = traverseChildren(n, scope) |==> <NO-OP>
780:COR:typeMap.hasTemplateType(registry.getObjectElementKey()):TRUE:com.google.javascript.jscomp.TypeInference@traverseGetElem(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1271:typeMap.hasTemplateType(registry.getObjectElementKey()) |==> false
781:COR:typeMap.hasTemplateType(registry.getObjectElementKey()):FALSE:com.google.javascript.jscomp.TypeInference@traverseGetElem(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1271:typeMap.hasTemplateType(registry.getObjectElementKey()) |==> true
782:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseGetElem(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1272:n.setJSType(typeMap.getTemplateType(registry.getObjectElementKey())) |==> <NO-OP>
783:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseGetProp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1280:scope = traverseChildren(n, scope) |==> <NO-OP>
784:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseGetProp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1282:n.setJSType(getPropertyType(objNode.getJSType(), property.getString(), n, scope)) |==> <NO-OP>
785:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):1304:type == null |==> type != null
786:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):1304:type == null |==> false
787:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):1304:type == null |==> true
788:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):1304:constraint == null |==> constraint != null
789:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):1304:constraint == null |==> false
790:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):1304:constraint == null |==> true
791:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):1304:type == null || constraint == null |==> type == null != (constraint == null)
792:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference@inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):1304:type == null || constraint == null |==> type == null && constraint == null
793:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):1304:type == null || constraint == null |==> type == null == (constraint == null)
794:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):1304:type == null || constraint == null |==> false
795:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):1304:type == null || constraint == null |==> type == null
796:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):1304:type == null || constraint == null |==> constraint == null
797:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):1304:type == null || constraint == null |==> true
798:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@inferPropertyTypesToMatchConstraint(com.google.javascript.rhino.jstype.JSType,com.google.javascript.rhino.jstype.JSType):1308:type.matchConstraint(constraint) |==> <NO-OP>
799:COR:n.isQualifiedName():TRUE:com.google.javascript.jscomp.TypeInference@dereferencePointer(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1316:n.isQualifiedName() |==> false
800:COR:n.isQualifiedName():FALSE:com.google.javascript.jscomp.TypeInference@dereferencePointer(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1316:n.isQualifiedName() |==> true
801:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@dereferencePointer(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1319:type != narrowed |==> type == narrowed
802:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@dereferencePointer(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1319:type != narrowed |==> false
803:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@dereferencePointer(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1319:type != narrowed |==> true
804:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@dereferencePointer(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1320:scope = narrowScope(scope, n, narrowed) |==> <NO-OP>
805:LVR:FALSE:TRUE:com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1335:false |==> true
806:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1340:var != null |==> var == null
807:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1340:var != null |==> false
808:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1340:var != null |==> true
809:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1342:varType != null |==> varType == null
810:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1342:varType != null |==> false
811:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1342:varType != null |==> true
812:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1344:var != syntacticScope.getSlot(qualifiedName) |==> var == syntacticScope.getSlot(qualifiedName)
813:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1344:var != syntacticScope.getSlot(qualifiedName) |==> false
814:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1344:var != syntacticScope.getSlot(qualifiedName) |==> true
815:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1344:isLocallyInferred = (var != syntacticScope.getSlot(qualifiedName)) |==> <NO-OP>
816:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1345:isDeclared || isLocallyInferred |==> isDeclared != isLocallyInferred
817:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1345:isDeclared || isLocallyInferred |==> isDeclared && isLocallyInferred
818:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1345:isDeclared || isLocallyInferred |==> isDeclared == isLocallyInferred
819:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1345:isDeclared || isLocallyInferred |==> false
820:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1345:isDeclared || isLocallyInferred |==> isDeclared
821:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1345:isDeclared || isLocallyInferred |==> isLocallyInferred
822:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1345:isDeclared || isLocallyInferred |==> true
823:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1346:propertyType = varType |==> <NO-OP>
824:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1351:propertyType == null |==> propertyType != null
825:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1351:propertyType == null |==> false
826:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1351:propertyType == null |==> true
827:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1351:objType != null |==> objType == null
828:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1351:objType != null |==> false
829:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1351:objType != null |==> true
830:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1351:propertyType == null && objType != null |==> propertyType == null != (objType != null)
831:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1351:propertyType == null && objType != null |==> propertyType == null == (objType != null)
832:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1351:propertyType == null && objType != null |==> false
833:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1351:propertyType == null && objType != null |==> propertyType == null
834:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1351:propertyType == null && objType != null |==> objType != null
835:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1351:propertyType == null && objType != null |==> true
836:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1351:propertyType == null && objType != null |==> propertyType == null || objType != null
837:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1353:foundType != null |==> foundType == null
838:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1353:foundType != null |==> false
839:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1353:foundType != null |==> true
840:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1354:propertyType = foundType |==> <NO-OP>
841:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1358:propertyType != null |==> propertyType == null
842:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1358:propertyType != null |==> false
843:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1358:propertyType != null |==> true
844:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1358:objType != null |==> objType == null
845:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1358:objType != null |==> false
846:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1358:objType != null |==> true
847:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1358:propertyType != null && objType != null |==> propertyType != null != (objType != null)
848:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1358:propertyType != null && objType != null |==> propertyType != null == (objType != null)
849:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1358:propertyType != null && objType != null |==> false
850:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1358:propertyType != null && objType != null |==> propertyType != null
851:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1358:propertyType != null && objType != null |==> objType != null
852:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1358:propertyType != null && objType != null |==> true
853:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1358:propertyType != null && objType != null |==> propertyType != null || objType != null
854:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1360:!restrictedObjType.getTemplateTypeMap().isEmpty() && propertyType.hasAnyTemplateTypes() |==> !restrictedObjType.getTemplateTypeMap().isEmpty() != propertyType.hasAnyTemplateTypes()
855:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1360:!restrictedObjType.getTemplateTypeMap().isEmpty() && propertyType.hasAnyTemplateTypes() |==> !restrictedObjType.getTemplateTypeMap().isEmpty() == propertyType.hasAnyTemplateTypes()
856:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1361:!restrictedObjType.getTemplateTypeMap().isEmpty() && propertyType.hasAnyTemplateTypes() |==> false
857:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1360:!restrictedObjType.getTemplateTypeMap().isEmpty() && propertyType.hasAnyTemplateTypes() |==> !restrictedObjType.getTemplateTypeMap().isEmpty()
858:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1361:!restrictedObjType.getTemplateTypeMap().isEmpty() && propertyType.hasAnyTemplateTypes() |==> propertyType.hasAnyTemplateTypes()
859:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1361:!restrictedObjType.getTemplateTypeMap().isEmpty() && propertyType.hasAnyTemplateTypes() |==> true
860:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1360:!restrictedObjType.getTemplateTypeMap().isEmpty() && propertyType.hasAnyTemplateTypes() |==> !restrictedObjType.getTemplateTypeMap().isEmpty() || propertyType.hasAnyTemplateTypes()
861:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1365:propertyType = propertyType.visit(replacer) |==> <NO-OP>
862:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1369:propertyType == null |==> propertyType != null
863:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1369:propertyType == null |==> false
864:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1369:propertyType == null |==> true
865:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1369:propertyType == null || propertyType.isUnknownType() |==> propertyType == null != propertyType.isUnknownType()
866:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1369:propertyType == null || propertyType.isUnknownType() |==> propertyType == null && propertyType.isUnknownType()
867:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1369:propertyType == null || propertyType.isUnknownType() |==> propertyType == null == propertyType.isUnknownType()
868:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1369:propertyType == null || propertyType.isUnknownType() |==> false
869:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1369:propertyType == null || propertyType.isUnknownType() |==> propertyType == null
870:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1369:propertyType == null || propertyType.isUnknownType() |==> propertyType.isUnknownType()
871:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1369:propertyType == null || propertyType.isUnknownType() |==> true
872:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1370:qualifiedName != null |==> qualifiedName == null
873:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1370:qualifiedName != null |==> false
874:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1370:qualifiedName != null |==> true
875:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1369:(propertyType == null || propertyType.isUnknownType()) && qualifiedName != null |==> (propertyType == null || propertyType.isUnknownType()) != (qualifiedName != null)
876:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1369:(propertyType == null || propertyType.isUnknownType()) && qualifiedName != null |==> (propertyType == null || propertyType.isUnknownType()) == (qualifiedName != null)
877:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1370:(propertyType == null || propertyType.isUnknownType()) && qualifiedName != null |==> false
878:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1369:(propertyType == null || propertyType.isUnknownType()) && qualifiedName != null |==> (propertyType == null || propertyType.isUnknownType())
879:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1370:(propertyType == null || propertyType.isUnknownType()) && qualifiedName != null |==> qualifiedName != null
880:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1370:(propertyType == null || propertyType.isUnknownType()) && qualifiedName != null |==> true
881:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1369:(propertyType == null || propertyType.isUnknownType()) && qualifiedName != null |==> (propertyType == null || propertyType.isUnknownType()) || qualifiedName != null
882:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1373:regType != null |==> regType == null
883:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1373:regType != null |==> false
884:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1373:regType != null |==> true
885:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1374:propertyType = regType.getConstructor() |==> <NO-OP>
886:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1378:propertyType == null |==> propertyType != null
887:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1378:propertyType == null |==> false
888:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1378:propertyType == null |==> true
889:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1380:propertyType.isEquivalentTo(unknownType) && isLocallyInferred |==> propertyType.isEquivalentTo(unknownType) != isLocallyInferred
890:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1380:propertyType.isEquivalentTo(unknownType) && isLocallyInferred |==> propertyType.isEquivalentTo(unknownType) == isLocallyInferred
891:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1380:propertyType.isEquivalentTo(unknownType) && isLocallyInferred |==> false
892:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1380:propertyType.isEquivalentTo(unknownType) && isLocallyInferred |==> propertyType.isEquivalentTo(unknownType)
893:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1380:propertyType.isEquivalentTo(unknownType) && isLocallyInferred |==> isLocallyInferred
894:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1380:propertyType.isEquivalentTo(unknownType) && isLocallyInferred |==> true
895:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@getPropertyType(com.google.javascript.rhino.jstype.JSType,java.lang.String,com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1380:propertyType.isEquivalentTo(unknownType) && isLocallyInferred |==> propertyType.isEquivalentTo(unknownType) || isLocallyInferred
896:LVR:FALSE:TRUE:com.google.javascript.jscomp.TypeInference@traverseOr(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1390:false |==> true
897:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1419:leftType != null |==> leftType == null
898:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1419:leftType != null |==> false
899:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1419:leftType != null |==> true
900:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1419:rightType != null |==> rightType == null
901:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1419:rightType != null |==> false
902:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1419:rightType != null |==> true
903:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1419:leftType != null && rightType != null |==> leftType != null != (rightType != null)
904:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1419:leftType != null && rightType != null |==> leftType != null == (rightType != null)
905:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1419:leftType != null && rightType != null |==> false
906:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1419:leftType != null && rightType != null |==> leftType != null
907:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1419:leftType != null && rightType != null |==> rightType != null
908:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1419:leftType != null && rightType != null |==> true
909:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1419:leftType != null && rightType != null |==> leftType != null || rightType != null
910:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1420:leftType = leftType.getRestrictedTypeGivenToBooleanOutcome(!condition) |==> <NO-OP>
911:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1421:leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get(!condition) |==> leftLiterals.toBooleanOutcomes != BooleanLiteralSet.get(!condition)
912:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1421:leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get(!condition) |==> false
913:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1421:leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get(!condition) |==> true
914:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1437:literals.booleanValues == BooleanLiteralSet.EMPTY |==> literals.booleanValues != BooleanLiteralSet.EMPTY
915:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1437:literals.booleanValues == BooleanLiteralSet.EMPTY |==> false
916:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1437:literals.booleanValues == BooleanLiteralSet.EMPTY |==> true
917:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1437:literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType(BOOLEAN_TYPE).isSubtype(type) |==> literals.booleanValues == BooleanLiteralSet.EMPTY != getNativeType(BOOLEAN_TYPE).isSubtype(type)
918:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1437:literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType(BOOLEAN_TYPE).isSubtype(type) |==> literals.booleanValues == BooleanLiteralSet.EMPTY == getNativeType(BOOLEAN_TYPE).isSubtype(type)
919:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1437:literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType(BOOLEAN_TYPE).isSubtype(type) |==> false
920:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1437:literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType(BOOLEAN_TYPE).isSubtype(type) |==> literals.booleanValues == BooleanLiteralSet.EMPTY
921:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1438:literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType(BOOLEAN_TYPE).isSubtype(type) |==> getNativeType(BOOLEAN_TYPE).isSubtype(type)
922:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1437:literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType(BOOLEAN_TYPE).isSubtype(type) |==> true
923:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1437:literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType(BOOLEAN_TYPE).isSubtype(type) |==> literals.booleanValues == BooleanLiteralSet.EMPTY || getNativeType(BOOLEAN_TYPE).isSubtype(type)
924:COR:type.isUnionType():TRUE:com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1440:type.isUnionType() |==> false
925:COR:type.isUnionType():FALSE:com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1440:type.isUnionType() |==> true
926:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1441:type = type.toMaybeUnionType().getRestrictedUnion(getNativeType(BOOLEAN_TYPE)) |==> <NO-OP>
927:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope,boolean):1452:n.setJSType(type) |==> <NO-OP>
928:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@traverseWithinShortCircuitingBinOp(com.google.javascript.rhino.Node,com.google.javascript.jscomp.type.FlowScope):1467:scope = traverse(n, scope) |==> <NO-OP>
929:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getJoinedFlowScope():1536:joinedScope == null |==> joinedScope != null
930:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getJoinedFlowScope():1536:joinedScope == null |==> false
931:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getJoinedFlowScope():1536:joinedScope == null |==> true
932:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getJoinedFlowScope():1537:leftScope == rightScope |==> leftScope != rightScope
933:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getJoinedFlowScope():1537:leftScope == rightScope |==> false
934:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getJoinedFlowScope():1537:leftScope == rightScope |==> true
935:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getJoinedFlowScope():1538:joinedScope = rightScope |==> <NO-OP>
936:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getJoinedFlowScope():1540:joinedScope = join(leftScope, rightScope) |==> <NO-OP>
937:ROR:==(int,int):!=(int,int):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND |==> nodeType != Token.AND
938:ROR:==(int,int):<(int,int):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND |==> nodeType < Token.AND
939:ROR:==(int,int):<=(int,int):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND |==> nodeType <= Token.AND
940:ROR:==(int,int):>(int,int):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND |==> nodeType > Token.AND
941:ROR:==(int,int):>=(int,int):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND |==> nodeType >= Token.AND
942:ROR:==(int,int):FALSE(int,int):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND |==> false
943:ROR:==(int,int):TRUE(int,int):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND |==> true
944:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND && outcome |==> nodeType == Token.AND != outcome
945:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND && outcome |==> nodeType == Token.AND == outcome
946:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND && outcome |==> false
947:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND && outcome |==> nodeType == Token.AND
948:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND && outcome |==> outcome
949:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND && outcome |==> true
950:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND && outcome |==> nodeType == Token.AND || outcome
951:ROR:==(int,int):!=(int,int):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1552:nodeType == Token.OR |==> nodeType != Token.OR
952:ROR:==(int,int):<(int,int):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1552:nodeType == Token.OR |==> nodeType < Token.OR
953:ROR:==(int,int):<=(int,int):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1552:nodeType == Token.OR |==> nodeType <= Token.OR
954:ROR:==(int,int):>(int,int):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1552:nodeType == Token.OR |==> nodeType > Token.OR
955:ROR:==(int,int):>=(int,int):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1552:nodeType == Token.OR |==> nodeType >= Token.OR
956:ROR:==(int,int):FALSE(int,int):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1552:nodeType == Token.OR |==> false
957:ROR:==(int,int):TRUE(int,int):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1552:nodeType == Token.OR |==> true
958:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1552:nodeType == Token.OR && !outcome |==> nodeType == Token.OR != !outcome
959:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1552:nodeType == Token.OR && !outcome |==> nodeType == Token.OR == !outcome
960:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1552:nodeType == Token.OR && !outcome |==> false
961:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1552:nodeType == Token.OR && !outcome |==> nodeType == Token.OR
962:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1552:nodeType == Token.OR && !outcome |==> !outcome
963:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1552:nodeType == Token.OR && !outcome |==> true
964:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1552:nodeType == Token.OR && !outcome |==> nodeType == Token.OR || !outcome
965:COR:||(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome |==> (nodeType == Token.AND && outcome) != (nodeType == Token.OR && !outcome)
966:COR:||(boolean,boolean):&&(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome |==> nodeType == Token.AND && outcome && (nodeType == Token.OR && !outcome)
967:COR:||(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome |==> (nodeType == Token.AND && outcome) == (nodeType == Token.OR && !outcome)
968:COR:||(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome |==> false
969:COR:||(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome |==> nodeType == Token.AND && outcome
970:COR:||(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1552:nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome |==> nodeType == Token.OR && !outcome
971:COR:||(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference$BooleanOutcomePair@getOutcomeFlowScope(int,boolean):1551:nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome |==> true
972:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@newBooleanOutcomePair(com.google.javascript.rhino.jstype.JSType,com.google.javascript.jscomp.type.FlowScope):1563:jsType == null |==> jsType != null
973:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@newBooleanOutcomePair(com.google.javascript.rhino.jstype.JSType,com.google.javascript.jscomp.type.FlowScope):1563:jsType == null |==> false
974:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@newBooleanOutcomePair(com.google.javascript.rhino.jstype.JSType,com.google.javascript.jscomp.type.FlowScope):1563:jsType == null |==> true
975:COR:registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType):TRUE:com.google.javascript.jscomp.TypeInference@newBooleanOutcomePair(com.google.javascript.rhino.jstype.JSType,com.google.javascript.jscomp.type.FlowScope):1568:registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) |==> false
976:COR:registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType):FALSE:com.google.javascript.jscomp.TypeInference@newBooleanOutcomePair(com.google.javascript.rhino.jstype.JSType,com.google.javascript.jscomp.type.FlowScope):1568:registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) |==> true
977:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@redeclareSimpleVar(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):1575:Preconditions.checkState(nameNode.isName()) |==> <NO-OP>
978:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@redeclareSimpleVar(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):1577:varType == null |==> varType != null
979:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@redeclareSimpleVar(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):1577:varType == null |==> false
980:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@redeclareSimpleVar(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):1577:varType == null |==> true
981:STD:<ASSIGN>:<NO-OP>:com.google.javascript.jscomp.TypeInference@redeclareSimpleVar(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):1578:varType = getNativeType(JSTypeNative.UNKNOWN_TYPE) |==> <NO-OP>
982:COR:isUnflowable(syntacticScope.getVar(varName)):TRUE:com.google.javascript.jscomp.TypeInference@redeclareSimpleVar(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):1580:isUnflowable(syntacticScope.getVar(varName)) |==> false
983:COR:isUnflowable(syntacticScope.getVar(varName)):FALSE:com.google.javascript.jscomp.TypeInference@redeclareSimpleVar(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):1580:isUnflowable(syntacticScope.getVar(varName)) |==> true
984:STD:<CALL>:<NO-OP>:com.google.javascript.jscomp.TypeInference@redeclareSimpleVar(com.google.javascript.jscomp.type.FlowScope,com.google.javascript.rhino.Node,com.google.javascript.rhino.jstype.JSType):1583:scope.inferSlotType(varName, varType) |==> <NO-OP>
985:ROR:!=(java.lang.Object,java.lang.Object):==(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null |==> v == null
986:ROR:!=(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null |==> false
987:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null |==> true
988:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() |==> v != null != v.isLocal()
989:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() |==> v != null == v.isLocal()
990:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() |==> false
991:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() |==> v != null
992:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() |==> v.isLocal()
993:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() |==> true
994:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() |==> v != null || v.isLocal()
995:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() && v.isMarkedEscaped() |==> (v != null && v.isLocal()) != v.isMarkedEscaped()
996:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() && v.isMarkedEscaped() |==> (v != null && v.isLocal()) == v.isMarkedEscaped()
997:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() && v.isMarkedEscaped() |==> false
998:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() && v.isMarkedEscaped() |==> v != null && v.isLocal()
999:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() && v.isMarkedEscaped() |==> v.isMarkedEscaped()
1000:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() && v.isMarkedEscaped() |==> true
1001:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() && v.isMarkedEscaped() |==> v != null && v.isLocal() || v.isMarkedEscaped()
1002:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1589:v.getScope() == syntacticScope |==> v.getScope() != syntacticScope
1003:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1589:v.getScope() == syntacticScope |==> false
1004:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1589:v.getScope() == syntacticScope |==> true
1005:COR:&&(boolean,boolean):!=(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() && v.isMarkedEscaped() && v.getScope() == syntacticScope |==> (v != null && v.isLocal() && v.isMarkedEscaped()) != (v.getScope() == syntacticScope)
1006:COR:&&(boolean,boolean):==(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() && v.isMarkedEscaped() && v.getScope() == syntacticScope |==> (v != null && v.isLocal() && v.isMarkedEscaped()) == (v.getScope() == syntacticScope)
1007:COR:&&(boolean,boolean):FALSE(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() && v.isMarkedEscaped() && v.getScope() == syntacticScope |==> false
1008:COR:&&(boolean,boolean):LHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() && v.isMarkedEscaped() && v.getScope() == syntacticScope |==> v != null && v.isLocal() && v.isMarkedEscaped()
1009:COR:&&(boolean,boolean):RHS(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1589:v != null && v.isLocal() && v.isMarkedEscaped() && v.getScope() == syntacticScope |==> v.getScope() == syntacticScope
1010:COR:&&(boolean,boolean):TRUE(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() && v.isMarkedEscaped() && v.getScope() == syntacticScope |==> true
1011:COR:&&(boolean,boolean):||(boolean,boolean):com.google.javascript.jscomp.TypeInference@isUnflowable(com.google.javascript.jscomp.Scope.Var):1587:v != null && v.isLocal() && v.isMarkedEscaped() && v.getScope() == syntacticScope |==> v != null && v.isLocal() && v.isMarkedEscaped() || v.getScope() == syntacticScope
1012:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getJSType(com.google.javascript.rhino.Node):1598:jsType == null |==> jsType != null
1013:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getJSType(com.google.javascript.rhino.Node):1598:jsType == null |==> false
1014:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):com.google.javascript.jscomp.TypeInference@getJSType(com.google.javascript.rhino.Node):1598:jsType == null |==> true