1:LVR:POS:0:org.apache.commons.math.optimization.direct.MultiDirectional@<init>():46:2.0 |==> 0.0
2:LVR:POS:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@<init>():46:2.0 |==> -2.0
3:LVR:POS:0:org.apache.commons.math.optimization.direct.MultiDirectional@<init>():47:0.5 |==> 0.0
4:LVR:POS:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@<init>():47:0.5 |==> -0.5
5:STD:<CALL>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):67:incrementIterationsCounter() |==> <NO-OP>
6:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):71:0 |==> 1
7:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):71:0 |==> -1
8:LVR:POS:0:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):74:1.0 |==> 0.0
9:LVR:POS:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):74:1.0 |==> -1.0
10:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):75:0 |==> 1
11:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):75:0 |==> -1
12:ROR:<(int,int):!=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):75:comparator.compare(reflected, best) < 0 |==> comparator.compare(reflected, best) != 0
13:ROR:<(int,int):<=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):75:comparator.compare(reflected, best) < 0 |==> comparator.compare(reflected, best) <= 0
14:ROR:<(int,int):==(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):75:comparator.compare(reflected, best) < 0 |==> comparator.compare(reflected, best) == 0
15:ROR:<(int,int):>(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):75:comparator.compare(reflected, best) < 0 |==> comparator.compare(reflected, best) > 0
16:ROR:<(int,int):>=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):75:comparator.compare(reflected, best) < 0 |==> comparator.compare(reflected, best) >= 0
17:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):75:comparator.compare(reflected, best) < 0 |==> false
18:ROR:<(int,int):TRUE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):75:comparator.compare(reflected, best) < 0 |==> true
19:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):80:0 |==> 1
20:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):80:0 |==> -1
21:ROR:<=(int,int):!=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):80:comparator.compare(reflected, expanded) <= 0 |==> comparator.compare(reflected, expanded) != 0
22:ROR:<=(int,int):<(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):80:comparator.compare(reflected, expanded) <= 0 |==> comparator.compare(reflected, expanded) < 0
23:ROR:<=(int,int):==(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):80:comparator.compare(reflected, expanded) <= 0 |==> comparator.compare(reflected, expanded) == 0
24:ROR:<=(int,int):>(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):80:comparator.compare(reflected, expanded) <= 0 |==> comparator.compare(reflected, expanded) > 0
25:ROR:<=(int,int):>=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):80:comparator.compare(reflected, expanded) <= 0 |==> comparator.compare(reflected, expanded) >= 0
26:ROR:<=(int,int):FALSE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):80:comparator.compare(reflected, expanded) <= 0 |==> false
27:ROR:<=(int,int):TRUE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):80:comparator.compare(reflected, expanded) <= 0 |==> true
28:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):82:simplex = reflectedSimplex |==> <NO-OP>
29:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):91:0 |==> 1
30:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):91:0 |==> -1
31:ROR:<(int,int):!=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):91:comparator.compare(contracted, best) < 0 |==> comparator.compare(contracted, best) != 0
32:ROR:<(int,int):<=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):91:comparator.compare(contracted, best) < 0 |==> comparator.compare(contracted, best) <= 0
33:ROR:<(int,int):==(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):91:comparator.compare(contracted, best) < 0 |==> comparator.compare(contracted, best) == 0
34:ROR:<(int,int):>(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):91:comparator.compare(contracted, best) < 0 |==> comparator.compare(contracted, best) > 0
35:ROR:<(int,int):>=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):91:comparator.compare(contracted, best) < 0 |==> comparator.compare(contracted, best) >= 0
36:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):91:comparator.compare(contracted, best) < 0 |==> false
37:ROR:<(int,int):TRUE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):91:comparator.compare(contracted, best) < 0 |==> true
38:LVR:TRUE:FALSE:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):98:true |==> false
39:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):99:0 |==> 1
40:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):99:0 |==> -1
41:ROR:<(int,int):!=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):99:i < simplex.length |==> i != simplex.length
42:ROR:<(int,int):<=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):99:i < simplex.length |==> i <= simplex.length
43:ROR:<(int,int):==(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):99:i < simplex.length |==> i == simplex.length
44:ROR:<(int,int):>(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):99:i < simplex.length |==> i > simplex.length
45:ROR:<(int,int):>=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):99:i < simplex.length |==> i >= simplex.length
46:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):99:i < simplex.length |==> false
47:ROR:<(int,int):TRUE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):99:i < simplex.length |==> true
48:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):100:converged &= checker.converged(iter, original[i], simplex[i]) |==> <NO-OP>
49:COR:converged:TRUE:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):102:converged |==> false
50:COR:converged:FALSE:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):102:converged |==> true
51:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):124:0 |==> 1
52:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):124:0 |==> -1
53:LVR:POS:0:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):128:1 |==> 0
54:LVR:POS:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):128:1 |==> -1
55:AOR:+(int,int):%(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):128:n + 1 |==> n % 1
56:AOR:+(int,int):*(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):128:n + 1 |==> n * 1
57:AOR:+(int,int):-(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):128:n + 1 |==> n - 1
58:AOR:+(int,int):/(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):128:n + 1 |==> n / 1
59:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):128:simplex = new RealPointValuePair[n + 1] |==> <NO-OP>
60:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):129:0 |==> 1
61:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):129:0 |==> -1
62:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):129:0 |==> 1
63:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):129:0 |==> -1
64:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):129:simplex[0] = original[0] |==> <NO-OP>
65:LVR:POS:0:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):130:1 |==> 0
66:LVR:POS:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):130:1 |==> -1
67:ROR:<=(int,int):!=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):130:i <= n |==> i != n
68:ROR:<=(int,int):<(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):130:i <= n |==> i < n
69:ROR:<=(int,int):==(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):130:i <= n |==> i == n
70:ROR:<=(int,int):>(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):130:i <= n |==> i > n
71:ROR:<=(int,int):>=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):130:i <= n |==> i >= n
72:ROR:<=(int,int):FALSE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):130:i <= n |==> false
73:ROR:<=(int,int):TRUE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):130:i <= n |==> true
74:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):133:0 |==> 1
75:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):133:0 |==> -1
76:ROR:<(int,int):!=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):133:j < n |==> j != n
77:ROR:<(int,int):<=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):133:j < n |==> j <= n
78:ROR:<(int,int):==(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):133:j < n |==> j == n
79:ROR:<(int,int):>(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):133:j < n |==> j > n
80:ROR:<(int,int):>=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):133:j < n |==> j >= n
81:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):133:j < n |==> false
82:ROR:<(int,int):TRUE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):133:j < n |==> true
83:AOR:-(double,double):%(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] - xOriginal[j] |==> xSmallest[j] % xOriginal[j]
84:AOR:-(double,double):*(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] - xOriginal[j] |==> xSmallest[j] * xOriginal[j]
85:AOR:-(double,double):+(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] - xOriginal[j] |==> xSmallest[j] + xOriginal[j]
86:AOR:-(double,double):/(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] - xOriginal[j] |==> xSmallest[j] / xOriginal[j]
87:AOR:*(double,double):%(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:coeff * (xSmallest[j] - xOriginal[j]) |==> coeff % (xSmallest[j] - xOriginal[j])
88:AOR:*(double,double):+(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:coeff * (xSmallest[j] - xOriginal[j]) |==> coeff + (xSmallest[j] - xOriginal[j])
89:AOR:*(double,double):-(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:coeff * (xSmallest[j] - xOriginal[j]) |==> coeff - (xSmallest[j] - xOriginal[j])
90:AOR:*(double,double):/(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:coeff * (xSmallest[j] - xOriginal[j]) |==> coeff / (xSmallest[j] - xOriginal[j])
91:AOR:+(double,double):%(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]) |==> xSmallest[j] % (coeff * (xSmallest[j] - xOriginal[j]))
92:AOR:+(double,double):*(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]) |==> xSmallest[j] * (coeff * (xSmallest[j] - xOriginal[j]))
93:AOR:+(double,double):-(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]) |==> xSmallest[j] - coeff * (xSmallest[j] - xOriginal[j])
94:AOR:+(double,double):/(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]) |==> xSmallest[j] / (coeff * (xSmallest[j] - xOriginal[j]))
95:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]) |==> <NO-OP>
96:LVR:FALSE:TRUE:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):136:false |==> true
97:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):136:simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false) |==> <NO-OP>
98:STD:<CALL>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):140:evaluateSimplex(comparator) |==> <NO-OP>
99:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):141:0 |==> 1
100:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):141:0 |==> -1
