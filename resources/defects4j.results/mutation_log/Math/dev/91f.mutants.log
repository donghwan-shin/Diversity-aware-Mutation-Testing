1:LVR:POS:0:org.apache.commons.math.fraction.Fraction:33:2 |==> 0
2:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction:33:2 |==> -2
3:LVR:POS:0:org.apache.commons.math.fraction.Fraction:33:1 |==> 0
4:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction:33:1 |==> -1
5:LVR:POS:0:org.apache.commons.math.fraction.Fraction:36:1 |==> 0
6:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction:36:1 |==> -1
7:LVR:POS:0:org.apache.commons.math.fraction.Fraction:36:1 |==> 0
8:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction:36:1 |==> -1
9:LVR:0:POS:org.apache.commons.math.fraction.Fraction:39:0 |==> 1
10:LVR:0:NEG:org.apache.commons.math.fraction.Fraction:39:0 |==> -1
11:LVR:POS:0:org.apache.commons.math.fraction.Fraction:39:1 |==> 0
12:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction:39:1 |==> -1
13:LVR:NEG:0:org.apache.commons.math.fraction.Fraction:42:-1 |==> 0
14:LVR:NEG:POS:org.apache.commons.math.fraction.Fraction:42:-1 |==> 1
15:LVR:POS:0:org.apache.commons.math.fraction.Fraction:42:1 |==> 0
16:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction:42:1 |==> -1
17:LVR:POS:0:org.apache.commons.math.fraction.Fraction@<init>(double):60:1.0E-5 |==> 0.0
18:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@<init>(double):60:1.0E-5 |==> -1.0E-5
19:LVR:POS:0:org.apache.commons.math.fraction.Fraction@<init>(double):60:100 |==> 0
20:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@<init>(double):60:100 |==> -100
21:LVR:0:POS:org.apache.commons.math.fraction.Fraction@<init>(double,int):102:0 |==> 1
22:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@<init>(double,int):102:0 |==> -1
23:LVR:POS:0:org.apache.commons.math.fraction.Fraction@<init>(double,int):102:100 |==> 0
24:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@<init>(double,int):102:100 |==> -100
25:ROR:>(long,long):!=(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):142:a0 > overflow |==> a0 != overflow
26:ROR:>(long,long):<(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):142:a0 > overflow |==> a0 < overflow
27:ROR:>(long,long):<=(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):142:a0 > overflow |==> a0 <= overflow
28:ROR:>(long,long):==(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):142:a0 > overflow |==> a0 == overflow
29:ROR:>(long,long):>=(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):142:a0 > overflow |==> a0 >= overflow
30:ROR:>(long,long):FALSE(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):142:a0 > overflow |==> false
31:ROR:>(long,long):TRUE(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):142:a0 > overflow |==> true
32:LVR:POS:0:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):143:1L |==> 0L
33:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):143:1L |==> -1L
34:AOR:-(double,double):%(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):148:a0 - value |==> a0 % value
35:AOR:-(double,double):*(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):148:a0 - value |==> a0 * value
36:AOR:-(double,double):+(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):148:a0 - value |==> a0 + value
37:AOR:-(double,double):/(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):148:a0 - value |==> a0 / value
38:ROR:<(double,double):!=(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):148:Math.abs(a0 - value) < epsilon |==> Math.abs(a0 - value) != epsilon
39:ROR:<(double,double):<=(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):148:Math.abs(a0 - value) < epsilon |==> Math.abs(a0 - value) <= epsilon
40:ROR:<(double,double):==(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):148:Math.abs(a0 - value) < epsilon |==> Math.abs(a0 - value) == epsilon
41:ROR:<(double,double):>(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):148:Math.abs(a0 - value) < epsilon |==> Math.abs(a0 - value) > epsilon
42:ROR:<(double,double):>=(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):148:Math.abs(a0 - value) < epsilon |==> Math.abs(a0 - value) >= epsilon
43:ROR:<(double,double):FALSE(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):148:Math.abs(a0 - value) < epsilon |==> false
44:ROR:<(double,double):TRUE(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):148:Math.abs(a0 - value) < epsilon |==> true
45:LVR:POS:0:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):150:1 |==> 0
46:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):150:1 |==> -1
47:LVR:POS:0:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):154:1 |==> 0
48:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):154:1 |==> -1
49:LVR:0:POS:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):155:0 |==> 1
50:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):155:0 |==> -1
51:LVR:POS:0:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):157:1 |==> 0
52:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):157:1 |==> -1
53:LVR:0:POS:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):159:0 |==> 1
54:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):159:0 |==> -1
55:LVR:POS:0:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):160:1 |==> 0
56:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):160:1 |==> -1
57:LVR:0:POS:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):162:0 |==> 1
58:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):162:0 |==> -1
59:LVR:FALSE:TRUE:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):163:false |==> true
60:STD:<INC>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):165:++n |==> <NO-OP>
61:LVR:POS:0:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):166:1.0 |==> 0.0
62:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):166:1.0 |==> -1.0
63:AOR:-(double,double):%(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):166:r0 - a0 |==> r0 % a0
64:AOR:-(double,double):*(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):166:r0 - a0 |==> r0 * a0
65:AOR:-(double,double):+(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):166:r0 - a0 |==> r0 + a0
66:AOR:-(double,double):/(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):166:r0 - a0 |==> r0 / a0
67:AOR:/(double,double):%(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):166:1.0 / (r0 - a0) |==> 1.0 % (r0 - a0)
68:AOR:/(double,double):*(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):166:1.0 / (r0 - a0) |==> 1.0 * (r0 - a0)
69:AOR:/(double,double):+(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):166:1.0 / (r0 - a0) |==> 1.0 + (r0 - a0)
70:AOR:/(double,double):-(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):166:1.0 / (r0 - a0) |==> 1.0 - (r0 - a0)
71:AOR:*(long,long):%(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):168:a1 * p1 |==> a1 % p1
72:AOR:*(long,long):+(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):168:a1 * p1 |==> a1 + p1
73:AOR:*(long,long):-(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):168:a1 * p1 |==> a1 - p1
74:AOR:*(long,long):/(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):168:a1 * p1 |==> a1 / p1
75:AOR:+(long,long):%(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):168:(a1 * p1) + p0 |==> (a1 * p1) % p0
76:AOR:+(long,long):*(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):168:(a1 * p1) + p0 |==> (a1 * p1) * p0
77:AOR:+(long,long):-(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):168:(a1 * p1) + p0 |==> (a1 * p1) - p0
78:AOR:+(long,long):/(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):168:(a1 * p1) + p0 |==> (a1 * p1) / p0
79:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):168:p2 = (a1 * p1) + p0 |==> <NO-OP>
80:AOR:*(long,long):%(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):169:a1 * q1 |==> a1 % q1
81:AOR:*(long,long):+(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):169:a1 * q1 |==> a1 + q1
82:AOR:*(long,long):-(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):169:a1 * q1 |==> a1 - q1
83:AOR:*(long,long):/(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):169:a1 * q1 |==> a1 / q1
84:AOR:+(long,long):%(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):169:(a1 * q1) + q0 |==> (a1 * q1) % q0
85:AOR:+(long,long):*(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):169:(a1 * q1) + q0 |==> (a1 * q1) * q0
86:AOR:+(long,long):-(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):169:(a1 * q1) + q0 |==> (a1 * q1) - q0
87:AOR:+(long,long):/(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):169:(a1 * q1) + q0 |==> (a1 * q1) / q0
88:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):169:q2 = (a1 * q1) + q0 |==> <NO-OP>
89:ROR:>(long,long):!=(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:p2 > overflow |==> p2 != overflow
90:ROR:>(long,long):<(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:p2 > overflow |==> p2 < overflow
91:ROR:>(long,long):<=(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:p2 > overflow |==> p2 <= overflow
92:ROR:>(long,long):==(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:p2 > overflow |==> p2 == overflow
93:ROR:>(long,long):>=(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:p2 > overflow |==> p2 >= overflow
94:ROR:>(long,long):FALSE(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:p2 > overflow |==> false
95:ROR:>(long,long):TRUE(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:p2 > overflow |==> true
96:ROR:>(long,long):!=(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:q2 > overflow |==> q2 != overflow
97:ROR:>(long,long):<(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:q2 > overflow |==> q2 < overflow
98:ROR:>(long,long):<=(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:q2 > overflow |==> q2 <= overflow
99:ROR:>(long,long):==(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:q2 > overflow |==> q2 == overflow
100:ROR:>(long,long):>=(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:q2 > overflow |==> q2 >= overflow
101:ROR:>(long,long):FALSE(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:q2 > overflow |==> false
102:ROR:>(long,long):TRUE(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:q2 > overflow |==> true
103:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:(p2 > overflow) || (q2 > overflow) |==> (p2 > overflow) != (q2 > overflow)
104:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:(p2 > overflow) || (q2 > overflow) |==> (p2 > overflow) && (q2 > overflow)
105:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:(p2 > overflow) || (q2 > overflow) |==> (p2 > overflow) == (q2 > overflow)
106:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:(p2 > overflow) || (q2 > overflow) |==> false
107:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:(p2 > overflow) || (q2 > overflow) |==> (p2 > overflow)
108:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:(p2 > overflow) || (q2 > overflow) |==> (q2 > overflow)
109:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):170:(p2 > overflow) || (q2 > overflow) |==> true
110:AOR:/(double,double):%(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):174:(double)p2 / (double)q2 |==> (double)p2 % (double)q2
111:AOR:/(double,double):*(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):174:(double)p2 / (double)q2 |==> (double)p2 * (double)q2
112:AOR:/(double,double):+(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):174:(double)p2 / (double)q2 |==> (double)p2 + (double)q2
113:AOR:/(double,double):-(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):174:(double)p2 / (double)q2 |==> (double)p2 - (double)q2
114:ROR:<(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations |==> n != maxIterations
115:ROR:<(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations |==> n <= maxIterations
116:ROR:<(int,int):==(int,int):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations |==> n == maxIterations
117:ROR:<(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations |==> n > maxIterations
118:ROR:<(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations |==> n >= maxIterations
119:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations |==> false
120:ROR:<(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations |==> true
121:AOR:-(double,double):%(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:convergent - value |==> convergent % value
122:AOR:-(double,double):*(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:convergent - value |==> convergent * value
123:AOR:-(double,double):+(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:convergent - value |==> convergent + value
124:AOR:-(double,double):/(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:convergent - value |==> convergent / value
125:ROR:>(double,double):!=(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:Math.abs(convergent - value) > epsilon |==> Math.abs(convergent - value) != epsilon
126:ROR:>(double,double):<(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:Math.abs(convergent - value) > epsilon |==> Math.abs(convergent - value) < epsilon
127:ROR:>(double,double):<=(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:Math.abs(convergent - value) > epsilon |==> Math.abs(convergent - value) <= epsilon
128:ROR:>(double,double):==(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:Math.abs(convergent - value) > epsilon |==> Math.abs(convergent - value) == epsilon
129:ROR:>(double,double):>=(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:Math.abs(convergent - value) > epsilon |==> Math.abs(convergent - value) >= epsilon
130:ROR:>(double,double):FALSE(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:Math.abs(convergent - value) > epsilon |==> false
131:ROR:>(double,double):TRUE(double,double):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:Math.abs(convergent - value) > epsilon |==> true
132:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations && Math.abs(convergent - value) > epsilon |==> n < maxIterations != Math.abs(convergent - value) > epsilon
133:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations && Math.abs(convergent - value) > epsilon |==> n < maxIterations == Math.abs(convergent - value) > epsilon
134:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations && Math.abs(convergent - value) > epsilon |==> false
135:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations && Math.abs(convergent - value) > epsilon |==> n < maxIterations
136:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations && Math.abs(convergent - value) > epsilon |==> Math.abs(convergent - value) > epsilon
137:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations && Math.abs(convergent - value) > epsilon |==> true
138:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations && Math.abs(convergent - value) > epsilon |==> n < maxIterations || Math.abs(convergent - value) > epsilon
139:ROR:<(long,long):!=(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:q2 < maxDenominator |==> q2 != maxDenominator
140:ROR:<(long,long):<=(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:q2 < maxDenominator |==> q2 <= maxDenominator
141:ROR:<(long,long):==(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:q2 < maxDenominator |==> q2 == maxDenominator
142:ROR:<(long,long):>(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:q2 < maxDenominator |==> q2 > maxDenominator
143:ROR:<(long,long):>=(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:q2 < maxDenominator |==> q2 >= maxDenominator
144:ROR:<(long,long):FALSE(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:q2 < maxDenominator |==> false
145:ROR:<(long,long):TRUE(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:q2 < maxDenominator |==> true
146:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator |==> (n < maxIterations && Math.abs(convergent - value) > epsilon) != q2 < maxDenominator
147:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator |==> (n < maxIterations && Math.abs(convergent - value) > epsilon) == q2 < maxDenominator
148:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator |==> false
149:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator |==> n < maxIterations && Math.abs(convergent - value) > epsilon
150:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator |==> q2 < maxDenominator
151:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator |==> true
152:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):175:n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator |==> n < maxIterations && Math.abs(convergent - value) > epsilon || q2 < maxDenominator
153:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):176:p0 = p1 |==> <NO-OP>
154:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):177:p1 = p2 |==> <NO-OP>
155:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):178:q0 = q1 |==> <NO-OP>
156:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):179:q1 = q2 |==> <NO-OP>
157:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):180:a0 = a1 |==> <NO-OP>
158:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):181:r0 = r1 |==> <NO-OP>
159:LVR:TRUE:FALSE:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):183:true |==> false
160:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):183:stop = true |==> <NO-OP>
161:ROR:>=(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):187:n >= maxIterations |==> n != maxIterations
162:ROR:>=(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):187:n >= maxIterations |==> n < maxIterations
163:ROR:>=(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):187:n >= maxIterations |==> n <= maxIterations
164:ROR:>=(int,int):==(int,int):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):187:n >= maxIterations |==> n == maxIterations
165:ROR:>=(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):187:n >= maxIterations |==> n > maxIterations
166:ROR:>=(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):187:n >= maxIterations |==> false
167:ROR:>=(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):187:n >= maxIterations |==> true
168:ROR:<(long,long):!=(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):191:q2 < maxDenominator |==> q2 != maxDenominator
169:ROR:<(long,long):<=(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):191:q2 < maxDenominator |==> q2 <= maxDenominator
170:ROR:<(long,long):==(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):191:q2 < maxDenominator |==> q2 == maxDenominator
171:ROR:<(long,long):>(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):191:q2 < maxDenominator |==> q2 > maxDenominator
172:ROR:<(long,long):>=(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):191:q2 < maxDenominator |==> q2 >= maxDenominator
173:ROR:<(long,long):FALSE(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):191:q2 < maxDenominator |==> false
174:ROR:<(long,long):TRUE(long,long):org.apache.commons.math.fraction.Fraction@<init>(double,double,int,int):191:q2 < maxDenominator |==> true
175:LVR:0:POS:org.apache.commons.math.fraction.Fraction@<init>(int,int):210:0 |==> 1
176:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@<init>(int,int):210:0 |==> -1
177:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):210:den == 0 |==> den != 0
178:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):210:den == 0 |==> den < 0
179:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):210:den == 0 |==> den <= 0
180:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):210:den == 0 |==> den > 0
181:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):210:den == 0 |==> den >= 0
182:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):210:den == 0 |==> false
183:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):210:den == 0 |==> true
184:LVR:0:POS:org.apache.commons.math.fraction.Fraction@<init>(int,int):214:0 |==> 1
185:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@<init>(int,int):214:0 |==> -1
186:ROR:<(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):214:den < 0 |==> den != 0
187:ROR:<(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):214:den < 0 |==> den <= 0
188:ROR:<(int,int):==(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):214:den < 0 |==> den == 0
189:ROR:<(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):214:den < 0 |==> den > 0
190:ROR:<(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):214:den < 0 |==> den >= 0
191:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):214:den < 0 |==> false
192:ROR:<(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):214:den < 0 |==> true
193:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:num == Integer.MIN_VALUE |==> num != Integer.MIN_VALUE
194:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:num == Integer.MIN_VALUE |==> num < Integer.MIN_VALUE
195:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:num == Integer.MIN_VALUE |==> num <= Integer.MIN_VALUE
196:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:num == Integer.MIN_VALUE |==> num > Integer.MIN_VALUE
197:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:num == Integer.MIN_VALUE |==> num >= Integer.MIN_VALUE
198:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:num == Integer.MIN_VALUE |==> false
199:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:num == Integer.MIN_VALUE |==> true
200:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:den == Integer.MIN_VALUE |==> den != Integer.MIN_VALUE
201:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:den == Integer.MIN_VALUE |==> den < Integer.MIN_VALUE
202:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:den == Integer.MIN_VALUE |==> den <= Integer.MIN_VALUE
203:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:den == Integer.MIN_VALUE |==> den > Integer.MIN_VALUE
204:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:den == Integer.MIN_VALUE |==> den >= Integer.MIN_VALUE
205:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:den == Integer.MIN_VALUE |==> false
206:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:den == Integer.MIN_VALUE |==> true
207:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:num == Integer.MIN_VALUE || den == Integer.MIN_VALUE |==> num == Integer.MIN_VALUE != (den == Integer.MIN_VALUE)
208:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:num == Integer.MIN_VALUE || den == Integer.MIN_VALUE |==> num == Integer.MIN_VALUE && den == Integer.MIN_VALUE
209:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:num == Integer.MIN_VALUE || den == Integer.MIN_VALUE |==> num == Integer.MIN_VALUE == (den == Integer.MIN_VALUE)
210:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:num == Integer.MIN_VALUE || den == Integer.MIN_VALUE |==> false
211:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:num == Integer.MIN_VALUE || den == Integer.MIN_VALUE |==> num == Integer.MIN_VALUE
212:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:num == Integer.MIN_VALUE || den == Integer.MIN_VALUE |==> den == Integer.MIN_VALUE
213:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math.fraction.Fraction@<init>(int,int):215:num == Integer.MIN_VALUE || den == Integer.MIN_VALUE |==> true
214:ORU:-(int):+(int):org.apache.commons.math.fraction.Fraction@<init>(int,int):219:-num |==> +num
215:ORU:-(int):~(int):org.apache.commons.math.fraction.Fraction@<init>(int,int):219:-num |==> ~num
216:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(int,int):219:num = -num |==> <NO-OP>
217:ORU:-(int):+(int):org.apache.commons.math.fraction.Fraction@<init>(int,int):220:-den |==> +den
218:ORU:-(int):~(int):org.apache.commons.math.fraction.Fraction@<init>(int,int):220:-den |==> ~den
219:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(int,int):220:den = -den |==> <NO-OP>
220:LVR:POS:0:org.apache.commons.math.fraction.Fraction@<init>(int,int):224:1 |==> 0
221:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@<init>(int,int):224:1 |==> -1
222:ROR:>(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):224:d > 1 |==> d != 1
223:ROR:>(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):224:d > 1 |==> d < 1
224:ROR:>(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):224:d > 1 |==> d <= 1
225:ROR:>(int,int):==(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):224:d > 1 |==> d == 1
226:ROR:>(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):224:d > 1 |==> d >= 1
227:ROR:>(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):224:d > 1 |==> false
228:ROR:>(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):224:d > 1 |==> true
229:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(int,int):225:num /= d |==> <NO-OP>
230:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(int,int):226:den /= d |==> <NO-OP>
231:LVR:0:POS:org.apache.commons.math.fraction.Fraction@<init>(int,int):230:0 |==> 1
232:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@<init>(int,int):230:0 |==> -1
233:ROR:<(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):230:den < 0 |==> den != 0
234:ROR:<(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):230:den < 0 |==> den <= 0
235:ROR:<(int,int):==(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):230:den < 0 |==> den == 0
236:ROR:<(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):230:den < 0 |==> den > 0
237:ROR:<(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):230:den < 0 |==> den >= 0
238:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):230:den < 0 |==> false
239:ROR:<(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@<init>(int,int):230:den < 0 |==> true
240:LVR:NEG:0:org.apache.commons.math.fraction.Fraction@<init>(int,int):231:-1 |==> 0
241:LVR:NEG:POS:org.apache.commons.math.fraction.Fraction@<init>(int,int):231:-1 |==> 1
242:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(int,int):231:num *= -1 |==> <NO-OP>
243:LVR:NEG:0:org.apache.commons.math.fraction.Fraction@<init>(int,int):232:-1 |==> 0
244:LVR:NEG:POS:org.apache.commons.math.fraction.Fraction@<init>(int,int):232:-1 |==> 1
245:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@<init>(int,int):232:den *= -1 |==> <NO-OP>
246:LVR:0:POS:org.apache.commons.math.fraction.Fraction@abs():244:0 |==> 1
247:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@abs():244:0 |==> -1
248:ROR:>=(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@abs():244:numerator >= 0 |==> numerator != 0
249:ROR:>=(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@abs():244:numerator >= 0 |==> numerator < 0
250:ROR:>=(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@abs():244:numerator >= 0 |==> numerator <= 0
251:ROR:>=(int,int):==(int,int):org.apache.commons.math.fraction.Fraction@abs():244:numerator >= 0 |==> numerator == 0
252:ROR:>=(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@abs():244:numerator >= 0 |==> numerator > 0
253:ROR:>=(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@abs():244:numerator >= 0 |==> false
254:ROR:>=(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@abs():244:numerator >= 0 |==> true
255:AOR:*(long,long):%(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):259:((long)numerator) * object.denominator |==> ((long)numerator) % object.denominator
256:AOR:*(long,long):+(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):259:((long)numerator) * object.denominator |==> ((long)numerator) + object.denominator
257:AOR:*(long,long):-(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):259:((long)numerator) * object.denominator |==> ((long)numerator) - object.denominator
258:AOR:*(long,long):/(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):259:((long)numerator) * object.denominator |==> ((long)numerator) / object.denominator
259:AOR:*(long,long):%(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):260:((long)denominator) * object.numerator |==> ((long)denominator) % object.numerator
260:AOR:*(long,long):+(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):260:((long)denominator) * object.numerator |==> ((long)denominator) + object.numerator
261:AOR:*(long,long):-(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):260:((long)denominator) * object.numerator |==> ((long)denominator) - object.numerator
262:AOR:*(long,long):/(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):260:((long)denominator) * object.numerator |==> ((long)denominator) / object.numerator
263:ROR:<(long,long):!=(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:nOd < dOn |==> nOd != dOn
264:ROR:<(long,long):<=(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:nOd < dOn |==> nOd <= dOn
265:ROR:<(long,long):==(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:nOd < dOn |==> nOd == dOn
266:ROR:<(long,long):>(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:nOd < dOn |==> nOd > dOn
267:ROR:<(long,long):>=(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:nOd < dOn |==> nOd >= dOn
268:ROR:<(long,long):FALSE(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:nOd < dOn |==> false
269:ROR:<(long,long):TRUE(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:nOd < dOn |==> true
270:LVR:NEG:0:org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:-1 |==> 0
271:LVR:NEG:POS:org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:-1 |==> 1
272:ROR:>(long,long):!=(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:nOd > dOn |==> nOd != dOn
273:ROR:>(long,long):<(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:nOd > dOn |==> nOd < dOn
274:ROR:>(long,long):<=(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:nOd > dOn |==> nOd <= dOn
275:ROR:>(long,long):==(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:nOd > dOn |==> nOd == dOn
276:ROR:>(long,long):>=(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:nOd > dOn |==> nOd >= dOn
277:ROR:>(long,long):FALSE(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:nOd > dOn |==> false
278:ROR:>(long,long):TRUE(long,long):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:nOd > dOn |==> true
279:ORU:+(int):-(int):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:+1 |==> -1
280:ORU:+(int):~(int):org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:+1 |==> ~1
281:LVR:POS:0:org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:1 |==> 0
282:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:1 |==> -1
283:LVR:0:POS:org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:0 |==> 1
284:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@compareTo(org.apache.commons.math.fraction.Fraction):261:0 |==> -1
285:AOR:/(double,double):%(double,double):org.apache.commons.math.fraction.Fraction@doubleValue():270:(double)numerator / (double)denominator |==> (double)numerator % (double)denominator
286:AOR:/(double,double):*(double,double):org.apache.commons.math.fraction.Fraction@doubleValue():270:(double)numerator / (double)denominator |==> (double)numerator * (double)denominator
287:AOR:/(double,double):+(double,double):org.apache.commons.math.fraction.Fraction@doubleValue():270:(double)numerator / (double)denominator |==> (double)numerator + (double)denominator
288:AOR:/(double,double):-(double,double):org.apache.commons.math.fraction.Fraction@doubleValue():270:(double)numerator / (double)denominator |==> (double)numerator - (double)denominator
289:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):285:this == other |==> this != other
290:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):285:this == other |==> false
291:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):285:this == other |==> true
292:LVR:TRUE:FALSE:org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):286:true |==> false
293:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):287:other == null |==> other != null
294:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):287:other == null |==> false
295:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):287:other == null |==> true
296:LVR:FALSE:TRUE:org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):288:false |==> true
297:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):294:numerator == rhs.numerator |==> numerator != rhs.numerator
298:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):294:numerator == rhs.numerator |==> numerator < rhs.numerator
299:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):294:numerator == rhs.numerator |==> numerator <= rhs.numerator
300:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):294:numerator == rhs.numerator |==> numerator > rhs.numerator
301:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):294:numerator == rhs.numerator |==> numerator >= rhs.numerator
302:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):294:numerator == rhs.numerator |==> false
303:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):294:numerator == rhs.numerator |==> true
304:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):295:denominator == rhs.denominator |==> denominator != rhs.denominator
305:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):295:denominator == rhs.denominator |==> denominator < rhs.denominator
306:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):295:denominator == rhs.denominator |==> denominator <= rhs.denominator
307:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):295:denominator == rhs.denominator |==> denominator > rhs.denominator
308:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):295:denominator == rhs.denominator |==> denominator >= rhs.denominator
309:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):295:denominator == rhs.denominator |==> false
310:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):295:denominator == rhs.denominator |==> true
311:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):294:(numerator == rhs.numerator) && (denominator == rhs.denominator) |==> (numerator == rhs.numerator) != (denominator == rhs.denominator)
312:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):294:(numerator == rhs.numerator) && (denominator == rhs.denominator) |==> (numerator == rhs.numerator) == (denominator == rhs.denominator)
313:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):294:(numerator == rhs.numerator) && (denominator == rhs.denominator) |==> false
314:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):294:(numerator == rhs.numerator) && (denominator == rhs.denominator) |==> (numerator == rhs.numerator)
315:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):295:(numerator == rhs.numerator) && (denominator == rhs.denominator) |==> (denominator == rhs.denominator)
316:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):294:(numerator == rhs.numerator) && (denominator == rhs.denominator) |==> true
317:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):294:(numerator == rhs.numerator) && (denominator == rhs.denominator) |==> (numerator == rhs.numerator) || (denominator == rhs.denominator)
318:LVR:FALSE:TRUE:org.apache.commons.math.fraction.Fraction@equals(java.lang.Object):298:false |==> true
319:LVR:POS:0:org.apache.commons.math.fraction.Fraction@hashCode():335:37 |==> 0
320:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@hashCode():335:37 |==> -37
321:LVR:POS:0:org.apache.commons.math.fraction.Fraction@hashCode():335:37 |==> 0
322:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@hashCode():335:37 |==> -37
323:LVR:POS:0:org.apache.commons.math.fraction.Fraction@hashCode():335:17 |==> 0
324:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@hashCode():335:17 |==> -17
325:AOR:*(int,int):%(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * 17 |==> 37 % 17
326:AOR:*(int,int):+(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * 17 |==> 37 + 17
327:AOR:*(int,int):-(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * 17 |==> 37 - 17
328:AOR:*(int,int):/(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * 17 |==> 37 / 17
329:AOR:+(int,int):%(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * 17 + getNumerator() |==> 37 * 17 % getNumerator()
330:AOR:+(int,int):*(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * 17 + getNumerator() |==> 37 * 17 * getNumerator()
331:AOR:+(int,int):-(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * 17 + getNumerator() |==> 37 * 17 - getNumerator()
332:AOR:+(int,int):/(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * 17 + getNumerator() |==> 37 * 17 / getNumerator()
333:AOR:*(int,int):%(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * (37 * 17 + getNumerator()) |==> 37 % (37 * 17 + getNumerator())
334:AOR:*(int,int):+(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * (37 * 17 + getNumerator()) |==> 37 + (37 * 17 + getNumerator())
335:AOR:*(int,int):-(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * (37 * 17 + getNumerator()) |==> 37 - (37 * 17 + getNumerator())
336:AOR:*(int,int):/(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * (37 * 17 + getNumerator()) |==> 37 / (37 * 17 + getNumerator())
337:AOR:+(int,int):%(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) % getDenominator()
338:AOR:+(int,int):*(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) * getDenominator()
339:AOR:+(int,int):-(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) - getDenominator()
340:AOR:+(int,int):/(int,int):org.apache.commons.math.fraction.Fraction@hashCode():335:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) / getDenominator()
341:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@negate():361:numerator == Integer.MIN_VALUE |==> numerator != Integer.MIN_VALUE
342:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@negate():361:numerator == Integer.MIN_VALUE |==> numerator < Integer.MIN_VALUE
343:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@negate():361:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
344:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@negate():361:numerator == Integer.MIN_VALUE |==> numerator > Integer.MIN_VALUE
345:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@negate():361:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
346:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@negate():361:numerator == Integer.MIN_VALUE |==> false
347:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@negate():361:numerator == Integer.MIN_VALUE |==> true
348:ORU:-(int):+(int):org.apache.commons.math.fraction.Fraction@negate():365:-numerator |==> +numerator
349:ORU:-(int):~(int):org.apache.commons.math.fraction.Fraction@negate():365:-numerator |==> ~numerator
350:LVR:TRUE:FALSE:org.apache.commons.math.fraction.Fraction@add(org.apache.commons.math.fraction.Fraction):387:true |==> false
351:LVR:FALSE:TRUE:org.apache.commons.math.fraction.Fraction@subtract(org.apache.commons.math.fraction.Fraction):401:false |==> true
352:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):415:fraction == null |==> fraction != null
353:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):415:fraction == null |==> false
354:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):415:fraction == null |==> true
355:LVR:0:POS:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):419:0 |==> 1
356:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):419:0 |==> -1
357:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):419:numerator == 0 |==> numerator != 0
358:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):419:numerator == 0 |==> numerator < 0
359:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):419:numerator == 0 |==> numerator <= 0
360:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):419:numerator == 0 |==> numerator > 0
361:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):419:numerator == 0 |==> numerator >= 0
362:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):419:numerator == 0 |==> false
363:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):419:numerator == 0 |==> true
364:COR:isAdd:TRUE:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):420:isAdd |==> false
365:COR:isAdd:FALSE:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):420:isAdd |==> true
366:LVR:0:POS:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):422:0 |==> 1
367:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):422:0 |==> -1
368:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):422:fraction.numerator == 0 |==> fraction.numerator != 0
369:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):422:fraction.numerator == 0 |==> fraction.numerator < 0
370:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):422:fraction.numerator == 0 |==> fraction.numerator <= 0
371:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):422:fraction.numerator == 0 |==> fraction.numerator > 0
372:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):422:fraction.numerator == 0 |==> fraction.numerator >= 0
373:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):422:fraction.numerator == 0 |==> false
374:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):422:fraction.numerator == 0 |==> true
375:LVR:POS:0:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):428:1 |==> 0
376:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):428:1 |==> -1
377:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):428:d1 == 1 |==> d1 != 1
378:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):428:d1 == 1 |==> d1 < 1
379:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):428:d1 == 1 |==> d1 <= 1
380:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):428:d1 == 1 |==> d1 > 1
381:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):428:d1 == 1 |==> d1 >= 1
382:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):428:d1 == 1 |==> false
383:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):428:d1 == 1 |==> true
384:COR:isAdd:TRUE:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):433:isAdd |==> false
385:COR:isAdd:FALSE:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):433:isAdd |==> true
386:AOR:/(int,int):%(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):441:fraction.denominator / d1 |==> fraction.denominator % d1
387:AOR:/(int,int):*(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):441:fraction.denominator / d1 |==> fraction.denominator * d1
388:AOR:/(int,int):+(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):441:fraction.denominator / d1 |==> fraction.denominator + d1
389:AOR:/(int,int):-(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):441:fraction.denominator / d1 |==> fraction.denominator - d1
390:AOR:/(int,int):%(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):443:denominator / d1 |==> denominator % d1
391:AOR:/(int,int):*(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):443:denominator / d1 |==> denominator * d1
392:AOR:/(int,int):+(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):443:denominator / d1 |==> denominator + d1
393:AOR:/(int,int):-(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):443:denominator / d1 |==> denominator - d1
394:COR:isAdd:TRUE:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):444:isAdd |==> false
395:COR:isAdd:FALSE:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):444:isAdd |==> true
396:LVR:0:POS:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):448:0 |==> 1
397:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):448:0 |==> -1
398:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):448:tmodd1 == 0 |==> tmodd1 != 0
399:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):448:tmodd1 == 0 |==> tmodd1 < 0
400:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):448:tmodd1 == 0 |==> tmodd1 <= 0
401:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):448:tmodd1 == 0 |==> tmodd1 > 0
402:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):448:tmodd1 == 0 |==> tmodd1 >= 0
403:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):448:tmodd1 == 0 |==> false
404:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):448:tmodd1 == 0 |==> true
405:LVR:POS:0:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):452:31 |==> 0
406:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):452:31 |==> -31
407:ROR:>(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):452:w.bitLength() > 31 |==> w.bitLength() != 31
408:ROR:>(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):452:w.bitLength() > 31 |==> w.bitLength() < 31
409:ROR:>(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):452:w.bitLength() > 31 |==> w.bitLength() <= 31
410:ROR:>(int,int):==(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):452:w.bitLength() > 31 |==> w.bitLength() == 31
411:ROR:>(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):452:w.bitLength() > 31 |==> w.bitLength() >= 31
412:ROR:>(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):452:w.bitLength() > 31 |==> false
413:ROR:>(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):452:w.bitLength() > 31 |==> true
414:AOR:/(int,int):%(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):457:denominator / d1 |==> denominator % d1
415:AOR:/(int,int):*(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):457:denominator / d1 |==> denominator * d1
416:AOR:/(int,int):+(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):457:denominator / d1 |==> denominator + d1
417:AOR:/(int,int):-(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):457:denominator / d1 |==> denominator - d1
418:AOR:/(int,int):%(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):458:fraction.denominator / d2 |==> fraction.denominator % d2
419:AOR:/(int,int):*(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):458:fraction.denominator / d2 |==> fraction.denominator * d2
420:AOR:/(int,int):+(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):458:fraction.denominator / d2 |==> fraction.denominator + d2
421:AOR:/(int,int):-(int,int):org.apache.commons.math.fraction.Fraction@addSub(org.apache.commons.math.fraction.Fraction,boolean):458:fraction.denominator / d2 |==> fraction.denominator - d2
422:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):472:fraction == null |==> fraction != null
423:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):472:fraction == null |==> false
424:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):472:fraction == null |==> true
425:LVR:0:POS:org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:0 |==> 1
426:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:0 |==> -1
427:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:numerator == 0 |==> numerator != 0
428:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:numerator == 0 |==> numerator < 0
429:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:numerator == 0 |==> numerator <= 0
430:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:numerator == 0 |==> numerator > 0
431:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:numerator == 0 |==> numerator >= 0
432:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:numerator == 0 |==> false
433:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:numerator == 0 |==> true
434:LVR:0:POS:org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:0 |==> 1
435:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:0 |==> -1
436:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:fraction.numerator == 0 |==> fraction.numerator != 0
437:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:fraction.numerator == 0 |==> fraction.numerator < 0
438:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:fraction.numerator == 0 |==> fraction.numerator <= 0
439:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:fraction.numerator == 0 |==> fraction.numerator > 0
440:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:fraction.numerator == 0 |==> fraction.numerator >= 0
441:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:fraction.numerator == 0 |==> false
442:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:fraction.numerator == 0 |==> true
443:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:numerator == 0 || fraction.numerator == 0 |==> numerator == 0 != (fraction.numerator == 0)
444:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:numerator == 0 || fraction.numerator == 0 |==> numerator == 0 && fraction.numerator == 0
445:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:numerator == 0 || fraction.numerator == 0 |==> numerator == 0 == (fraction.numerator == 0)
446:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:numerator == 0 || fraction.numerator == 0 |==> false
447:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:numerator == 0 || fraction.numerator == 0 |==> numerator == 0
448:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:numerator == 0 || fraction.numerator == 0 |==> fraction.numerator == 0
449:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):475:numerator == 0 || fraction.numerator == 0 |==> true
450:AOR:/(int,int):%(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):483:numerator / d1 |==> numerator % d1
451:AOR:/(int,int):*(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):483:numerator / d1 |==> numerator * d1
452:AOR:/(int,int):+(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):483:numerator / d1 |==> numerator + d1
453:AOR:/(int,int):-(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):483:numerator / d1 |==> numerator - d1
454:AOR:/(int,int):%(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):483:fraction.numerator / d2 |==> fraction.numerator % d2
455:AOR:/(int,int):*(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):483:fraction.numerator / d2 |==> fraction.numerator * d2
456:AOR:/(int,int):+(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):483:fraction.numerator / d2 |==> fraction.numerator + d2
457:AOR:/(int,int):-(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):483:fraction.numerator / d2 |==> fraction.numerator - d2
458:AOR:/(int,int):%(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):484:denominator / d2 |==> denominator % d2
459:AOR:/(int,int):*(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):484:denominator / d2 |==> denominator * d2
460:AOR:/(int,int):+(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):484:denominator / d2 |==> denominator + d2
461:AOR:/(int,int):-(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):484:denominator / d2 |==> denominator - d2
462:AOR:/(int,int):%(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):484:fraction.denominator / d1 |==> fraction.denominator % d1
463:AOR:/(int,int):*(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):484:fraction.denominator / d1 |==> fraction.denominator * d1
464:AOR:/(int,int):+(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):484:fraction.denominator / d1 |==> fraction.denominator + d1
465:AOR:/(int,int):-(int,int):org.apache.commons.math.fraction.Fraction@multiply(org.apache.commons.math.fraction.Fraction):484:fraction.denominator / d1 |==> fraction.denominator - d1
466:ROR:==(java.lang.Object,java.lang.Object):!=(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.Fraction@divide(org.apache.commons.math.fraction.Fraction):498:fraction == null |==> fraction != null
467:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.Fraction@divide(org.apache.commons.math.fraction.Fraction):498:fraction == null |==> false
468:ROR:==(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math.fraction.Fraction@divide(org.apache.commons.math.fraction.Fraction):498:fraction == null |==> true
469:LVR:0:POS:org.apache.commons.math.fraction.Fraction@divide(org.apache.commons.math.fraction.Fraction):501:0 |==> 1
470:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@divide(org.apache.commons.math.fraction.Fraction):501:0 |==> -1
471:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@divide(org.apache.commons.math.fraction.Fraction):501:fraction.numerator == 0 |==> fraction.numerator != 0
472:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@divide(org.apache.commons.math.fraction.Fraction):501:fraction.numerator == 0 |==> fraction.numerator < 0
473:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@divide(org.apache.commons.math.fraction.Fraction):501:fraction.numerator == 0 |==> fraction.numerator <= 0
474:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@divide(org.apache.commons.math.fraction.Fraction):501:fraction.numerator == 0 |==> fraction.numerator > 0
475:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@divide(org.apache.commons.math.fraction.Fraction):501:fraction.numerator == 0 |==> fraction.numerator >= 0
476:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@divide(org.apache.commons.math.fraction.Fraction):501:fraction.numerator == 0 |==> false
477:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@divide(org.apache.commons.math.fraction.Fraction):501:fraction.numerator == 0 |==> true
478:LVR:0:POS:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):521:0 |==> 1
479:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):521:0 |==> -1
480:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):521:denominator == 0 |==> denominator != 0
481:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):521:denominator == 0 |==> denominator < 0
482:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):521:denominator == 0 |==> denominator <= 0
483:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):521:denominator == 0 |==> denominator > 0
484:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):521:denominator == 0 |==> denominator >= 0
485:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):521:denominator == 0 |==> false
486:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):521:denominator == 0 |==> true
487:LVR:0:POS:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):526:0 |==> 1
488:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):526:0 |==> -1
489:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):526:numerator == 0 |==> numerator != 0
490:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):526:numerator == 0 |==> numerator < 0
491:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):526:numerator == 0 |==> numerator <= 0
492:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):526:numerator == 0 |==> numerator > 0
493:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):526:numerator == 0 |==> numerator >= 0
494:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):526:numerator == 0 |==> false
495:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):526:numerator == 0 |==> true
496:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:denominator == Integer.MIN_VALUE |==> denominator != Integer.MIN_VALUE
497:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:denominator == Integer.MIN_VALUE |==> denominator < Integer.MIN_VALUE
498:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
499:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:denominator == Integer.MIN_VALUE |==> denominator > Integer.MIN_VALUE
500:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
501:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:denominator == Integer.MIN_VALUE |==> false
502:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:denominator == Integer.MIN_VALUE |==> true
503:LVR:POS:0:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:1 |==> 0
504:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:1 |==> -1
505:LOR:&(int,int):^(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:numerator & 1 |==> numerator ^ 1
506:LOR:&(int,int):|(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:numerator & 1 |==> numerator | 1
507:LVR:0:POS:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:0 |==> 1
508:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:0 |==> -1
509:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:(numerator & 1) == 0 |==> (numerator & 1) != 0
510:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:(numerator & 1) == 0 |==> (numerator & 1) < 0
511:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:(numerator & 1) == 0 |==> (numerator & 1) <= 0
512:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:(numerator & 1) == 0 |==> (numerator & 1) > 0
513:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:(numerator & 1) == 0 |==> (numerator & 1) >= 0
514:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:(numerator & 1) == 0 |==> false
515:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:(numerator & 1) == 0 |==> true
516:COR:&&(boolean,boolean):!=(boolean,boolean):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE != ((numerator & 1) == 0)
517:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE == ((numerator & 1) == 0)
518:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> false
519:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE
520:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> (numerator & 1) == 0
521:COR:&&(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> true
522:COR:&&(boolean,boolean):||(boolean,boolean):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):530:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE || (numerator & 1) == 0
523:LVR:POS:0:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):531:2 |==> 0
524:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):531:2 |==> -2
525:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):531:numerator /= 2 |==> <NO-OP>
526:LVR:POS:0:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):531:2 |==> 0
527:LVR:POS:NEG:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):531:2 |==> -2
528:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):531:denominator /= 2 |==> <NO-OP>
529:LVR:0:POS:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):533:0 |==> 1
530:LVR:0:NEG:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):533:0 |==> -1
531:ROR:<(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):533:denominator < 0 |==> denominator != 0
532:ROR:<(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):533:denominator < 0 |==> denominator <= 0
533:ROR:<(int,int):==(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):533:denominator < 0 |==> denominator == 0
534:ROR:<(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):533:denominator < 0 |==> denominator > 0
535:ROR:<(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):533:denominator < 0 |==> denominator >= 0
536:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):533:denominator < 0 |==> false
537:ROR:<(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):533:denominator < 0 |==> true
538:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):534:numerator == Integer.MIN_VALUE |==> numerator != Integer.MIN_VALUE
539:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):534:numerator == Integer.MIN_VALUE |==> numerator < Integer.MIN_VALUE
540:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):534:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
541:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):534:numerator == Integer.MIN_VALUE |==> numerator > Integer.MIN_VALUE
542:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):534:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
543:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):534:numerator == Integer.MIN_VALUE |==> false
544:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):534:numerator == Integer.MIN_VALUE |==> true
545:ROR:==(int,int):!=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):535:denominator == Integer.MIN_VALUE |==> denominator != Integer.MIN_VALUE
546:ROR:==(int,int):<(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):535:denominator == Integer.MIN_VALUE |==> denominator < Integer.MIN_VALUE
547:ROR:==(int,int):<=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):535:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
548:ROR:==(int,int):>(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):535:denominator == Integer.MIN_VALUE |==> denominator > Integer.MIN_VALUE
549:ROR:==(int,int):>=(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):535:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
550:ROR:==(int,int):FALSE(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):535:denominator == Integer.MIN_VALUE |==> false
551:ROR:==(int,int):TRUE(int,int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):535:denominator == Integer.MIN_VALUE |==> true
552:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):534:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE != (denominator == Integer.MIN_VALUE)
553:COR:||(boolean,boolean):&&(boolean,boolean):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):534:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE && denominator == Integer.MIN_VALUE
554:COR:||(boolean,boolean):==(boolean,boolean):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):534:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE == (denominator == Integer.MIN_VALUE)
555:COR:||(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):534:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> false
556:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):534:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE
557:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):535:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> denominator == Integer.MIN_VALUE
558:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):534:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> true
559:ORU:-(int):+(int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):540:-numerator |==> +numerator
560:ORU:-(int):~(int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):540:-numerator |==> ~numerator
561:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):540:numerator = -numerator |==> <NO-OP>
562:ORU:-(int):+(int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):541:-denominator |==> +denominator
563:ORU:-(int):~(int):org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):541:-denominator |==> ~denominator
564:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):541:denominator = -denominator |==> <NO-OP>
565:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):545:numerator /= gcd |==> <NO-OP>
566:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.fraction.Fraction@getReducedFraction(int,int):546:denominator /= gcd |==> <NO-OP>